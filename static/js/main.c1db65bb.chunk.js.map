{"version":3,"sources":["serviceWorker.ts","CharacterCreator/React/BodyMap.tsx","CharacterCreator/React/BodySelector.tsx","CharacterCreator/React/PartSelector.tsx","CharacterCreator/React/PartAccordion.tsx","CharacterCreator/React/CharacterCanvas.tsx","CharacterCreator/React/CharacterCreator.tsx","Items/Classes/Item.tsx","Items/Classes/ItemWeapon.tsx","Items/React/Common/CardIcon.tsx","Items/Classes/ItemPotion.tsx","Items/React/Common/ItemCard.tsx","Items/React/Shop/BazaarCarpet.tsx","Items/Classes/ItemArmor.tsx","Items/Classes/ItemWondrous.tsx","Items/Classes/ItemSource.tsx","Items/Enums/EStorageType.tsx","Items/React/Shop/CarpetMap.tsx","Items/Classes/InventoryStorage.tsx","Items/React/Common/AttackRollModal.tsx","Items/React/Common/ItemDetailsModal.tsx","Items/React/Shop/ItemShop.tsx","Items/React/Inventory/Inventory.tsx","LandingSpace.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","bodyMaps","Array","push","name","description","imageSource","layers","avgMasculineLayers","avgFeminineLayers","avgMasculineReptilianLayers","avgFeminineReptilianLayers","BodySelector","props","Button","className","variant","style","borderColor","boxShadow","width","onClick","bodyMap","src","alt","Carousel","Caption","PartSelector","layerIndex","rounded","PartAccordion","layer","images","map","this","Card","background","text","Accordion","Toggle","as","Header","eventKey","toString","cursor","key","Collapse","Body","renderPartsButtons","Tab","title","Tabs","defaultActiveKey","id","renderPartTabs","React","Component","CharacterCanvas","canvasHeight","canvasWidth","outlineColors","handleOutlineColorChange","color","setState","outlineColor","hex","state","canvas","refs","borderCanvas","display","getContext","imageSmoothingEnabled","prevProps","imagesWidth","imagesHeight","loadedImages","promiseArray","imagesToRender","image","index","imgSrc","height","Promise","resolve","partImg","Image","onload","renderImagesFn","all","then","charCtx","charCanvas","clearRect","forEach","img","drawImage","charImgSrc","toDataURL","borderImg","borderCtx","borderStyle","dArr","i","length","globalCompositeOperation","fillStyle","fillRect","drawImageBorder","ref","backgroundImage","Container","fluid","Row","onChangeComplete","colors","onClickDownload","document","getElementById","CharacterCreator","canvasImages","partLayers","carouselIndex","carouselDirection","downloadUrl","link","createElement","download","href","click","newCanvasImages","newImagesToRender","includes","Item","body","handleBodySelection","direction","canvasImagesToRender","currentBodyMap","Col","lg","interval","indicators","onSelect","handleCarouselSelect","bind","renderBodySelection","downloadImage","layerName","handlePartSelection","details","iconSource","source","itemCost","requiresAttunement","type","paragraphMargins","titleMargins","padding","ItemWeapon","shortRange","longRange","properties","attacks","paddingTop","GetAttackDetails","GetProperties","attackDetails","Object","entries","element","damageRolls","rolls","roll","damageType","toLowerCase","diceCount","diceSize","modifier","fontWeight","propertyDetails","property","json","item","assign","IItemIsItemWeapon","isType","undefined","CardIcon","OverlayTrigger","placement","delay","show","hide","overlay","Tooltip","tooltipText","ItemPotion","hasWithdrawalEffect","GetWithdrawalEffectClause","IItemIsItemPotion","ItemCard","cardWidth","cardHeight","cardDefaultMargin","cardRatio","itemAreaDefaultOffset","itemAreaDefaultSize","titleDefaultTopOffset","titleDefaultFontSize","titleWidth","titleDefaultLeftOffset","descAreaDefaultOffset","descAreaDefaultSize","attackIconDefaultSize","iconDefaultSize","iconDefaultLeftOffset","iconDefaultTopOffset","coinDefaultSize","coinDefaultLeftOffset","coinDefaultTopOffset","titleFontSize","itemDetails","flatMap","attackIndicators","onAttackClick","icons","iconDimensions","cardCanvas","LoadCard","DrawTitleText","imagesToLoad","borderImage","GetCardBackSource","iconImage","loadedImagesPromises","console","log","DrawCard","titleText","testDiv","innerText","cardDiv","card","visibility","insertAdjacentElement","textWidth","offsetWidth","removeChild","fontSize","fontRatio","newFontSize","Math","min","margin","onItemClick","top","left","maxWidth","GetCardIcons","maxHeight","minHeight","GetAdditionalCardContent","BazaarCarpet","carpetMap","items","rugName","borderImageSource","rugBorderSource","getShopItems","ItemArmor","armorBonus","addDex","stealthDisadvantage","ItemWondrous","EStorageType","ItemSource","listToSearch","constructedItem","ItemMap_Weapons","ItemMap_Armor","ItemMap_Potions","ItemMap_Wondrous","currentItem","fromJson","IItemIsItemArmor","IItemIsItemWondrous","CarpetMap","borderSource","itemType","itemLookup","GetItem","CarpetMaps","InventoryStorage","_items","Map","_characterName","_validCharnameCharacters","UpdateInventoryUsingCache","addEventListener","InitializeLists","parsedStorage","GetInventoryStorage","keys","charName","storedName","localStorage","getItem","CharacterName","AddCharacter","typedItems","has","get","setItem","nameIsValid","userHitCancel","userUsedInvalidCharacters","userEnteredExistingName","atLeastOneValidNameExists","userPrompt","input","prompt","stringInput","test","SaveToCache","set","AddItemInternal","itemsOfType","splice","cacheItems","value","JSON","stringify","inventoryModel","characterName","jsonStorage","Inventory","itemStorage","storageString","parse","error","instance","AttackRollModal","randomRollNumbers","rollDelay","rollDieAudio","Audio","roll20Audio","roll1Audio","attackRoll","damageRoll","volume","dieFaces","ceil","random","randomNumberList","floor","setTimeout","GetDieValue","play","attack","rolledNumbers","rollStatement","diceRollsMessage","join","rollModifierMessage","damageMessage","Modal","onEntering","RollAttack","RollDamage","centered","onHide","Title","attackName","version","xmlns","fill","d","GetDamageRollDisplay","ItemDetailsModal","showAlert","hideModal","Alert","inventoryAlertStyle","Spinner","animation","getSourceText","getTypeDisplay","RenderItemDescription","Footer","inventoryButtonCallback","disabled","inventoryButtonText","ItemShop","showItemDialog","showAddedAlert","showAttackRoll","attackRolls","setModalVisiblity","carpet","getBazaarCarpets","getInstance","AddItem","inventoryAlertText","armorItems","potionItems","weaponItems","wondrousItems","handleStorageChange","weapon","updateFromInventory","GetItemsOfType","getArmor","getPotions","getWeapons","getWondrous","Home","to","ReactDOM","render","exact","path","children","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1db65bb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import avgFeminineLayers from './json/avg_Feminine.json';\r\nimport avgMasculineLayers from './json/avg_Masculine.json';\r\nimport avgFeminineReptilianLayers from './json/avg_Feminine_Reptilian.json';\r\nimport avgMasculineReptilianLayers from './json/avg_Masculine_Reptilian.json';\r\n\r\n/**\r\n * @description\r\n * The contents of each image \"layer\" that can be overlayed on top of the character image. This contains info\r\n * about what the layer is called (e.g. 'clothing', or 'hats'), what the z-layer info is for the layer, and a\r\n * list of possible image sources that are contained in the image layer.\r\n * @param key The name of the layer.\r\n * @param layerIndex The z-index of the layer. The higher the number, the more 'in front' that the layer is.\r\n * @param images A list of possible image sources that are drawn in this layer. Only one of these can be drawn\r\n * from this list at a time (this is intentional).\r\n */\r\nexport type ImageLayer = {\r\n    key: string;\r\n    layerIndex: number;\r\n    images: ImageDescriptor[];\r\n}\r\n\r\nexport type ImageDescriptor = {\r\n    imageSource: string;\r\n    tags: string[];\r\n}\r\n\r\n/**\r\n * @description\r\n * A mapping from the body that will be displayed to the list of layers associated with that body.\r\n */\r\nexport type BodyMap = {\r\n    name: string;\r\n    description: string;\r\n    imageSource: string;\r\n    layers: ImageLayer[];\r\n}\r\n\r\n/**\r\n * @remarks The layer index for every layer starts at 1. This is because '0' is reserved for the base\r\n * body. Setting this to '0' on a layer will remove the base body.\r\n */\r\nexport var bodyMaps: BodyMap[] = new Array(0);\r\nbodyMaps.push({\r\n    name: 'Average-Sized, Masculine',\r\n    description: \"Masculine body type! Of average size; good for humans, elves, orcs, and tieflings.\",\r\n    imageSource: \"./images/Examples/Avg_Male.png\",\r\n    layers: avgMasculineLayers\r\n}, {\r\n    name: 'Average-Sized, Feminine',\r\n    description: \"Feminine body type! Of average size; good for humans, elves, orcs, and tieflings.\",\r\n    imageSource: \"./images/Examples/Avg_Female.png\",\r\n    layers: avgFeminineLayers\r\n}, {\r\n    name: 'Dragonborn, Masculine',\r\n    description: \"Dragonborn! Cold-blooded and rainbow-colored! These are masculine-bodied dragonborn.\",\r\n    imageSource: \"./images/Examples/Reptilian_Male.png\",\r\n    layers: avgMasculineReptilianLayers\r\n}, {\r\n    name: 'Dragonborn, Feminine',\r\n    description: \"Dragonborn! Cold-blooded and rainbow-colored! These are feminine-bodied dragonborn.\",\r\n    imageSource: \"./images/Examples/Reptilian_Female.png\",\r\n    layers: avgFeminineReptilianLayers\r\n}\r\n);\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { BodyMap } from './BodyMap';\r\nimport { Carousel } from 'react-bootstrap';\r\n\r\ninterface IBodySelector {\r\n    onClick: Function;\r\n    bodyMap: BodyMap;\r\n}\r\n\r\nexport function BodySelector(props: IBodySelector) {\r\n    return (\r\n        <Button\r\n            className='bodySelector'\r\n            variant='dark'\r\n            style={{\r\n                borderColor: 'rgba(255, 255, 255, 0.05)',\r\n                boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n                width: '100%'\r\n            }}\r\n            onClick={() => props.onClick(props.bodyMap)}>\r\n            <img src={props.bodyMap.imageSource} alt='body selection'/>\r\n            <Carousel.Caption>\r\n                <h3 className='body-option-title'>{props.bodyMap.name}</h3>\r\n                <p className='body-option-caption'>{props.bodyMap.description}</p>\r\n            </Carousel.Caption>\r\n        </Button>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\ninterface IPartSelector {\r\n    onClick: Function;\r\n    layerIndex: number;\r\n    imageSource: string;\r\n}\r\n\r\nexport default function PartSelector(props: IPartSelector) {\r\n    return (\r\n        <Button\r\n            className='part-selector-button'\r\n            variant='dark'\r\n            style={{\r\n                borderColor: 'rgba(255, 255, 255, 0.05)',\r\n                boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'\r\n            }}\r\n            onClick={() => props.onClick(props.layerIndex, props.imageSource)}>\r\n            <Image\r\n                className='partSelector'\r\n                src={props.imageSource}\r\n                rounded />\r\n        </Button>\r\n    )\r\n}","import React from 'react';\r\nimport { ImageLayer } from './BodyMap';\r\nimport PartSelector from './PartSelector';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Tabs from 'react-bootstrap/Tabs'\r\n\r\ninterface IPartAccordionProps {\r\n    layers: ImageLayer[];\r\n    onClick: Function;\r\n}\r\n\r\nexport class PartAccordion extends React.Component<IPartAccordionProps> {\r\n    renderPartsButtons(layer: ImageLayer) {\r\n        return layer.images.map((src) => {\r\n            return (\r\n                <PartSelector\r\n                    onClick={this.props.onClick}\r\n                    layerIndex={layer.layerIndex}\r\n                    imageSource={src.imageSource}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    renderPartCards() {\r\n        return this.props.layers.map((layer) => {\r\n            return (\r\n                <Card style={{ background: 'rgba(255, 255, 255, 0.07)' }} text=\"white\">\r\n                    <Accordion.Toggle as={Card.Header} eventKey={layer.layerIndex.toString()}\r\n                        style={{ cursor: \"pointer\" }}>\r\n                        {layer.key}\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey={layer.layerIndex.toString()}>\r\n                        <Card.Body>\r\n                            {this.renderPartsButtons(layer)}\r\n                        </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n            );\r\n        });\r\n    }\r\n\r\n    renderPartTabs() {\r\n        return this.props.layers.map((layer) => {\r\n            return (\r\n                <Tab eventKey={layer.layerIndex.toString()} title={layer.key}>\r\n                    <div className='part-button-tab'>\r\n                        {this.renderPartsButtons(layer)}\r\n                    </div>\r\n                </Tab>\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Tabs defaultActiveKey=\"Body\" id=\"part-accordion-tabs\">\r\n                    {this.renderPartTabs()}\r\n                </Tabs>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// https://blog.cloudboost.io/using-html5-canvas-with-react-ff7d93f5dc76\r\nimport React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Color, ColorResult, CirclePicker } from 'react-color';\r\nimport { Container } from 'react-bootstrap';\r\nimport { Row } from 'react-bootstrap';\r\n\r\n/**\r\n * @description An interface used to describe the elements provided to this class at creation.\r\n */\r\ninterface ICanvasProps {\r\n    /**\r\n     * @description A list of images to render. This may be updated at-will by the parent, and this element\r\n     * will render those new images.\r\n     */\r\n    imagesToRender: Array<string>;\r\n\r\n    /**\r\n     * @description A callback to this class' \"DOWNLOAD\" button. Owned by the parent.\r\n     */\r\n    onClickDownload: Function;\r\n}\r\n\r\n/**\r\n * @description An interface used to describe the elements maintained by this class' internal state.\r\n */\r\ninterface ICanvasState {\r\n    /**\r\n     * @description The color of the outline border for the character's profile. This will be included when\r\n     * saving the image.\r\n     */\r\n    outlineColor: Color;\r\n}\r\n\r\n/**\r\n * @description A class used to display a character's profile on a canvas element. Also provides a border,\r\n * tools to change the color of the border, and a means to download the image itself.\r\n */\r\nexport class CharacterCanvas extends React.Component<ICanvasProps, ICanvasState> {\r\n    /**\r\n     * @description The height of the canvas' used by this object.\r\n     */\r\n    canvasHeight: number = 256;\r\n\r\n    /**\r\n     * @description The width of the canvas' used by this object.\r\n     */\r\n    canvasWidth: number = 256;\r\n\r\n    /**\r\n     * @description A list of all possible outline color that may be used by the canvas.\r\n     */\r\n    outlineColors: string[] = [\"#131313\", \"#ffffff\", \"#571c27\" ];\r\n\r\n    /**\r\n     * @description The constructor for this object.\r\n     * @param props A list of properties provided by the parent object.\r\n     */\r\n    constructor(props: Readonly<ICanvasProps>) {\r\n        super(props);\r\n        this.state = {\r\n            outlineColor: \"#ffffff\"\r\n        };\r\n    }\r\n\r\n    /**\r\n     * A handler for when this component has been fully loaded. Establishes some basic settings about how to\r\n     * handle the image.\r\n     */\r\n    componentDidMount() {\r\n        const canvas = this.refs.canvas as HTMLCanvasElement;\r\n        const borderCanvas = this.refs.borderCanvas as HTMLCanvasElement;\r\n\r\n        canvas.style.display = \"none\";\r\n        \r\n        const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n        ctx.imageSmoothingEnabled = false;\r\n\r\n        const borderCtx = borderCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n        borderCtx.imageSmoothingEnabled = false;\r\n    }\r\n\r\n    /**\r\n     * @description A handler for a change on an outline color.\r\n     */\r\n    handleOutlineColorChange = (color: ColorResult) => {\r\n        this.setState({\r\n            outlineColor: color.hex\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description A handler for when the component itself updates; either the props or the state of this\r\n     * object. Updates the character display.\r\n     * @param prevProps \r\n     */\r\n    componentDidUpdate(prevProps: ICanvasProps)\r\n    {\r\n        const imagesWidth = this.canvasWidth;\r\n        const imagesHeight = this.canvasHeight;\r\n\r\n        // https://stackoverflow.com/questions/34534549/how-do-you-deal-with-html5s-canvas-image-load-asynchrony\r\n        var loadedImages: Array<HTMLImageElement> = new Array<HTMLImageElement>();\r\n\r\n        /**\r\n         * Provides a function to be used when loading each of the images that will be drawn on the character.\r\n         * @param loadedImages A list of loaded images to maintain outside of this function. This needs to be\r\n         * accessible from where the promise list is being run.\r\n         * @param index The index of the array @see loadedImages that the result of the promise will end up\r\n         * in.\r\n         * @param imgSrc The string/html source for the image to be rendered.\r\n         * @param width The width of the image to be rendered.\r\n         * @param height The height of the image to be rendered.\r\n         */\r\n        var renderImagesFn = function(\r\n                loadedImages: Array<HTMLImageElement>,\r\n                index: number,\r\n                imgSrc: string,\r\n                width: number,\r\n                height: number) {\r\n            return new Promise<void>(resolve => {\r\n                var partImg = new Image(width, height);\r\n                \r\n                partImg.onload = function() {\r\n                    loadedImages[index] = partImg;\r\n                    resolve();\r\n                };\r\n\r\n                partImg.src = imgSrc;\r\n            })\r\n        };\r\n\r\n        // Take the list of images that we should render, and ensure that each and every one of them is A:\r\n        // rendered, and B: exists in a separate loadedImages array for us to draw next.\r\n        var promiseArray = this.props.imagesToRender.map(\r\n            (image, index) => renderImagesFn(loadedImages, index, image, this.canvasWidth, this.canvasHeight));\r\n\r\n        // Ensure that all of the promises have been met, then call the giant handleImagesLoaded() function to\r\n        // draw the images and their border.\r\n        Promise.all(promiseArray).then(handleImagesLoaded);\r\n\r\n        const borderColor= this.state.outlineColor as Color;\r\n        const charCanvas = this.refs.canvas as HTMLCanvasElement;\r\n        const borderCanvas = this.refs.borderCanvas as HTMLCanvasElement;\r\n\r\n        /**\r\n         * @description A function used to handle the final images loaded event. Draws each image in-order,\r\n         * and renders a border around the final image.\r\n         */\r\n        function handleImagesLoaded()\r\n        {\r\n            const charCtx = charCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n            charCtx.clearRect(0, 0, charCanvas.width, charCanvas.height);\r\n\r\n            // Draw the images in-order.\r\n            loadedImages.forEach(img => {\r\n                charCtx.drawImage(img, 0, 0, img.width, img.height);\r\n            });\r\n\r\n            /*\r\n             * Get a copy of the first canvas element. The original canvas element is hidden, but we use it\r\n             * to create a finalized version of the character image so that we have something to draw a border\r\n             * around. Otherwise, we're drawing a border around a bunch of tiny elements, which causes a\r\n             * bunch of tiny, overlapping borders.\r\n             */\r\n            var charImgSrc = charCanvas.toDataURL() as string;\r\n            var borderImg = new Image(imagesWidth, imagesHeight);\r\n            borderImg.src = charImgSrc;\r\n            \r\n            /**\r\n             * Handles the border image's onload event. This causes the image in the final canvas element, the\r\n             * canvas that draws the image and its border, to be rendered.\r\n             */\r\n            borderImg.onload = () => {\r\n                const borderCtx = borderCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n                borderCtx.clearRect(0, 0, borderCanvas.width, borderCanvas.height);\r\n                \r\n                drawImageBorder(borderCanvas, borderImg, borderColor.toString());\r\n\r\n                /**\r\n                 * @description Draws a border around an image with the specified elements, using the\r\n                 * specified image.\r\n                 * @param borderCanvas The canvas that will contain the final border and the final image. This\r\n                 * gets the border drawn to it.\r\n                 * @param img The image to use as a framework for the border.\r\n                 * @param borderStyle The styling to apply to the border image, when drawn.\r\n                 * @remarks https://stackoverflow.com/questions/28207232/draw-border-around-nontransparent-part-of-image-on-canvas\r\n                 * Something to note about this algorith; it can only draw borders of a thickness equal to the\r\n                 * smallest outlying pixel. So, our resolution for pixels on this canvas is '4', which means\r\n                 * that the thickness must be 4, or else we end up with weird stamping artifacts.\r\n                 */\r\n                function drawImageBorder(\r\n                    borderCanvas: HTMLCanvasElement,\r\n                    img: HTMLImageElement,\r\n                    borderStyle: string\r\n                    ) {\r\n                    const borderCtx = borderCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n                    /*\r\n                     * An array of integers used to offset and effectively \"stamp\" the image repeatedly. This\r\n                     * entire algorithm just takes the original image, stamps it around the base image 9\r\n                     * times, and then uses the source-in global composite operation to paint what's been\r\n                     * drawn according to the style used.\r\n                     * \r\n                     * Note that the numbers stored here are effectively pairs of coordinates to offset the\r\n                     * image stamping by, scaled by the desired thickness of the border.\r\n                     * https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Compositing\r\n                     */\r\n                    var dArr = [\r\n                        -1, -1,\r\n                         0, -1,\r\n                         1, -1,\r\n                        -1,  0,\r\n                         1,  0,\r\n                        -1,  1,\r\n                         0,  1,\r\n                         1,  1];\r\n\r\n                        // Thickness scale\r\n                        var s: number = 4;\r\n\r\n                        // Iterator.\r\n                        var i: number = 0;\r\n\r\n                    // draw images at offsets from the array scaled by s\r\n                    for (; i < dArr.length; i += 2)\r\n                    {\r\n                        borderCtx.drawImage(img, dArr[i] * s, dArr[i + 1] * s);\r\n                    }\r\n\r\n                    // Fill with color\r\n                    borderCtx.globalCompositeOperation = \"source-in\";\r\n                    borderCtx.fillStyle = borderStyle;\r\n                    borderCtx.fillRect(0, 0, borderCanvas.width, borderCanvas.height);\r\n                }\r\n\r\n                borderCtx.globalCompositeOperation = \"source-over\";\r\n                borderCtx.drawImage(borderImg, 0, 0, borderImg.width, borderImg.height);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Renders this object.\r\n     */\r\n    render() {\r\n        var outlineColor: string = this.state.outlineColor.toString();\r\n\r\n        return (\r\n            <div>\r\n                <canvas className=\"character-canvas\" id=\"characterCanvas\" ref=\"canvas\" width={this.canvasWidth} height={this.canvasHeight} />\r\n                <canvas style={{ backgroundImage: \"linear-gradient(#131313, #ffffff)\" }} id=\"borderCanvas\" ref=\"borderCanvas\" width={this.canvasWidth} height={this.canvasHeight} />\r\n                <Container fluid={true} className='d-flex justify-content-center'>\r\n                    <Row>\r\n                        <CirclePicker\r\n                            onChangeComplete={this.handleOutlineColorChange}\r\n                            color={outlineColor}\r\n                            colors={this.outlineColors}\r\n                        />\r\n                    </Row>\r\n                </Container>\r\n                <Button\r\n                    variant=\"primary\"\r\n                    className=\"downloadButton\"\r\n                    onClick={() => this.props.onClickDownload(document.getElementById('borderCanvas'))}>\r\n                    <h4>&gt;&gt; DOWNLOAD &lt;&lt;</h4>\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}","import './CharacterCreator.css';\r\nimport { bodyMaps, BodyMap, ImageLayer } from './BodyMap';\r\n\r\nimport React from 'react';\r\n\r\nimport {BodySelector} from './BodySelector';\r\nimport {PartAccordion} from './PartAccordion';\r\nimport {CharacterCanvas} from './CharacterCanvas';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Carousel } from 'react-bootstrap';\r\n\r\n/**\r\n * @description\r\n * The interface for props passed to this object. This class in particular takes no props; it is effectively\r\n * the app itself.\r\n */\r\nexport interface ICharacterCreatorProps {\r\n};\r\n\r\n/**\r\n * @description\r\n * The interface for the internal state maintained by this object.\r\n * @param canvasImages The list of image sources, represented as strings, that will be rendered using the\r\n * Canvas class.\r\n * @param partLayers A list of image layers. This contains information about all of the possible layers that\r\n * can be drawn to the currently-selected body type. This contains information about what each layer is, how\r\n * that layer is drawn, and what the possible images are in that layer.\r\n */\r\ninterface ICharacterCreatorState {\r\n    canvasImages: Array<string>,\r\n    partLayers: ImageLayer[],\r\n    carouselIndex: any,\r\n    carouselDirection: \"prev\" | \"next\"\r\n};\r\n\r\n/**\r\n * The main entry point for this application. Provides all of the buttons and fun stuff needed to create a\r\n * character image on a canvas element.\r\n */\r\nexport class CharacterCreator extends React.Component<ICharacterCreatorProps, ICharacterCreatorState> {\r\n    constructor(props: ICharacterCreatorProps) {\r\n        super(props);\r\n        this.state = {\r\n            // Just fill the canvas images with nothing. We'll re-define it when we add to it.\r\n            canvasImages: new Array<string>(),\r\n            partLayers: Array(0),\r\n            carouselIndex: 0,\r\n            carouselDirection: \"next\"\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description\r\n     * Used to download the main character image from the canvas. This is a callback that is passed down to\r\n     * the canvas element.\r\n     * @param canvas The canvas html element from the Canvas character creator class.\r\n     */\r\n    downloadImage(canvas: HTMLCanvasElement)\r\n    {\r\n        const downloadUrl = canvas.toDataURL('image/png');\r\n        const link = document.createElement('a');\r\n\r\n        link.download = 'characterImage.png';\r\n        link.href = downloadUrl;\r\n        link.click();\r\n    }\r\n\r\n    /**\r\n     * A handler for a part selector. Replaces the image at the specified index with a new image.\r\n     * @param layerIndex The index of the layer. This is the z-layer, effectively. The higher the number, the\r\n     * more layers that it draws over.\r\n     * @param imageSource The image source. This is what gets drawn.\r\n     */\r\n    handlePartSelection(layerIndex: number, imageSource: string) {\r\n        const newCanvasImages: Array<string> = this.state.canvasImages;\r\n\r\n        // Javascript doesn't have arrays of fixed length, so this is safe? Still getting used to this.\r\n        newCanvasImages[layerIndex] = imageSource;\r\n\r\n        this.setState({\r\n            canvasImages: newCanvasImages\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Handles the prop-pass from the body-type selector.\r\n     * @param bodyType The type of body that this character creator should acknowledge.\r\n     */\r\n    handleBodySelection(bodyMap: BodyMap) {\r\n        const newImagesToRender: Array<string> = new Array<string>(0);\r\n\r\n        bodyMap.layers.forEach(layer => {\r\n            layer.images.forEach(image => {\r\n                if (image.imageSource.includes('default.png'))\r\n                {\r\n                    newImagesToRender[layer.layerIndex] = image.imageSource;\r\n                }\r\n                // image.tags.forEach(tag => {\r\n                //     if (tag === 'default') {\r\n                //         // Javascript doesn't have arrays of fixed length, so this is safe? Still getting used\r\n                //         // to this.\r\n                //         newImagesToRender[layer.layerIndex] = image.imageSource;\r\n                //     }\r\n                // });\r\n            });\r\n        });\r\n\r\n        this.setState({\r\n            canvasImages: newImagesToRender,\r\n            partLayers: bodyMap.layers\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description\r\n     * Renders a series of body selectors for the user to pick from. These body selectors will modify the list\r\n     * of available accessories (since a tiny hat looks silly on a giant person . . . or does it?). Needs to\r\n     * look at the BodyMap.tsx file to understand what will be populated.\r\n     */\r\n    renderBodySelection() {\r\n        return bodyMaps.map((bodyMap) => {\r\n            return (\r\n                <Carousel.Item>\r\n                    <BodySelector\r\n                        onClick={(body: BodyMap) => this.handleBodySelection(body)}\r\n                        bodyMap={bodyMap}\r\n                    />\r\n                </Carousel.Item>\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description\r\n     * Handles a carousel selection event. Is used to ensure that the carousel cycles left when the left\r\n     * button is pressed; and the same for the right button.\r\n     * @param eventKey The event key. This is the index that the carousel is being cycled to.\r\n     * @param direction The direction that the carousel is being cycled in.\r\n     */\r\n    handleCarouselSelect(eventKey: any, direction: \"prev\" | \"next\") {\r\n        this.setState({\r\n            carouselIndex: eventKey,\r\n            carouselDirection: direction\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Renders this object.\r\n     */\r\n    render() {\r\n        const canvasImagesToRender = this.state.canvasImages;\r\n        const currentBodyMap = this.state.partLayers;\r\n\r\n        return (\r\n            <div className=\"CharacterCreator\">\r\n                <h1>Character Creator</h1>\r\n                <Container fluid={true}>\r\n                    <Row>\r\n                        <Col lg={1} />\r\n                        <Col lg={4}>\r\n                            <div className='body-creation'>\r\n                                <div className='body-selector'>\r\n                                    <h2>Body Selection</h2>\r\n                                    <p className=\"italics\">(Each body type uses different accessories and will reset your character design)</p>\r\n                                    <Carousel\r\n                                        interval={null}\r\n                                        indicators={false}\r\n                                        onSelect={this.handleCarouselSelect.bind(this)}>\r\n                                        {this.renderBodySelection()}\r\n                                    </Carousel>\r\n                                    </div>\r\n                                    <div className='body-canvas'>\r\n                                        <CharacterCanvas\r\n                                            imagesToRender={canvasImagesToRender}\r\n                                            onClickDownload={(canvas: HTMLCanvasElement) => this.downloadImage(canvas)}\r\n                                        />\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                        <Col lg={6}>\r\n                            <div className='acc-selector'>\r\n                                <h2>Accessory Selection</h2>\r\n                                <p className=\"italics\">(You need to select a body first if this is empty)</p>\r\n                                <PartAccordion\r\n                                    layers={currentBodyMap}\r\n                                    onClick={(layerName: number, imageSource: string) => this.handlePartSelection(layerName, imageSource)}\r\n                                />\r\n                            </div>\r\n                        </Col>\r\n                        <Col lg={1} />\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CharacterCreator;\r\n","import React from 'react';\r\nimport { IItem } from '../Interfaces/IItem';\r\n\r\nexport abstract class Item implements IItem {\r\n    RenderItemDescription(): JSX.Element {\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{\r\n                    }}>\r\n                    <h5 className=\"item-description-title\">Details</h5>\r\n                    <p style={{\r\n                        padding: `${this.paragraphMargins}`\r\n                    }}>\r\n                        {this.description} {this.details}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    key: string = \"\";\r\n    title: string = \"\";\r\n    description: string = \"\";\r\n    details: string = \"\";\r\n    iconSource: string = \"\";\r\n    source: import(\"../Types/TSourceType\").TSourceType = \"Homebrew\";\r\n    itemCost: number = 0;\r\n    requiresAttunement: boolean = false;\r\n    type: import(\"../Types/TItemType\").TItemType = \"Wondrous\";\r\n\r\n    protected readonly paragraphMargins: string = \"0 15px 0 15px\";\r\n    protected readonly titleMargins: string = \"15px 0 0 0\";\r\n}\r\n","import React from 'react';\r\nimport { IItemJson } from '../Interfaces/IItem';\r\nimport { Item } from './Item';\r\nimport { TSourceType } from \"../Types/TSourceType\";\r\nimport { TItemType } from \"../Types/TItemType\";\r\nimport { TAttack } from \"../Types/TAttack\";\r\nimport { TWeaponProperties } from \"../Types/TWeaponProperties\";\r\n\r\nexport interface IItemWeaponJson extends IItemJson {\r\n    shortRange: number;\r\n    longRange: number;\r\n    properties: TWeaponProperties[];\r\n\r\n    /**\r\n     * @description The mapping here is 1 attack to a series of dice rolls that represent that attack.\r\n     * The idea is that multiple damage types necessitate different rolls or modifiers. Each attack is\r\n     * indexed by a unique name.\r\n     */\r\n    attacks: { [index: string]: TAttack[] };\r\n}\r\n\r\nexport class ItemWeapon extends Item implements IItemWeaponJson {\r\n    public readonly key: string = \"\";\r\n    public title: string = \"\";\r\n    public description: string = \"\";\r\n    public details: string = \"\";\r\n    public iconSource: string = \"\";\r\n    public source: TSourceType = \"Homebrew\";\r\n    public itemCost: number = 0;\r\n    public requiresAttunement: boolean = false;\r\n    public readonly type: TItemType = \"Weapon\";\r\n    \r\n    public shortRange: number = 20;\r\n    public longRange: number = 60;\r\n    public properties: TWeaponProperties[] = [];\r\n    \r\n    /**\r\n     * @description The mapping here is 1 attack to a series of dice rolls that represent that attack.\r\n     * The idea is that multiple damage types necessitate different rolls or modifiers. Each attack is\r\n     * indexed by a unique name.\r\n     */\r\n    public attacks: { [index: string]: TAttack[] } = {};\r\n\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    // http://choly.ca/post/typescript-json/\r\n    static fromJson(json: IItemWeaponJson): ItemWeapon {\r\n        let item = new ItemWeapon();\r\n        return Object.assign(item, json, {\r\n        });\r\n    }\r\n\r\n    RenderItemDescription(): JSX.Element {\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{\r\n                    }}>\r\n                    <h5 className=\"item-description-title\">Details</h5>\r\n                    <p style ={{\r\n                        padding: `${this.paragraphMargins}`\r\n                    }}>\r\n                        {this.description} {this.details}\r\n                    </p>\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        paddingTop: `${this.titleMargins}`\r\n                    }}>\r\n                    <h5 className=\"item-description-title\">Attacks</h5>\r\n                    <p style={{\r\n                        padding: this.paragraphMargins\r\n                    }}>\r\n                        {this.GetAttackDetails()}\r\n                    </p>\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        paddingTop: `${this.titleMargins}`\r\n                    }}>\r\n                    <h5 className=\"item-description-title\">Properties</h5>\r\n                    <p style={{\r\n                        padding: this.paragraphMargins\r\n                    }}>\r\n                        {this.GetProperties()}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private GetAttackDetails(): JSX.Element {\r\n        var attackDetails: JSX.Element[] = Object.entries(this.attacks).map(element => {\r\n            let name: string = element[0];\r\n            let damageRolls: TAttack[] = element[1];\r\n            let rolls: JSX.Element[] = [];\r\n            \r\n            damageRolls.forEach(roll => {\r\n                if (rolls.length > 0) {\r\n                    rolls.push(\r\n                        <span> and </span>\r\n                    );\r\n                }\r\n                rolls.push (\r\n                    <span className={`text-color-${roll.damageType.toLowerCase()}`}>\r\n                        <span>{`${roll.diceCount}d${roll.diceSize}${roll.modifier > 0 ? `+${roll.modifier}` : ''}`}</span>\r\n                        <span> {roll.damageType} damage</span>\r\n                    </span>\r\n                );\r\n            });\r\n\r\n            return (\r\n                <p>\r\n                    <span style={{ fontWeight: \"bolder\" }}>{name}: </span>{rolls}\r\n                </p>\r\n            );\r\n        })\r\n\r\n        return (\r\n            <div>\r\n                {attackDetails}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private GetProperties(): JSX.Element {\r\n        var propertyDetails: JSX.Element[] = this.properties.map(property => {\r\n            return (\r\n                <div>\r\n                    {property}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {propertyDetails}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport function IItemIsItemWeapon(item: IItemJson): item is ItemWeapon {\r\n    var isType: boolean = true;\r\n\r\n    isType = isType && (item as ItemWeapon).type === \"Weapon\";\r\n    isType = isType && (item as ItemWeapon).attacks != undefined;\r\n\r\n    return isType;\r\n}\r\n","import React from 'react';\r\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\r\n\r\ninterface ICardIconProps {\r\n    iconSource: string;\r\n    tooltipText: string;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport function CardIcon(props: ICardIconProps) {\r\n    return (\r\n        <OverlayTrigger\r\n            placement='top'\r\n            delay={{ show: 0, hide: 400 }}\r\n            overlay={\r\n                <Tooltip id=\"card-tooltip\">\r\n                    {props.tooltipText}\r\n                </Tooltip>\r\n            }>\r\n            <img\r\n                src={props.iconSource}\r\n                style={{\r\n                    width: `${props.width}px`,\r\n                    height: `${props.height}px`,\r\n                }} />\r\n        </OverlayTrigger>\r\n    )\r\n}","import React from 'react';\r\nimport { IItemJson } from '../Interfaces/IItem';\r\nimport { Item } from './Item';\r\nimport { TSourceType } from \"../Types/TSourceType\";\r\nimport { TItemType } from \"../Types/TItemType\";\r\n\r\nexport interface IItemPotionJson extends IItemJson {\r\n    hasWithdrawalEffect: boolean;\r\n}\r\n\r\nexport class ItemPotion extends Item implements IItemPotionJson {\r\n    public readonly key: string = \"\";\r\n    public title: string = \"\";\r\n    public description: string = \"\";\r\n    public details: string = \"\";\r\n    public iconSource: string = \"\";\r\n    public source: TSourceType = \"Homebrew\";\r\n    public itemCost: number = 0;\r\n    public requiresAttunement: boolean = false;\r\n    public readonly type: TItemType = \"Potion\";\r\n\r\n    public hasWithdrawalEffect: boolean = false;\r\n    \r\n    static fromJson(json: IItemPotionJson): ItemPotion {\r\n        let item = new ItemPotion();\r\n        return Object.assign(item, json, {\r\n        });\r\n    }\r\n\r\n    RenderItemDescription(): JSX.Element {\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{\r\n                    }}>\r\n                    <h5 className=\"item-description-title\">Details</h5>\r\n                    <p style={{\r\n                        padding: `${this.paragraphMargins}`\r\n                    }}>\r\n                        {this.description} {this.details} {this.GetWithdrawalEffectClause()}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    GetWithdrawalEffectClause(): JSX.Element {\r\n        var clause: JSX.Element;\r\n        if (this.hasWithdrawalEffect) {\r\n            clause = (\r\n                <span>\r\n                    <span>Using this potion will result in a </span>\r\n                    <span className=\"text-color-withdrawal\">withdrawal effect</span>\r\n                    <span>.</span>\r\n                </span>\r\n            )\r\n        }\r\n        else {\r\n            clause = (\r\n                <span></span>\r\n            )\r\n        }\r\n\r\n        return clause;\r\n    }\r\n}\r\n\r\nexport function IItemIsItemPotion(item: IItemJson): item is ItemPotion {\r\n    var isType: boolean = true;\r\n\r\n    isType = isType && (item as ItemPotion).type === \"Potion\";\r\n\r\n    return isType;\r\n}\r\n","import React from 'react';\r\nimport { IItemJson, IItem } from '../../Interfaces/IItem';\r\nimport { IItemIsItemWeapon } from '../../Classes/ItemWeapon';\r\nimport { TAttack } from '../../Types/TAttack';\r\nimport { Button } from 'react-bootstrap';\r\nimport { CardIcon } from './CardIcon';\r\nimport { IItemIsItemPotion } from '../../Classes/ItemPotion';\r\n\r\nexport type TAttackClick = (attackName: string, attackRolls: TAttack[]) => void;\r\nexport type TItemClick = (itemJson: IItem) => void;\r\n\r\ninterface IItemCardProps {\r\n    itemDetails: IItem;\r\n    onItemClick: TItemClick;\r\n    onAttackClick: TAttackClick;\r\n}\r\n\r\ninterface IItemCardState {\r\n    titleFontSize: number\r\n}\r\n\r\nexport class ItemCard extends React.Component<IItemCardProps, IItemCardState> {\r\n    readonly cardWidth: number = 194;\r\n    readonly cardHeight: number = 256;\r\n    readonly cardDefaultMargin: number = 6;\r\n    \r\n    // DO NOT CHANGE. The card's icon size is 128. This gives us a scaling raito for everything else.\r\n    readonly cardRatio: number = this.cardHeight / 128;\r\n    \r\n    // Item area measurements.\r\n    readonly itemAreaDefaultOffset: number = 17;\r\n    readonly itemAreaDefaultSize: number = 64;\r\n    \r\n    // Title measurements.\r\n    readonly titleDefaultTopOffset: number = 6;\r\n    readonly titleDefaultFontSize: number = 12;\r\n    readonly titleWidth: number = this.cardWidth * 0.65;\r\n    readonly titleDefaultLeftOffset: number = 1;\r\n    \r\n    // Item description measurements.\r\n    readonly descAreaDefaultOffset: number = 82;\r\n    readonly descAreaDefaultSize: number = 44;\r\n\r\n    // Attack Icon measurements.\r\n    readonly attackIconDefaultSize: number = 16;\r\n\r\n    // Icon measurements.\r\n    readonly iconDefaultSize: number = 16;\r\n    readonly iconDefaultLeftOffset: number = 81;\r\n    readonly iconDefaultTopOffset: number = 17;\r\n\r\n    // Coin measurements.\r\n    readonly coinDefaultSize: number = 16;\r\n    readonly coinDefaultLeftOffset: number = 1;\r\n    readonly coinDefaultTopOffset: number = 17;\r\n\r\n    constructor(props: IItemCardProps) {\r\n        super(props);\r\n        this.state = {\r\n            titleFontSize: this.titleDefaultFontSize\r\n        };\r\n    }\r\n\r\n    private GetCardBackSource() {\r\n        var source: string;\r\n        switch (this.props.itemDetails.type) {\r\n            case \"Weapon\":\r\n                source = \"./images/Item_Shop/ItemCards/CardForge.png\";\r\n                break;\r\n            case \"Potion\":\r\n                source = \"./images/Item_Shop/ItemCards/CardAlchemist.png\";\r\n                break;\r\n            default:\r\n                source = \"./images/Item_Shop/ItemCards/CardDungeon.png\";\r\n                break;\r\n        }\r\n\r\n        return source;\r\n    }\r\n\r\n    /**\r\n     * Gets any additional content that should appear on the card. Includes attack buttons, etc.\r\n     */\r\n    private GetAdditionalCardContent() {\r\n        var itemDetails: IItemJson = this.props.itemDetails;\r\n\r\n        // This uses a type guard to enforce that itemDetails must be a specific type.\r\n        // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n        if (IItemIsItemWeapon(itemDetails)) {\r\n            return Object.entries(itemDetails.attacks).flatMap(element => {\r\n                let name: string = element[0];\r\n                let damageRolls: TAttack[] = element[1];\r\n                let attackIndicators: JSX.Element[] = damageRolls.map(roll => {\r\n                    return (\r\n                        <div\r\n                            className={`card-attack-row badge badge-color-${roll.damageType.toLowerCase()}`}\r\n                            style={{\r\n                            width: \"100%\"\r\n                        }}>\r\n                            {`${roll.diceCount}d${roll.diceSize}${roll.modifier > 0 ? `+${roll.modifier}` : ''}`}\r\n                        </div>\r\n                    );\r\n                });\r\n\r\n                return (\r\n                    <Button\r\n                        className=\"card-attack-button\"\r\n                        variant=\"dark\"\r\n                        onClick={() => {this.props.onAttackClick(name, damageRolls)}}>\r\n                        <div className=\"card-attack-indicators\">\r\n                            {attackIndicators}\r\n                        </div>\r\n                        <div className=\"card-attack-name\">\r\n                            {name}\r\n                        </div>\r\n                    </Button>\r\n                )\r\n            });\r\n        }\r\n        else {\r\n            return (\r\n                <div style={{\r\n                    width:\"100%\"\r\n                }}>\r\n                    {this.props.itemDetails.description}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    private GetCardIcons(): JSX.Element[] {\r\n        var itemDetails: IItemJson = this.props.itemDetails;\r\n        var icons: JSX.Element[] = [];\r\n        var iconDimensions: number = this.iconDefaultSize * this.cardRatio;\r\n\r\n        if (itemDetails.requiresAttunement) {\r\n            icons.push(CardIcon({\r\n                iconSource: './images/Item_Shop/ItemCards/Icons/Attunement.png',\r\n                tooltipText: 'This item requires attunement.',\r\n                width: (iconDimensions),\r\n                height: (iconDimensions),\r\n            }));\r\n        }\r\n\r\n        if (IItemIsItemPotion(itemDetails) && itemDetails.hasWithdrawalEffect) {\r\n            icons.push(CardIcon({\r\n                iconSource: './images/Item_Shop/ItemCards/Icons/Withdrawal.png',\r\n                tooltipText: 'Using this potion will result in a withdrawal effect.',\r\n                width: (iconDimensions),\r\n                height: (iconDimensions),\r\n            }));\r\n        }\r\n        else if (IItemIsItemWeapon(itemDetails)) {\r\n            itemDetails.properties.forEach(property => {\r\n                switch (property) {\r\n                    case \"Ammunition\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Ammunition.png',\r\n                            tooltipText: 'This item uses ammunition for ranged attacks.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Finesse\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Finesse.png',\r\n                            tooltipText: 'This item requires finesse. Attacks and damage with this item may use STR or DEX.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Heavy\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Heavy.png',\r\n                            tooltipText: 'This item is abnormally heavy. Small creatures will have a difficult time using this item.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Improvised\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Improvised.png',\r\n                            tooltipText: 'This is an improvised weapon.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Light\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Light.png',\r\n                            tooltipText: 'This item is unusually light and may be used with another weapon.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Loading\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Loading.png',\r\n                            tooltipText: 'This item requires manually loading and is limited to one attack per action.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Reach\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Reach.png',\r\n                            tooltipText: 'This item has extended reach.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Silver\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Silver.png',\r\n                            tooltipText: 'This item has been plated in silver.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Special\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Special.png',\r\n                            tooltipText: 'This item has some special usage.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Thrown\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Thrown.png',\r\n                            tooltipText: 'This item may be thrown without reducing its damage.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"TwoHanded\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/TwoHanded.png',\r\n                            tooltipText: 'This item is unwieldy and requires two hands to utilize.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Versatile\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Versatile.png',\r\n                            tooltipText: 'This item is versatile and may be used with one or two hands.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n\r\n        return icons;\r\n    }\r\n\r\n    /**\r\n     * Handles when the component has mounted. This will cause the card to draw.\r\n     */\r\n    componentDidMount() {\r\n        var canvas = this.refs.cardCanvas as HTMLCanvasElement;\r\n        var ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n        ctx.imageSmoothingEnabled = false;\r\n\r\n        this.LoadCard();\r\n        this.DrawTitleText();\r\n    }\r\n\r\n    /**\r\n     * Loads all of the parts needed to render the card itself.\r\n     */\r\n    private LoadCard() {\r\n        var imagesToLoad: HTMLImageElement[] = [];\r\n\r\n        var borderImage = new Image();\r\n        borderImage.src = this.GetCardBackSource();\r\n        imagesToLoad.push(borderImage);\r\n\r\n        var iconImage = new Image();\r\n        iconImage.src = this.props.itemDetails.iconSource;\r\n        imagesToLoad.push(iconImage);\r\n\r\n        var loadedImagesPromises: Promise<void>[] = imagesToLoad.map(image => {\r\n            return new Promise<void>(resolve => {\r\n                image.onload = () => {\r\n                    console.log(`Loaded ${image.src}`)\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n\r\n        Promise.all(loadedImagesPromises).then(() => this.DrawCard(borderImage));\r\n    }\r\n\r\n    /**\r\n     * Performs the actual card drawing. Gets the canvas element and draws each component.\r\n     * @param borderImage The card background image that has been loaded and will be drawn.\r\n     */\r\n    private DrawCard(borderImage: HTMLImageElement) {\r\n        var canvas = this.refs.cardCanvas as HTMLCanvasElement;\r\n        var ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        ctx.drawImage(borderImage, 0, 0, this.cardWidth, this.cardHeight);\r\n    }\r\n\r\n    /**\r\n     * Draws the title text for this card.\r\n     */\r\n    private DrawTitleText() {\r\n        var titleText: string = this.props.itemDetails.title;\r\n        var testDiv: HTMLDivElement = document.createElement(\"div\") as HTMLDivElement;\r\n        testDiv.innerText = titleText;\r\n        \r\n        var cardDiv = this.refs.card as HTMLDivElement;\r\n        testDiv.style.visibility = 'hidden';\r\n        cardDiv.insertAdjacentElement('afterbegin', testDiv);\r\n        var textWidth: number = testDiv.offsetWidth;\r\n        cardDiv.removeChild(testDiv);\r\n\r\n        /*\r\n         * Once we have the width of the text, now we need to determine if the text element needs to be\r\n         * resized or not.\r\n         *\r\n         * We can determine the following:\r\n         * 1:   If the text size is <= the max size of the title element, then do not resize.\r\n         * 2:   If the text size is > the max size of the title element, adjust the text size by some\r\n         *      percentage.\r\n         * \r\n         * We can determine the percentage by asserting the following steps:\r\n         * 1:   Get a percentage that the text width exceeds the max width.\r\n         * 2:   Multiple that percentage by our standard font size.\r\n         */\r\n\r\n        var fontSize: number = this.titleDefaultFontSize;\r\n        var fontRatio: number = this.titleWidth / textWidth;\r\n        var newFontSize: number = Math.min(fontSize, fontRatio * fontSize);\r\n\r\n        this.setState({\r\n            titleFontSize: newFontSize\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Renders an instance of this object.\r\n     */\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"item-card\"\r\n                ref=\"card\"\r\n                style={{\r\n                    margin: `${this.cardDefaultMargin * this.cardRatio}px`\r\n                }}>\r\n                <Button\r\n                    variant=\"link\"\r\n                    className=\"card-details-button\"\r\n                    onClick={() => this.props.onItemClick(this.props.itemDetails)}\r\n                    style={{\r\n                        width: `${this.cardWidth}px`,\r\n                        height: `${this.cardHeight - (this.descAreaDefaultSize * this.cardRatio)}px`\r\n                    }}\r\n                />\r\n                <span\r\n                    ref=\"title\"\r\n                    className=\"card-title\"\r\n                    style={{\r\n                        fontSize: `${this.state.titleFontSize}px`,\r\n                        height: `${this.titleDefaultFontSize}px`,\r\n                        top: `${this.titleDefaultTopOffset * this.cardRatio}px`,\r\n                    }}>\r\n                    {this.props.itemDetails.title}\r\n                </span>\r\n                <div\r\n                    className=\"card-cost\"\r\n                    style={{\r\n                        top: `${this.coinDefaultTopOffset * this.cardRatio}px`,\r\n                        left: `${this.coinDefaultLeftOffset * this.cardRatio}px`,\r\n                    }}>\r\n                    <img\r\n                        style={{\r\n                            width: `${this.coinDefaultSize * this.cardRatio}px`,\r\n                            height: `${this.coinDefaultSize * this.cardRatio}px`,\r\n                        }}\r\n                        src=\"./images/Item_Shop/itemCoinStill.png\"\r\n                    />\r\n                </div>\r\n                <span\r\n                    className=\"card-cost-text\"\r\n                    style={{\r\n                        top: `${this.coinDefaultTopOffset * this.cardRatio + (this.coinDefaultSize * this.cardRatio * 0.25)}px`,\r\n                        left: `${this.coinDefaultLeftOffset * this.cardRatio}px`,\r\n                        width: `${this.coinDefaultSize * this.cardRatio}px`,\r\n                        height: `${this.coinDefaultSize * this.cardRatio}px`,\r\n                    }}\r\n                >\r\n                    {this.props.itemDetails.itemCost}\r\n                </span>\r\n                <div\r\n                    className=\"card-icons\"\r\n                    style={{\r\n                        top: `${this.iconDefaultTopOffset * this.cardRatio}px`,\r\n                        left: `${this.iconDefaultLeftOffset * this.cardRatio}px`,\r\n                        maxWidth: `${this.iconDefaultSize * this.cardRatio}px`,\r\n                        height: `${this.iconDefaultSize * this.cardRatio * 4}px`\r\n                    }}>\r\n                    {this.GetCardIcons()}\r\n                </div>\r\n                <div\r\n                    className=\"card-info\"\r\n                    style={{\r\n                        top: `${this.descAreaDefaultOffset * this.cardRatio}px`,\r\n                        maxHeight: `${this.descAreaDefaultSize * this.cardRatio}px`,\r\n                        minHeight: `${this.descAreaDefaultSize * this.cardRatio}px`,\r\n                    }}>\r\n                    {this.GetAdditionalCardContent()}\r\n                </div>\r\n                <img\r\n                    className=\"card-item-image\"\r\n                    src={this.props.itemDetails.iconSource}\r\n                    height={this.itemAreaDefaultSize * this.cardRatio}\r\n                    width={this.itemAreaDefaultSize * this.cardRatio}\r\n                    style={{\r\n                        top: `${this.itemAreaDefaultOffset * this.cardRatio}px`,\r\n                        left: `${this.itemAreaDefaultOffset * this.cardRatio}px`,\r\n                        height: `${this.itemAreaDefaultSize * this.cardRatio}px`,\r\n                        width: `${this.itemAreaDefaultSize * this.cardRatio}px`,\r\n                    }}\r\n                />\r\n                <canvas\r\n                    className=\"card-canvas\"\r\n                    ref=\"cardCanvas\"\r\n                    width={this.cardWidth}\r\n                    height={this.cardHeight}\r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { CarpetMap } from './CarpetMap';\r\nimport { ItemCard, TItemClick } from '../Common/ItemCard';\r\nimport { TAttack } from '../../Types/TAttack';\r\n\r\n/**\r\n * @description An interface used to represent the properties required to display this class.\r\n * @param itemDetails The list of items that will be represented on this carpet.\r\n * @param onItemClick The function that will be called-back to when an item is clicked on.\r\n * @param rugBorderSource The source image location for the rug border.\r\n */\r\ninterface IBazaarCarpetProps {\r\n    carpetMap: CarpetMap;\r\n    onItemClick: TItemClick;\r\n    onAttackClick: (attackName: string, attackRolls: TAttack[]) => void;\r\n}\r\n\r\ninterface IBazaarCarpetState {\r\n}\r\n\r\n\r\n\r\n/**\r\n * @description Returns an instance of this component, BazaarCarpet.\r\n * @param props The list of properties needed to render this item.\r\n */\r\nexport class BazaarCarpet extends React.Component<IBazaarCarpetProps, IBazaarCarpetState>\r\n{\r\n    /**\r\n     * @description Gets the shop items as ShopItem elements.\r\n     * @param itemDetails The list of item details to represent the items on this carpet.\r\n     * @param onItemClick The click event-handler for items.\r\n     * @see ShopItem\r\n     */\r\n    private getShopItems() {\r\n        return this.props.carpetMap.items.map((item) => {\r\n            return (\r\n                <ItemCard\r\n                    itemDetails={item}\r\n                    onItemClick={this.props.onItemClick}\r\n                    onAttackClick={this.props.onAttackClick}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className='shop-section'>\r\n                <h2 className='pixel-font' style={{ fontSize: 18 }}>{this.props.carpetMap.rugName}</h2>\r\n                <div\r\n                    className='shop-rug'\r\n                    style={{ borderImageSource: `${this.props.carpetMap.rugBorderSource}` }}>\r\n                    {this.getShopItems()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { IItemJson } from '../Interfaces/IItem';\r\nimport { Item } from './Item';\r\nimport { TSourceType } from \"../Types/TSourceType\";\r\nimport { TItemType } from \"../Types/TItemType\";\r\n\r\nexport interface IItemArmorJson extends IItemJson {\r\n    armorBonus: number;\r\n    addDex: boolean;\r\n    stealthDisadvantage: boolean;\r\n}\r\n\r\nexport class ItemArmor extends Item implements IItemArmorJson {\r\n    public readonly key: string = \"\";\r\n    public title: string = \"\";\r\n    public description: string = \"\";\r\n    public details: string = \"\";\r\n    public iconSource: string = \"\";\r\n    public source: TSourceType = \"Homebrew\";\r\n    public itemCost: number = 0;\r\n    public requiresAttunement: boolean = false;\r\n    public readonly type: TItemType = \"Armor\";\r\n\r\n    public armorBonus: number = 0;\r\n    public addDex: boolean = true;\r\n    public stealthDisadvantage: boolean = false;\r\n\r\n    static fromJson(json: IItemArmorJson): ItemArmor {\r\n        let item = new ItemArmor();\r\n        return Object.assign(item, json, {\r\n        });\r\n    }\r\n}\r\n\r\nexport function IItemIsItemArmor(item: IItemJson) : item is ItemArmor {\r\n    var isType: boolean = true;\r\n\r\n    isType = isType && (item as ItemArmor).type === \"Armor\";\r\n    isType = isType && (item as ItemArmor).addDex != undefined;\r\n    isType = isType && (item as ItemArmor).stealthDisadvantage != undefined;\r\n\r\n    return isType;\r\n}\r\n","import React from 'react';\r\nimport { IItemJson } from '../Interfaces/IItem';\r\nimport { Item } from './Item';\r\nimport { TSourceType } from \"../Types/TSourceType\";\r\nimport { TItemType } from \"../Types/TItemType\";\r\n\r\nexport interface IItemWondrousJson extends IItemJson {\r\n}\r\n\r\nexport class ItemWondrous extends Item implements IItemWondrousJson {\r\n    public readonly key: string = \"\";\r\n    public title: string = \"\";\r\n    public description: string = \"\";\r\n    public details: string = \"\";\r\n    public iconSource: string = \"\";\r\n    public source: TSourceType = \"Homebrew\";\r\n    public itemCost: number = 0;\r\n    public requiresAttunement: boolean = false;\r\n    public readonly type: TItemType = \"Wondrous\";\r\n\r\n    static fromJson(json: IItemWondrousJson): ItemWondrous {\r\n        let item = new ItemWondrous();\r\n        return Object.assign(item, json, {\r\n        });\r\n    }\r\n}\r\n\r\nexport function IItemIsItemWondrous(item: IItemJson): item is ItemWondrous {\r\n    var isType: boolean = true;\r\n\r\n    isType = isType && (item as ItemWondrous).type === \"Wondrous\";\r\n\r\n    return isType;\r\n}\r\n","import { ItemWeapon, IItemWeaponJson, IItemIsItemWeapon } from \"./ItemWeapon\";\r\nimport { ItemPotion, IItemPotionJson, IItemIsItemPotion } from './ItemPotion';\r\nimport { ItemArmor, IItemArmorJson, IItemIsItemArmor } from './ItemArmor';\r\nimport { ItemWondrous, IItemWondrousJson, IItemIsItemWondrous } from './ItemWondrous';\r\nimport { TItemType } from \"../Types/TItemType\";\r\nimport { IItemJson, IItem } from \"../Interfaces/IItem\";\r\n\r\n/**\r\n * @description A class used to fetch items based on a specific index and call.\r\n * \r\n * In future, recall that this link explains how to self-initialize:\r\n * https://basarat.gitbooks.io/typescript/docs/tips/staticConstructor.html\r\n */\r\nexport class ItemSource {\r\n    /**\r\n     * @description Finds the item under the specified index, and returns that item. If the item cannot be\r\n     * found, returns undefined instead. This function returns undefined such that a caller can determine how\r\n     * to handle the missing element, rather than throw an exception.\r\n     * @param index The index to search for the item.\r\n     * @param type The type of item to search for.\r\n     */\r\n    static GetItem(index: string, type: TItemType): IItem | undefined {\r\n        var item: IItemJson | undefined = undefined;\r\n        var listToSearch: IItemJson[] | undefined = undefined;\r\n        var constructedItem: IItem | undefined = undefined;\r\n\r\n        switch (type) {\r\n            case \"Weapon\":\r\n                listToSearch = ItemMap_Weapons;\r\n                break;\r\n            case \"Armor\":\r\n                listToSearch = ItemMap_Armor;\r\n                break;\r\n            case \"Potion\":\r\n                listToSearch = ItemMap_Potions;\r\n                break;\r\n            case \"Wondrous\":\r\n                listToSearch = ItemMap_Wondrous;\r\n                break;\r\n            default:\r\n                listToSearch = undefined;\r\n                break;\r\n        }\r\n        \r\n        if (listToSearch !== undefined) {\r\n            for (let i = 0; i < listToSearch.length; i++) {\r\n                let currentItem = listToSearch[i];\r\n                if (currentItem.key === index) {\r\n                    item = currentItem;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (item !== undefined) {\r\n            if (IItemIsItemWeapon(item)) {\r\n                constructedItem = ItemWeapon.fromJson(item)\r\n            }\r\n            else if (IItemIsItemArmor(item)) {\r\n                constructedItem = ItemArmor.fromJson(item);\r\n            }\r\n            else if (IItemIsItemPotion(item)) {\r\n                constructedItem = ItemPotion.fromJson(item);\r\n            }\r\n            else if (IItemIsItemWondrous(item)) {\r\n                constructedItem = ItemWondrous.fromJson(item);\r\n            }\r\n        }\r\n\r\n        return constructedItem;\r\n    }\r\n}\r\n\r\n/**\r\n * The purpose of the following classes and constants is to act as a proxy for a server. This will likely all\r\n * go away if/when this software switches to use AWS or something similar.\r\n */\r\nconst ItemMap_Weapons: Array<IItemWeaponJson> =\r\n[\r\n    {\r\n        key: 'Club',\r\n        title: 'Club',\r\n        description: 'A stout bludgeoning weapon made of oak.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/club.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            \"Light\"\r\n        ],\r\n        itemCost: 1,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Whack\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 4,\r\n                        modifier: 0,\r\n                        damageType: \"Bludgeoning\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Dagger',\r\n        title: 'Dagger',\r\n        description: 'A small piercing weapon.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/dagger.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            \"Light\",\r\n            \"Finesse\",\r\n            \"Thrown\"\r\n        ],\r\n        itemCost: 2,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Stab\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 4,\r\n                        modifier: 0,\r\n                        damageType: \"Piercing\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Greatclub',\r\n        title: 'Greatclub',\r\n        description: 'A massive bludgeoning weapon.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/greatclub.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            \"TwoHanded\"\r\n        ],\r\n        itemCost: 1,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Smash\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 8,\r\n                        modifier: 0,\r\n                        damageType: \"Bludgeoning\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Handaxe',\r\n        title: 'Handaxe',\r\n        description: 'A small throwing axe.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/handaxe.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            \"Light\",\r\n            \"Thrown\"\r\n        ],\r\n        itemCost: 5,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Hack\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 6,\r\n                        modifier: 0,\r\n                        damageType: \"Slashing\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Javelin',\r\n        title: 'Javelin',\r\n        description: 'A long, pointed, throwing weapon.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/javelin.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        shortRange: 30,\r\n        longRange: 120,\r\n        properties: [\r\n            \"Thrown\"\r\n        ],\r\n        itemCost: 5,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Poke\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 6,\r\n                        modifier: 0,\r\n                        damageType: \"Piercing\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'LightHammer',\r\n        title: 'Light Hammer',\r\n        description: 'A small bludgeoning weapon.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/light_hammer.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            \"Light\",\r\n            \"Thrown\"\r\n        ],\r\n        itemCost: 2,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Smack\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 4,\r\n                        modifier: 0,\r\n                        damageType: \"Bludgeoning\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Mace',\r\n        title: 'Mace',\r\n        description: 'A bludgeoning weapon.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/mace.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n        ],\r\n        itemCost: 5,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Smash\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 6,\r\n                        modifier: 0,\r\n                        damageType: \"Bludgeoning\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Quarterstaff',\r\n        title: 'Quarterstaff',\r\n        description: 'A long, bludgeoning weapon made of oak.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/quarterstaff.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            \"Versatile\"\r\n        ],\r\n        itemCost: 1,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Whap (1h)\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 6,\r\n                        modifier: 0,\r\n                        damageType: \"Bludgeoning\"\r\n                    }\r\n                ],\r\n            \"Whap (2h)\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 8,\r\n                        modifier: 0,\r\n                        damageType: \"Bludgeoning\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Sickle',\r\n        title: 'Sickle',\r\n        description: 'A curved weapon made of steel.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/sickle.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            \"Light\"\r\n        ],\r\n        itemCost: 1,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Slash\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 4,\r\n                        modifier: 0,\r\n                        damageType: \"Slashing\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Spear',\r\n        title: 'Spear',\r\n        description: 'A long, pointed weapon.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/spear.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            \"Thrown\",\r\n            \"Versatile\"\r\n        ],\r\n        itemCost: 1,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Stab (1h)\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 6,\r\n                        modifier: 0,\r\n                        damageType: \"Piercing\"\r\n                    }\r\n                ],\r\n            \"Stab (2h)\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 8,\r\n                        modifier: 0,\r\n                        damageType: \"Piercing\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Shortsword',\r\n        title: 'Shortsword',\r\n        description: 'A short, pointed weapon.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/shortsword.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            \"Finesse\",\r\n            \"Light\"\r\n        ],\r\n        itemCost: 10,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Stab\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 6,\r\n                        modifier: 0,\r\n                        damageType: \"Piercing\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'SnakeStaff',\r\n        title: 'Snake Staff',\r\n        description: 'The staff is wrapped by the likeness of a clay snake.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/Cleric Staff Snake Green.png',\r\n        source: \"Homebrew\",\r\n        requiresAttunement: false,\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            \"TwoHanded\"\r\n        ],\r\n        itemCost: 100,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Curse\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 4,\r\n                        modifier: 0,\r\n                        damageType: \"Bludgeoning\"\r\n                    },\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 4,\r\n                        modifier: 0,\r\n                        damageType: \"Poison\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Darts',\r\n        title: 'Darts',\r\n        description: 'A small thrown weapon. 20 darts line a leather pouch.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/dart.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            \"Finesse\",\r\n            \"Thrown\"\r\n        ],\r\n        itemCost: 1,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Throw\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 4,\r\n                        modifier: 0,\r\n                        damageType: \"Piercing\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'LightCrossbow',\r\n        title: 'Light Crossbow',\r\n        description: 'A light, mechanical device used for firing arrows across large distances.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/light_crossbow.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        shortRange: 80,\r\n        longRange: 230,\r\n        properties: [\r\n            \"Ammunition\",\r\n            \"Loading\",\r\n            \"TwoHanded\"\r\n        ],\r\n        itemCost: 25,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Fire\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 8,\r\n                        modifier: 0,\r\n                        damageType: \"Piercing\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Shortbow',\r\n        title: 'Shortbow',\r\n        description: 'A long, curved piece of wood held taut by a length of wire.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/shortbow.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        shortRange: 80,\r\n        longRange: 230,\r\n        properties: [\r\n            \"Ammunition\",\r\n            \"TwoHanded\"\r\n        ],\r\n        itemCost: 25,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Fire\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 6,\r\n                        modifier: 0,\r\n                        damageType: \"Piercing\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Sling',\r\n        title: 'Sling',\r\n        description: 'A small pocket held by two lengths of rope. When spun quickly, it can hurl projectiles at lethal speed.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/sling.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        shortRange: 30,\r\n        longRange: 120,\r\n        properties: [\r\n            \"Ammunition\"\r\n        ],\r\n        itemCost: 1,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Throw\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 4,\r\n                        modifier: 0,\r\n                        damageType: \"Bludgeoning\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Battleaxe',\r\n        title: 'Battleaxe',\r\n        description: 'A large, double-bladed axe.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/battleaxe.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            \"Versatile\"\r\n        ],\r\n        itemCost: 1,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Slash (1h)\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 8,\r\n                        modifier: 0,\r\n                        damageType: \"Slashing\"\r\n                    }\r\n                ],\r\n            \"Slash (2h)\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 10,\r\n                        modifier: 0,\r\n                        damageType: \"Slashing\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Glaive',\r\n        title: 'Glaive',\r\n        description: 'A long polearm with a menacing length of steel at one end.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/glaive.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            \"Heavy\",\r\n            \"Reach\",\r\n            \"TwoHanded\"\r\n        ],\r\n        itemCost: 1,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Slash\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 10,\r\n                        modifier: 0,\r\n                        damageType: \"Slashing\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Longsword',\r\n        title: 'Longsword',\r\n        description: 'A large, double-bladed axe.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/longsword.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            \"Versatile\"\r\n        ],\r\n        itemCost: 15,\r\n        type: \"Weapon\",\r\n        attacks: {\r\n            \"Slash (1h)\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 8,\r\n                        modifier: 0,\r\n                        damageType: \"Slashing\"\r\n                    }\r\n                ],\r\n            \"Slash (2h)\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 10,\r\n                        modifier: 0,\r\n                        damageType: \"Slashing\"\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n]\r\n\r\nconst ItemMap_Potions: Array<IItemPotionJson> =\r\n[\r\n    {\r\n        key: 'SmallHealing',\r\n        title: 'Small Healing Potion',\r\n        description: 'A small healing potion.',\r\n        details: 'Heals 2d4+2 when consumed.',\r\n        iconSource: './images/Item_Shop/Items/Potions/LowHealthPotion.png',\r\n        source: \"Official\",\r\n        requiresAttunement: false,\r\n        hasWithdrawalEffect: false,\r\n        itemCost: 50,\r\n        type: \"Potion\",\r\n    },\r\n    {\r\n        key: 'SmallMana',\r\n        title: 'Small Mana Potion',\r\n        description: 'A small mana potion.',\r\n        details: 'Restores 1 level 1 spell slot when consumed.',\r\n        iconSource: './images/Item_Shop/Items/Potions/LowManaPotion.png',\r\n        source: \"Homebrew\",\r\n        requiresAttunement: false,\r\n        hasWithdrawalEffect: true,\r\n        itemCost: 100,\r\n        type: \"Potion\",\r\n    },\r\n    {\r\n        key: 'DarkContract',\r\n        title: 'Potion of the Dark Contract',\r\n        description: 'A dark, bubbling brew.',\r\n        details: 'Light that enters the bottle does not return. On consuming this potion, take 2d4 necrotic damage. Your next attack gains bonus damage equal to twice the necrotic damage that you have taken.',\r\n        iconSource: './images/Item_Shop/Items/Potions/DarkContractPotion.png',\r\n        source: \"Homebrew\",\r\n        requiresAttunement: false,\r\n        hasWithdrawalEffect: false,\r\n        itemCost: 100,\r\n        type: \"Potion\",\r\n    },\r\n    {\r\n        key: 'TiamatBrew',\r\n        title: \"Tiamat's Brew\",\r\n        description: 'A rainbow of shifting colors lives in this bottle.',\r\n        details: \"On consumption, cast the Dragon's Breath spell on self.\",\r\n        iconSource: './images/Item_Shop/Items/Potions/potion_tiamat.png',\r\n        source: \"Homebrew\",\r\n        requiresAttunement: false,\r\n        hasWithdrawalEffect: true,\r\n        itemCost: 100,\r\n        type: \"Potion\",\r\n    },\r\n    {\r\n        key: 'PoisonousMiasma',\r\n        title: 'Poisonous Miasma',\r\n        description: 'A swirling, toxic potion. The likeness of a long, green, clay snake is enveloped around the bottle.',\r\n        details: 'When used, causes a weapon to deal an additional 2 poison damage to attacks that deal slashing or piercing damage. The effect lasts 24 hours. Application takes 1 minute, and this item is consumed on use.',\r\n        iconSource: './images/Item_Shop/Items/Potions/poison.png',\r\n        source: \"Homebrew\",\r\n        requiresAttunement: false,\r\n        hasWithdrawalEffect: false,\r\n        itemCost: 100,\r\n        type: \"Potion\",\r\n    },\r\n    {\r\n        key: 'BurningMiasma',\r\n        title: 'Burning Miasma',\r\n        description: 'A swirling, heated potion. The likeness of a long, red, clay snake is enveloped around the bottle.',\r\n        details: 'When used, causes a weapon to deal an additional 2 fire damage to attacks that deal slashing or piercing damage. The effect lasts 24 hours. Application takes 1 minute, and this item is consumed on use.',\r\n        iconSource: './images/Item_Shop/Items/Potions/poison_burning.png',\r\n        source: \"Homebrew\",\r\n        requiresAttunement: false,\r\n        hasWithdrawalEffect: false,\r\n        itemCost: 100,\r\n        type: \"Potion\",\r\n    },\r\n    {\r\n        key: 'ElectricMiasma',\r\n        title: 'Electric Miasma',\r\n        description: 'A swirling, shocking potion. The likeness of a long, yellow, clay snake is enveloped around the bottle.',\r\n        details: 'When used, causes a weapon to deal an additional 2 lightning damage to attacks that deal slashing or piercing damage. The effect lasts 24 hours. Application takes 1 minute, and this item is consumed on use.',\r\n        iconSource: './images/Item_Shop/Items/Potions/poison_lightning.png',\r\n        source: \"Homebrew\",\r\n        requiresAttunement: false,\r\n        hasWithdrawalEffect: false,\r\n        itemCost: 100,\r\n        type: \"Potion\",\r\n    },\r\n    {\r\n        key: 'AngelicPotion',\r\n        title: 'Angelic Potion',\r\n        description: 'A large, winged potion. The bottle is miraculously light.',\r\n        details: 'Bubbles rise endlessly from the bottom of the glass. When consumed, heals 2d4+2 hitpoints and grants the user the ability to fly for the next 18 seconds (3 rounds of combat).',\r\n        iconSource: './images/Item_Shop/Items/Potions/AngelicPotion.png',\r\n        source: \"Homebrew\",\r\n        requiresAttunement: false,\r\n        hasWithdrawalEffect: true,\r\n        itemCost: 250,\r\n        type: \"Potion\",\r\n    },\r\n]\r\n\r\nconst ItemMap_Armor: Array<IItemArmorJson> = [];\r\n\r\nconst ItemMap_Wondrous: Array<IItemWondrousJson> =\r\n[\r\n    {\r\n        key: 'FireyRing',\r\n        title: 'Firey Ring',\r\n        description: 'A golden ring with a ruby fastened to its exterior. The ring is warm to the touch.',\r\n        details: 'Grants the bearer access to the Fire Bolt cantrip. If the user has no spellcasting modifier, they may use their Wisdom modifier. Wearing more than one spell-ring at once will cause the user to take 1 level of exhaustion every 10 seconds.',\r\n        iconSource: './images/Item_Shop/Items/Rings/Ring Jewel Red.png',\r\n        source: \"Homebrew\",\r\n        requiresAttunement: true,\r\n        itemCost: 100,\r\n        type: \"Wondrous\",\r\n    },\r\n    {\r\n        key: 'FrigidRing',\r\n        title: 'Frigid Ring',\r\n        description: 'A silver ring with a sapphire fastened to its exterior. The ring is cold to the touch.',\r\n        details: 'Grants the bearer access to the Ray of Frost cantrip. If the user has no spellcasting modifier, they may use their Wisdom modifier. Wearing more than one spell-ring at once will cause the user to take 1 level of exhaustion every 10 seconds.',\r\n        iconSource: './images/Item_Shop/Items/Rings/Ring Silver Jewel Green.png',\r\n        source: \"Homebrew\",\r\n        requiresAttunement: true,\r\n        itemCost: 100,\r\n        type: \"Wondrous\",\r\n    },\r\n    {\r\n        key: 'FloralRing',\r\n        title: 'Ring of Floral Accomodation',\r\n        description: 'A silver ring with the likeness of a pink rose fastened to its exterior.',\r\n        details: 'When touched to any surface, that surface will sprout flowers at a rapid pace for the next 6 seconds.',\r\n        iconSource: './images/Item_Shop/Items/Rings/Ring Floral.png',\r\n        source: \"Homebrew\",\r\n        requiresAttunement: true,\r\n        itemCost: 50,\r\n        type: \"Wondrous\",\r\n    },\r\n]\r\n","export enum EStorageType {\r\n    Inventory = \"Inventory\",\r\n    CharacterName = \"CharacterName\"\r\n}\r\n","import { ItemSource } from \"../../Classes/ItemSource\";\r\nimport { IItem } from \"../../Interfaces/IItem\";\r\nimport { TItemType } from \"../../Types/TItemType\";\r\n\r\n/**\r\n * @description A class used to represent a 'carpet'. A carpet is a section of an item shop, where\r\n * similar items are grouped together.\r\n */\r\nexport class CarpetMap {\r\n    /**\r\n     * @description The name to display above the rug.\r\n     */\r\n    rugName: string = \"\";\r\n\r\n    /**\r\n     * @description The items that are contained within the rug.\r\n     */\r\n    items: IItem[] = [];\r\n\r\n    /**\r\n     * @description The border source image to display around the rug. The syntax for this should be:\r\n     * \"url(/images/Item_Shop/Items/Rugs/purplerug.png)\"\r\n     * \r\n     * where the root folder is the public folder.\r\n     */\r\n    rugBorderSource: string = \"\";\r\n\r\n    /**\r\n     * @description The constructor for this object.\r\n     * @param rugName The name to display above the rug.\r\n     * @param borderSource The url source for the border image to display around the rug.\r\n     * @param weapons A list of weapon item keys to include within this rug.\r\n     * @param armor A list of armor item keys to include within this rug.\r\n     * @param potions A list of potion item keys to include within this rug.\r\n     * @param wondrous A list of wondrous item keys to include within this rug.\r\n     */\r\n    public constructor(\r\n        rugName: string,\r\n        borderSource: string,\r\n        itemType: TItemType,\r\n        items: string[])\r\n    {\r\n        this.rugName = rugName;\r\n        this.rugBorderSource = borderSource;\r\n\r\n        items.forEach(item => {\r\n            var itemLookup: IItem | undefined = ItemSource.GetItem(item, itemType);\r\n            if (itemLookup !== undefined) {\r\n                this.items.push(itemLookup);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n/**\r\n * @description A constant used to keep track of a set of 'default' rugs. This is primarily for demonstration\r\n * purposes, and will be removed eventually.\r\n */\r\nexport const CarpetMaps: CarpetMap[] = [\r\n    new CarpetMap(\"Simple Weapons\", \"url(/images/Item_Shop/Items/Rugs/purplerug.png)\", \"Weapon\", [\"Club\", \"Dagger\", \"Greatclub\", \"Handaxe\", \"Javelin\", \"LightHammer\", \"SnakeStaff\", \"Quarterstaff\", \"Spear\", \"Shortsword\", \"Shortbow\"]),\r\n    new CarpetMap(\"Potions\", \"url(/images/Item_Shop/Items/Rugs/greenrug.png)\", \"Potion\", [\"SmallHealth\", \"SmallMana\", \"DarkContract\", \"TiamatBrew\", \"Angelic\", \"MiasmaBurning\"]),\r\n    new CarpetMap(\"Wondrous Items\", \"url(/images/Item_Shop/Items/Rugs/bluerug.png)\", \"Wondrous\", [\"RedRing\", \"BlueRing\", \"FloralRing\"]),\r\n]\r\n","import { TItemType } from \"../Types/TItemType\";\r\nimport { ItemSource } from \"./ItemSource\";\r\nimport { IItemJson, IItem } from \"../Interfaces/IItem\";\r\nimport { TInventoryModel } from \"../Types/TInventoryModel\";\r\nimport { TInventoryModelStorage } from \"../Types/TInventoryModelStorage\";\r\nimport { EStorageType } from \"../Enums/EStorageType\";\r\n\r\n/**\r\n * @description This class serves as a listen-able instance of a character's inventory. This is served as\r\n * a singleton; there should only ever be one inventory at a time. Multiple inventories may be saved in a\r\n * user's storage (in future, via AWS NoSQL), but only one inventory is available at a time.\r\n * \r\n * @reference https://medium.com/javascript-everyday/singleton-made-easy-with-typescript-6ad55a7ba7ff\r\n */\r\nexport class InventoryStorage {\r\n    private static instance: InventoryStorage;\r\n\r\n    // Use strings as the key for this map; objects as keys require direct references to the same object.\r\n    // https://stackoverflow.com/questions/43592760/typescript-javascript-using-tuple-as-key-of-map\r\n    private _items: Map<TItemType, IItemJson[]> = new Map<TItemType, IItemJson[]>();\r\n    private _characterName: string;\r\n\r\n    // https://regex101.com/r/AJU90m/1\r\n    private readonly _validCharnameCharacters: RegExp = /^[a-z0-9 ]+$/i;\r\n\r\n    /**\r\n     * @description Stores the current character's name. Calling the setter for this name will force the\r\n     * inventory to update each observable list.\r\n     */\r\n    public get CharacterName(): string {\r\n        return this._characterName;\r\n    }\r\n\r\n    /**\r\n     * @description Stores the current character's name. Calling the setter for this name will force the\r\n     * inventory to update each observable list.\r\n     */\r\n    public set CharacterName(name: string) {\r\n        this._characterName = name;\r\n\r\n        // Save the last set character name in local storage. This lets someone reload their browser without\r\n        // having to re-select the same character.\r\n        localStorage.setItem(EStorageType.CharacterName, name);\r\n        this.UpdateInventoryUsingCache();\r\n    }\r\n\r\n    public GetItemsOfType(type: TItemType): IItemJson[] {\r\n        var typedItems: IItemJson[] = [];\r\n\r\n        if (this._items.has(type))\r\n        {\r\n            typedItems = this._items.get(type) as IItemJson[];\r\n        }\r\n\r\n        return typedItems;\r\n    }\r\n\r\n    /**\r\n     * The constructor for this class.\r\n     */\r\n    private constructor() {\r\n        // This is going to be an event listener, so ensure that a calling context knows what 'this' is.\r\n        this.UpdateInventoryUsingCache = this.UpdateInventoryUsingCache.bind(this);\r\n\r\n        window.addEventListener(\"storage\", this.UpdateInventoryUsingCache);\r\n\r\n        this._characterName = \"\";\r\n\r\n        this.InitializeLists();\r\n\r\n        /*\r\n         * First, check and see if the local storage is holding the key:\r\n         *  CharacterName\r\n         * \r\n         * If localstorage has that key, then get it. Otherwise, we need to \r\n         * \r\n         * Get the character's name from the key:\r\n         *  CharacterName\r\n         * \r\n         * Then call the setter function for CharacterName. This will invoke updating the inventory.\r\n         */\r\n\r\n        var parsedStorage: TInventoryModelStorage = this.GetInventoryStorage();\r\n        var atLeastOneValidNameExists: Boolean = Object.keys(parsedStorage).length > 0;\r\n\r\n        if (!atLeastOneValidNameExists) {\r\n            this.AddCharacter();\r\n        }\r\n        else {\r\n            var charName: string;\r\n            var storedName: string | null = localStorage.getItem(EStorageType.CharacterName);\r\n\r\n            if (storedName != null) {\r\n                charName = storedName as string;\r\n            }\r\n            else {\r\n                charName = Object.keys(parsedStorage)[0];\r\n            }\r\n\r\n            this.CharacterName = charName;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Provides the single instance of this class.\r\n     */\r\n    public static getInstance() {\r\n        if (!InventoryStorage.instance) {\r\n            InventoryStorage.instance = new InventoryStorage();\r\n        }\r\n\r\n        return InventoryStorage.instance;\r\n    }\r\n\r\n    /**\r\n     * @description Adds a character to the list of characters in the inventory. New characters will start\r\n     * with an empty inventory.\r\n     */\r\n    public AddCharacter() {\r\n        var nameIsValid: boolean = false;\r\n        var charName: string = \"\";\r\n        var userHitCancel: Boolean = false;\r\n        var userUsedInvalidCharacters: Boolean = false;\r\n        var userEnteredExistingName: Boolean = false;\r\n\r\n        var parsedStorage: TInventoryModelStorage = this.GetInventoryStorage();\r\n        var atLeastOneValidNameExists: Boolean = Object.keys(parsedStorage).length > 0;\r\n\r\n        // Keep asking the user to display a name until they have some valid input, or until they hit cancel.\r\n        // Note that a user can only continue by hitting cancel if they have at least one valid name.\r\n        while (!nameIsValid && !(userHitCancel && atLeastOneValidNameExists)) {\r\n            let userPrompt: string = \"Please enter a character name.\";\r\n\r\n            if (userHitCancel && !atLeastOneValidNameExists) {\r\n                userPrompt = userPrompt + \" Use of the inventory system requires at least one character.\";\r\n            }\r\n            if (userUsedInvalidCharacters) {\r\n                userPrompt = userPrompt + \" Valid characters are alphanumerics and spaces.\";\r\n            }\r\n            if (userEnteredExistingName) {\r\n                userPrompt = userPrompt + \" Please enter a new, unused character name.\";\r\n            }\r\n\r\n            let input = prompt(userPrompt, \"Hurdy Gurdy\");\r\n\r\n            userHitCancel = input === null;\r\n\r\n            if (!userHitCancel) {\r\n                // They didn't hit cancel, so unless something else went wrong, this is fine.\r\n\r\n                nameIsValid = true;\r\n                let stringInput: string = input as string;\r\n\r\n                if (!this._validCharnameCharacters.test(stringInput)) {\r\n                    nameIsValid = false;\r\n                    userUsedInvalidCharacters = true;\r\n                }\r\n                if (stringInput in parsedStorage) {\r\n                    nameIsValid = false;\r\n                    userEnteredExistingName = true;\r\n                }\r\n\r\n                if (nameIsValid) {\r\n                    charName = stringInput;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Reset all of the inventory lists. A new character should start with nothing.\r\n        this.InitializeLists();\r\n\r\n        // Save this new character to the cache.\r\n        this.SaveToCache(charName)\r\n\r\n        // Now tell the inventory to use the new character. When we set the character name, that makes\r\n        // us switch to the \r\n        this.CharacterName = charName;\r\n    }\r\n\r\n    /**\r\n     * @description Adds a given item to the inventory. An item key and type must be provided. Listeners\r\n     * will be notified when this function is called.\r\n     * @param key The key for the given item to add to the inventory.\r\n     * @param type The type of item that is being added to the inventory.\r\n     */\r\n    private AddItemInternal(key: string, type: TItemType) {\r\n        var item: IItem | undefined = ItemSource.GetItem(key, type);\r\n        if (!this._items.has(type)) {\r\n            console.log(\"Adding an item to an item type that doesn't exist yet.\");\r\n            this._items.set(type, []);\r\n        }\r\n        if (item !== undefined) {\r\n            console.log(\"Item was found! Adding item to the list.\");\r\n            this._items.get(type)?.push(item);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Adds a given item to the inventory. An item key and type must be provided. Listeners\r\n     * will be notified when this function is called.\r\n     * @param key The key for the given item to add to the inventory.\r\n     * @param type The type of item that is being added to the inventory.\r\n     */\r\n    public AddItem(key: string, type: TItemType) {\r\n        this.AddItemInternal(key, type);\r\n        this.SaveToCache(this.CharacterName);\r\n    }\r\n\r\n    /**\r\n     * @description Removes a given item from the inventory. An item key and type must be provided. Listeners\r\n     * will be notified when this function is called.\r\n     * @param key The key for the given item to remove from the inventory.\r\n     * @param type The type of item that is being removed from the inventory.\r\n     */\r\n    public RemoveItem(key: string, type: TItemType) {\r\n        if (this._items.has(type)) {\r\n            var itemsOfType: IItemJson[] = this._items.get(type) as IItemJson[];\r\n            \r\n            for(let i = 0; i < itemsOfType.length; i++) {\r\n                if (itemsOfType[i].key === key) {\r\n                    itemsOfType.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            this._items.set(type, itemsOfType);\r\n        }\r\n\r\n        this.SaveToCache(this.CharacterName);\r\n    }\r\n\r\n    /**\r\n     * @description Saves the current inventory information to the cache. This should be replaced with a \r\n     * logging call to an AWS database.\r\n     * @param charName The name of the character that this information is being saved to.\r\n     */\r\n    private SaveToCache(charName: string): void {\r\n        console.log(\"Saving items to the cache.\");\r\n\r\n        var cacheItems: {[key: string]: string[]} = {};\r\n\r\n        for(let [key, value] of this._items) {\r\n            console.log(`cacheItems: ${JSON.stringify(cacheItems)}`);\r\n            cacheItems[key] = value.map((item) => item.key);\r\n            console.log(`cacheItems: ${JSON.stringify(cacheItems)}`);\r\n        }\r\n\r\n        var inventoryModel: TInventoryModel = {\r\n            characterName: charName,\r\n            items: cacheItems\r\n        };\r\n\r\n        console.log(`New char inventory: ${JSON.stringify(inventoryModel)}`);\r\n\r\n        var parsedStorage: TInventoryModelStorage = this.GetInventoryStorage();\r\n\r\n        parsedStorage[charName] = inventoryModel;\r\n        var jsonStorage = JSON.stringify(parsedStorage);\r\n        console.log(`Saving ${jsonStorage}`);\r\n\r\n        localStorage.setItem(EStorageType.Inventory, jsonStorage);\r\n    }\r\n\r\n    /**\r\n     * @description Gets the inventory storage information from the cache.\r\n     */\r\n    private GetInventoryStorage(): TInventoryModelStorage {\r\n        var parsedStorage: TInventoryModelStorage = {};\r\n        var itemStorage = localStorage.getItem(EStorageType.Inventory);\r\n\r\n        if (itemStorage !== null) {\r\n            var storageString: string = itemStorage as string;\r\n            parsedStorage = JSON.parse(storageString) as TInventoryModelStorage;\r\n        }\r\n\r\n        return parsedStorage;\r\n    }\r\n\r\n    /**\r\n     * @description Updates the current inventory using the cache. Clears the inventory then \r\n     */\r\n    private UpdateInventoryUsingCache(): void {\r\n        /*\r\n         * Each item type is stored in the cache under the key:\r\n         *  {CharName}_{TItemType}\r\n         * \r\n         * This means that we need to get a string array from each of these fields, and lookup what the\r\n         * ItemSource says these items are. In short, once we get this array we can iterate over each item\r\n         * and call \"AddItem\" for each key.\r\n         */\r\n        var parsedStorage: TInventoryModelStorage = this.GetInventoryStorage();\r\n        var inventoryModel: TInventoryModel;\r\n\r\n        if (this.CharacterName in parsedStorage) {\r\n            inventoryModel = parsedStorage[this.CharacterName];\r\n        }\r\n        else {\r\n            // This shouldn't happen, but if it does, save what's in the inventory under the character's\r\n            // name to the cache and continue on.\r\n            console.error(`Current character ${this.CharacterName} is not saved in the cache when updating.`);\r\n\r\n            inventoryModel = {\r\n                characterName: \"\",\r\n                items: {}\r\n            };\r\n        }\r\n\r\n        this.InitializeLists();\r\n\r\n        Object.keys(inventoryModel.items).forEach((itemType) => {\r\n            inventoryModel.items[itemType].forEach((item) => {\r\n                this.AddItemInternal(item, itemType as TItemType);\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @description Sets the item lists to their default, empty, states.\r\n     */\r\n    private InitializeLists(): void {\r\n        this._items = new Map();\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { TAttack } from '../../Types/TAttack';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { TDamageType } from '../../Types/TDamageType';\r\n\r\ntype DamageRoll = {\r\n    damageType: TDamageType;\r\n    rolledNumbers: number[];\r\n    modifier: number;\r\n}\r\n\r\ninterface IAttackRollModalState {\r\n    attackRoll: number;\r\n    damageRoll: DamageRoll[];\r\n}\r\n\r\ninterface IAttackRollModalProps {\r\n    show: boolean;\r\n    attackName: string;\r\n    attacks: TAttack[];\r\n    onHide: () => void;\r\n}\r\n\r\nexport class AttackRollModal extends React.Component<IAttackRollModalProps, IAttackRollModalState> {\r\n    /**\r\n     * Generating a bunch of random numbers on the fly, in quick succession, is somewhat expensive, so \r\n     * intead use some pre-generated lists of numbers to flash at someone as the dice is being rolled.\r\n     * \r\n     * TODO: I really don't like relying on these arrays being the exact size as the timing array. Fix this.\r\n     */\r\n    private randomRollNumbers: number[][] = [\r\n        [8, 17, 4, 7, 2, 6, 11, 16, 1, 12, 15, 10, 18, 19, 5, 3, 14, 9, 13, 20],\r\n        [17, 4, 3, 10, 2, 14, 11, 19, 18, 5, 13, 20, 7, 16, 9, 6, 1, 15, 12, 8],\r\n        [12, 4, 6, 18, 15, 17, 19, 13, 14, 8, 7, 3, 9, 2, 16, 10, 1, 5, 20, 11],\r\n        [9, 8, 16, 13, 6, 15, 3, 2, 10, 4, 18, 7, 5, 1, 17, 12, 20, 19, 14, 11],\r\n        [4, 7, 2, 19, 10, 1, 6, 5, 13, 18, 8, 17, 14, 15, 11, 3, 20, 12, 16, 9],\r\n        [20, 5, 19, 9, 12, 16, 4, 10, 2, 17, 8, 15, 6, 7, 11, 1, 13, 3, 18, 14],\r\n        [17, 15, 14, 1, 16, 4, 20, 18, 19, 6, 8, 10, 9, 3, 13, 12, 2, 11, 7, 5],\r\n        [4, 2, 18, 9, 13, 20, 7, 1, 10, 8, 14, 16, 19, 15, 5, 11, 6, 17, 12, 3],\r\n        [6, 8, 14, 18, 7, 17, 20, 15, 11, 5, 2, 16, 3, 19, 12, 4, 10, 9, 13, 1],\r\n        [7, 20, 9, 8, 13, 19, 6, 15, 14, 18, 5, 3, 2, 12, 11, 1, 10, 17, 4, 16],\r\n    ]\r\n\r\n    private rollDelay: number[] = [\r\n        50, 100, 150, 200, 250, 300, 350, 400, 450, 550, 650, 750, 850, 950, 1050, 1250, 1500, 1800, 1800, 2150\r\n    ]\r\n\r\n    private rollDieAudio = new Audio(\"./sounds/rollDie.wav\");\r\n    private roll20Audio = new Audio(\"./sounds/roll20.wav\");\r\n    private roll1Audio = new Audio(\"./sounds/roll1.wav\");\r\n\r\n\r\n    private GetDieValue(dieFaces: number): number {\r\n        return Math.ceil(Math.random() * (dieFaces));\r\n    }\r\n\r\n    private RollAttack(): void {\r\n        var timesRolled: number = 0;\r\n        var randomNumberList: number = Math.floor(Math.random() * this.randomRollNumbers.length);\r\n\r\n        for (let i: number = 0; i < this.rollDelay.length; i++) {\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    attackRoll: this.randomRollNumbers[randomNumberList][i]\r\n                });\r\n            }, this.rollDelay[i])\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.setState({\r\n                attackRoll: this.GetDieValue(20)\r\n            })\r\n            if (this.state.attackRoll == 20) {\r\n                this.roll20Audio.play();\r\n            }\r\n            else if (this.state.attackRoll == 1) {\r\n                this.roll1Audio.play();\r\n            }\r\n        }, this.rollDelay[this.rollDelay.length - 1] + 350)\r\n    }\r\n\r\n    private RollDamage(): void {\r\n        var rolls: DamageRoll[] = this.props.attacks.map((attack) => {\r\n            let rolledNumbers: number[] = [];\r\n            for(let i = 0; i < attack.diceCount; i++) {\r\n                rolledNumbers.push(this.GetDieValue(attack.diceSize));\r\n            }\r\n\r\n            let roll: DamageRoll = {\r\n                damageType: attack.damageType,\r\n                rolledNumbers: rolledNumbers,\r\n                modifier: attack.modifier\r\n            };\r\n\r\n            return roll;\r\n        });\r\n\r\n        this.setState({\r\n            damageRoll: rolls\r\n        });\r\n    }\r\n\r\n    private GetDamageRollDisplay(): JSX.Element[] {\r\n        return this.state.damageRoll.map((roll) => {\r\n            var rollStatement: string = \"\";\r\n            \r\n            var diceRollsMessage: string = roll.rolledNumbers.join(\" + \");\r\n            var rollModifierMessage: string = roll.modifier > 0 ? ` + ${roll.modifier}` : '';\r\n            var damageMessage: string = `${roll.damageType} damage`;\r\n\r\n            rollStatement = `${diceRollsMessage}${rollModifierMessage}`;\r\n\r\n            return (\r\n                <div className={`text-color-${roll.damageType.toLowerCase()}`}>\r\n                    {rollStatement} {damageMessage}\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n    \r\n    public constructor(props: IAttackRollModalProps) {\r\n        super(props);\r\n        this.state = {\r\n            attackRoll: 0,\r\n            damageRoll: []\r\n        };\r\n\r\n        this.rollDieAudio.volume = 0.25;\r\n        this.roll1Audio.volume = 0.25;\r\n        this.roll20Audio.volume = 0.25;\r\n    }\r\n\r\n    public render() {\r\n        const handleModalShown: () => void = () => {\r\n            this.rollDieAudio.play();\r\n            this.RollAttack();\r\n            this.RollDamage();\r\n        };\r\n\r\n        // SVG Generated with:\r\n        // https://codepen.io/wvr/pen/WrNgJp\r\n\r\n        return (\r\n            <Modal\r\n                onEntering={handleModalShown}\r\n                show={this.props.show}\r\n                centered={true}\r\n                onHide={this.props.onHide}>\r\n                <Modal.Header>\r\n                    <Modal.Title className=\"pixel-font\">\r\n                        {this.props.attackName}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div className=\"roll-window-image\">\r\n                        <img src=\"./images/Item_Shop/RollImage.png\" />\r\n                    </div>\r\n                    <hr className='white-hr' />\r\n                    <h5>Attack</h5>\r\n                    <div className=\"roll-window-attack\">\r\n                        {this.state.attackRoll}\r\n                        <div className=\"roll-window-attack-number\">\r\n                            {this.state.attackRoll}\r\n                        </div>\r\n                        <svg\r\n                            className=\"roll-window-attack-die\"\r\n                            version=\"1.1\"\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"64\"\r\n                            height=\"56\" >\r\n                            <path fill=\"#891e2b\" d=\"M0 27.712812921102035L16 0L48 0L64 27.712812921102035L48 55.42562584220407L16 55.42562584220407Z\"></path>\r\n                        </svg>\r\n                    </div>\r\n                    <hr className='white-hr' />\r\n                    <h5>Damage</h5>\r\n                    <div className=\"roll-window-damage\">\r\n                        {this.GetDamageRollDisplay()}\r\n                    </div>\r\n                </Modal.Body>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Modal, Alert, Spinner, Button, AlertProps } from 'react-bootstrap';\r\nimport { IItem, IItemJson } from '../../Interfaces/IItem';\r\nimport { TSourceType } from '../../Types/TSourceType';\r\n\r\ninterface IItemDetailsModalState {\r\n    showAlert: boolean;\r\n}\r\n\r\ninterface IItemDetailsModalProps {\r\n    show: boolean;\r\n    hideModal: () => void;\r\n    itemDetails: IItem;\r\n\r\n    inventoryButtonCallback: (item: IItem) => void;\r\n    inventoryButtonText: string;\r\n    inventoryAlertText: string;\r\n    inventoryAlertStyle: AlertProps[\"variant\"];\r\n}\r\n\r\nexport class ItemDetailsModal extends React.Component<IItemDetailsModalProps, IItemDetailsModalState> {\r\n    /**\r\n     * @description Performs an enum-<p> lookup to get something nice and pixelated to represent the source\r\n     * of the item that is being displayed.\r\n     * @param source The source to lookup and return a <p> element that represents it.\r\n     */\r\n    private getSourceText(source: TSourceType) {\r\n        switch (source) {\r\n            case \"Official\":\r\n                {\r\n                    return (<p style={{ color: 'rgb(255, 200, 37)' }}>Official</p>);\r\n                }\r\n            case \"Homebrew\":\r\n                {\r\n                    return (<p style={{ color: 'rgb(147, 56, 143)' }}>Homebrew</p>);\r\n                }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Performs an enum-<p> lookup to get something nice and pixelated to represent the type\r\n     * of the item that is being displayed.\r\n     * @param type The item to lookup and return a <p> element that represents it.\r\n     */\r\n    private getTypeDisplay(item: IItemJson) {\r\n        switch (item.type) {\r\n            case \"Weapon\":\r\n                {\r\n                    return (<p style={{ color: 'rgb(199, 207, 221)' }}>Weapon</p>);\r\n                }\r\n            case \"Armor\":\r\n                {\r\n                    return (<p style={{ color: 'rgb(148, 253, 255)' }}>Armor</p>);\r\n                }\r\n            case \"Potion\":\r\n                {\r\n                    return (<p style={{ color: 'rgb(253, 210, 237)' }}>Potion</p>);\r\n                }\r\n            case \"Wondrous\":\r\n                {\r\n                    return (<p style={{ color: 'rgb(255, 235, 87)' }}>Wondrous Item</p>);\r\n                }\r\n            default:\r\n                {\r\n                    return (<p style={{ color: 'rgb(255, 235, 87)' }}>Wondrous Item</p>);\r\n                }\r\n        }\r\n    }\r\n\r\n    public constructor(props: IItemDetailsModalProps) {\r\n        super(props);\r\n        this.state = {\r\n            showAlert: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        // https://codesandbox.io/s/qqn6nxjp9\r\n        const handleInventoryButton: () => void = () => {\r\n            this.setState({\r\n                showAlert: true\r\n            }, () => {\r\n                window.setTimeout(() => {\r\n                    this.setState({\r\n                        showAlert: false\r\n                    })\r\n                }, 3000)\r\n            })\r\n            this.props.inventoryButtonCallback(this.props.itemDetails);\r\n        }\r\n\r\n        return (\r\n            <Modal\r\n                show={this.props.show}\r\n                onHide={this.props.hideModal}\r\n                centered={true}>\r\n                <Modal.Header>\r\n                    <Modal.Title className=\"pixel-font\">\r\n                        {this.props.itemDetails.title}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Alert\r\n                        variant={this.props.inventoryAlertStyle}\r\n                        show={this.state.showAlert}>\r\n                        <Spinner animation=\"grow\" variant={this.props.inventoryAlertStyle} />\r\n                        Added item to inventory!\r\n                </Alert>\r\n                    <div className='item-preview'>\r\n                        <img src={this.props.itemDetails.iconSource} width={128} height={128} alt=\"item preview\" />\r\n                    </div>\r\n                    <hr className='white-hr' />\r\n                    <div className='item-details pixel-font'>\r\n                        <div className='item-tag'>\r\n                            {this.getSourceText(this.props.itemDetails.source)}\r\n                        </div>\r\n                        <div className='item-tag'>\r\n                            {`${this.props.itemDetails.itemCost}x`}\r\n                            <img src='./images/Item_Shop/itemCoin.gif' alt=\"animated coin icon\" />\r\n                        </div>\r\n                        <div className='item-tag'>\r\n                            {this.getTypeDisplay(this.props.itemDetails)}\r\n                        </div>\r\n                    </div>\r\n                    <hr className='white-hr' />\r\n                    {this.props.itemDetails.RenderItemDescription()}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        variant='dark'\r\n                        onClick={handleInventoryButton}\r\n                        disabled={this.state.showAlert}\r\n                        style={this.state.showAlert ? { cursor: \"default\" } : { cursor: \"pointer\" }}>\r\n                        {this.props.inventoryButtonText}\r\n                        </Button>\r\n                    <Button variant='dark' onClick={this.props.hideModal}>Close</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n","import './ItemShop.css';\r\nimport React from 'react';\r\n\r\nimport { IItemJson, IItem } from \"../../Interfaces/IItem\";\r\nimport { TSourceType } from \"../../Types/TSourceType\";\r\nimport { BazaarCarpet } from './BazaarCarpet';\r\nimport { CarpetMaps } from './CarpetMap';\r\nimport { InventoryStorage } from '../../Classes/InventoryStorage';\r\nimport { ItemWondrous } from '../../Classes/ItemWondrous';\r\nimport { AttackRollModal } from '../Common/AttackRollModal';\r\nimport { TAttack } from '../../Types/TAttack';\r\nimport { TAttackClick, TItemClick } from '../Common/ItemCard';\r\nimport { ItemDetailsModal } from '../Common/ItemDetailsModal';\r\n\r\n/**\r\n * @description\r\n * Describes the properties that are passed into this class.\r\n */\r\ninterface IItemShopProps {\r\n};\r\n\r\n/**\r\n * @description Describes the state that is maintained by this object.\r\n * @param showItemDialog A boolean value to describe whether the item dialog (modal) is displayed at any\r\n * given point.\r\n * @param itemDetails A set of details that describe the currently selected item. This is used to populate\r\n * the modal that appears.\r\n */\r\ninterface IItemShopState {\r\n    showItemDialog: boolean;\r\n    showAddedAlert: boolean;\r\n    itemDetails: IItem;\r\n    showAttackRoll: boolean;\r\n    attackName: string;\r\n    attackRolls: TAttack[];\r\n};\r\n\r\n/**\r\n * @description\r\n * Represents an item shop! This is a full-screen application that is used to 'browse' some digital items.\r\n */\r\nexport class ItemShop extends React.Component<IItemShopProps, IItemShopState> {\r\n    /**\r\n     * @description Creates a new instance of @see ItemShop .\r\n     * @param props The properties required to instantiate this class.\r\n     */\r\n    constructor(props: IItemShopProps) {\r\n        super(props);\r\n        this.state = {\r\n            showItemDialog: false,\r\n            showAddedAlert: false,\r\n            itemDetails: new ItemWondrous(),\r\n            showAttackRoll: false,\r\n            attackName: \"\",\r\n            attackRolls: []\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description\r\n     * Shows or hides the item details modal.\r\n     * @param show If true, show the modal; otherwise false.\r\n     */\r\n    setModalVisiblity(show: boolean) {\r\n        this.setState({\r\n            showItemDialog: show,\r\n            showAddedAlert: this.state.showAddedAlert && !show\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Handles an item click event.\r\n     * @param item The item details that are provided as a result of the click event (this is a set of\r\n     * properties that represent the item that was clicked).\r\n     */\r\n    onItemClick(item: IItem) {\r\n        this.setState({\r\n            itemDetails: item,\r\n        });\r\n\r\n        this.setModalVisiblity(true);\r\n    }\r\n\r\n    /**\r\n     * @description Performs an enum-<p> lookup to get something nice and pixelated to represent the source\r\n     * of the item that is being displayed.\r\n     * @param source The source to lookup and return a <p> element that represents it.\r\n     */\r\n    getSourceText(source: TSourceType) {\r\n        switch (source) {\r\n            case \"Official\":\r\n                {\r\n                    return (<p style={{ color: 'rgb(255, 200, 37)' }}>Official</p>);\r\n                }\r\n            case \"Homebrew\":\r\n                {\r\n                    return (<p style={{ color: 'rgb(147, 56, 143)' }}>Homebrew</p>);\r\n                }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Performs an enum-<p> lookup to get something nice and pixelated to represent the type\r\n     * of the item that is being displayed.\r\n     * @param type The item to lookup and return a <p> element that represents it.\r\n     */\r\n    getTypeDisplay(item: IItemJson) {\r\n        switch (item.type) {\r\n            case \"Weapon\":\r\n                {\r\n                    return (<p style={{ color: 'rgb(199, 207, 221)' }}>Weapon</p>);\r\n                }\r\n            case \"Armor\":\r\n                {\r\n                    return (<p style={{ color: 'rgb(148, 253, 255)' }}>Armor</p>);\r\n                }\r\n            case \"Potion\":\r\n                {\r\n                    return (<p style={{ color: 'rgb(253, 210, 237)' }}>Potion</p>);\r\n                }\r\n            case \"Wondrous\":\r\n                {\r\n                    return (<p style={{ color: 'rgb(255, 235, 87)' }}>Wondrous Item</p>);\r\n                }\r\n            default:\r\n                {\r\n                    return (<p style={{ color: 'rgb(255, 235, 87)' }}>Wondrous Item</p>);\r\n                }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Gets a list of bazaar carpets for display.\r\n     * @param onItemClick The click event-handler for item clicks.\r\n     */\r\n    getBazaarCarpets(onItemClick: TItemClick, onAttackClick: TAttackClick) {\r\n        return CarpetMaps.map((carpet) => {\r\n            return (\r\n                <BazaarCarpet\r\n                    onAttackClick={onAttackClick}\r\n                    carpetMap={carpet}\r\n                    onItemClick={onItemClick}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Renders an instance of this class.\r\n     */\r\n    render() {\r\n        var item: IItem = this.state.itemDetails;\r\n\r\n        /* Keep these as consts because if we were to use a function callback when closing the Modal,\r\n         * that would result in an exception (because we're then in a state that doesn't recognize)\r\n         * ItemShop as 'this'. */\r\n\r\n        const handleItemClick: TItemClick = (itemDetails: IItem) => this.onItemClick(itemDetails);\r\n\r\n        const hideDetailsModal = () => {\r\n            this.setState({\r\n                showItemDialog: false,\r\n                showAddedAlert: false\r\n            });\r\n        };\r\n\r\n        const showAttackModal: TAttackClick = (attackName: string, attackRolls: TAttack[]) => {\r\n                this.setState({\r\n                    showAttackRoll: true,\r\n                    attackName: attackName,\r\n                    attackRolls: attackRolls\r\n                });\r\n            };\r\n\r\n        const hideAttackModal = () => {\r\n            this.setState({\r\n                showAttackRoll: false\r\n            })\r\n        };\r\n\r\n        const inventoryButtonCallback = () => {\r\n            InventoryStorage.getInstance().AddItem(item.key, item.type);\r\n        }\r\n\r\n        return (\r\n            <div className=\"ItemShop\">\r\n                <h1>Item Shop</h1>\r\n                <div className='shopkeeper-area'>\r\n                    <img src='./images/Item_Shop/brazier-lit.gif' alt=\"animated left brazier\" />\r\n                    <img src='./images/Item_Shop/shopkeeper.gif' alt=\"shopkeeper\" />\r\n                    <img src='./images/Item_Shop/brazier-lit.gif' alt=\"animated left brazier\" />\r\n                </div>\r\n                <div className='bazaar-area'>\r\n                    {this.getBazaarCarpets(handleItemClick, showAttackModal)}\r\n                </div>\r\n                <AttackRollModal\r\n                    show={this.state.showAttackRoll}\r\n                    onHide={hideAttackModal}\r\n                    attackName={this.state.attackName}\r\n                    attacks={this.state.attackRolls} />\r\n                <ItemDetailsModal\r\n                    show={this.state.showItemDialog}\r\n                    hideModal={hideDetailsModal}\r\n                    itemDetails={this.state.itemDetails}\r\n                    inventoryButtonCallback={inventoryButtonCallback}\r\n                    inventoryButtonText=\"Add to inventory\"\r\n                    inventoryAlertText=\"Item added to inventory!\"\r\n                    inventoryAlertStyle=\"success\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import './Inventory.css';\r\nimport React from 'react';\r\nimport { InventoryStorage } from '../../Classes/InventoryStorage';\r\nimport { ItemArmor } from '../../Classes/ItemArmor';\r\nimport { ItemPotion } from '../../Classes/ItemPotion';\r\nimport { ItemWeapon } from \"../../Classes/ItemWeapon\";\r\nimport { ItemWondrous } from '../../Classes/ItemWondrous';\r\nimport { IItemJson } from '../../Interfaces/IItem';\r\n\r\ninterface IInventoryProps {\r\n}\r\n\r\ninterface IInventoryState {\r\n    armorItems: Array<IItemJson>;\r\n    potionItems: Array<IItemJson>;\r\n    weaponItems: Array<IItemJson>;\r\n    wondrousItems: Array<IItemJson>;\r\n}\r\n\r\nexport class Inventory extends React.Component<IInventoryProps, IInventoryState> {\r\n    private getArmor() {\r\n        return this.state.armorItems.map((item) => {\r\n            return (\r\n                <span>{item.title}</span>\r\n            );\r\n        });\r\n    }\r\n\r\n    private getPotions() {\r\n        return this.state.potionItems.map((item) => {\r\n            return (\r\n                <span>{item.title}</span>\r\n            );\r\n        });\r\n    }\r\n\r\n    private getWeapons() {\r\n        return this.state.weaponItems.map((item) => {\r\n            var weapon: ItemWeapon = item as ItemWeapon;\r\n            return (\r\n                <span>{weapon.title + Object.keys(weapon.attacks)[0]}</span>\r\n            );\r\n        });\r\n    }\r\n\r\n    private getWondrous() {\r\n        return this.state.wondrousItems.map((item) => {\r\n            return (\r\n                <span>{item.title}</span>\r\n            );\r\n        });\r\n    }\r\n\r\n    private handleStorageChange() {\r\n        this.updateFromInventory();\r\n    }\r\n\r\n    private updateFromInventory() {\r\n        this.setState({\r\n            armorItems: InventoryStorage.getInstance().GetItemsOfType(\"Armor\"),\r\n            potionItems: InventoryStorage.getInstance().GetItemsOfType(\"Potion\"),\r\n            weaponItems: InventoryStorage.getInstance().GetItemsOfType(\"Weapon\"),\r\n            wondrousItems: InventoryStorage.getInstance().GetItemsOfType(\"Wondrous\"),\r\n        });\r\n    }\r\n\r\n    public constructor(props: IInventoryProps) {\r\n        super(props);\r\n        this.state = {\r\n            armorItems: [],\r\n            potionItems: [],\r\n            weaponItems: [],\r\n            wondrousItems: []\r\n        }\r\n\r\n        // https://stackoverflow.com/questions/43313372/how-to-listen-to-localstorage-in-react-js\r\n        this.handleStorageChange = this.handleStorageChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateFromInventory();\r\n        window.addEventListener(\"storage\", this.handleStorageChange);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <h1>{InventoryStorage.getInstance().CharacterName}</h1>\r\n                <h1>Armor</h1>\r\n                {this.getArmor()}\r\n                <h1>Potions</h1>\r\n                {this.getPotions()}\r\n                <h1>Weapons</h1>\r\n                {this.getWeapons()}\r\n                <h1>Wondrous Items</h1>\r\n                {this.getWondrous()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import './css/LandingSpace.css';\r\n\r\nimport React from 'react';\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport {CharacterCreator} from './CharacterCreator/React/CharacterCreator';\r\nimport {ItemShop} from './Items/React/Shop/ItemShop';\r\nimport {Inventory} from './Items/React/Inventory/Inventory';\r\n\r\ninterface ILandingSpaceProps {\r\n};\r\n\r\ninterface ILandingSpaceState {\r\n};\r\n\r\n// Use the hash router instead of a browser router so that refreshes and direct-links to pages work.\r\n//https://stackoverflow.com/questions/27928372/react-router-urls-dont-work-when-refreshing-or-writing-manually\r\nexport default function LandingSpace() {\r\n    return (\r\n        <div className=\"page-nav\">\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/\" children={<Home />} />\r\n                    <Route path=\"/creatorPage\" children={<CharacterCreator />} />\r\n                    <Route path=\"/itemShop\" children={<ItemShop />} />\r\n                    <Route path=\"/inventory\" children={<Inventory />} />\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className=\"nav-bar\">\r\n            <h1>Here Be Links</h1>\r\n            <h2 className=\"nav-entry\">\r\n                <Link to=\"/creatorPage\">\r\n                    &gt;&gt;&gt; DnD Character Creator &lt;&lt;&lt;\r\n                </Link>\r\n            </h2>\r\n            <h2 className=\"nav-entry\">\r\n                <Link to=\"/itemShop\">\r\n                    &gt;&gt;&gt; DnD Item Shop &lt;&lt;&lt;\r\n                </Link>\r\n            </h2>\r\n            <h2 className=\"nav-entry\">\r\n                <Link to=\"/inventory\">\r\n                    &gt;&gt;&gt; DnD Item Inventory &lt;&lt;&lt;\r\n                </Link>\r\n            </h2>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport LandingSpace from './LandingSpace';\r\n\r\nReactDOM.render(<LandingSpace />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}