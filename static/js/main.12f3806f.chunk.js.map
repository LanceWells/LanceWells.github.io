{"version":3,"sources":["serviceWorker.ts","FirebaseAuth/Enums/AuthState.ts","FirebaseAuth/Classes/UserDataAuth.ts","LoginPage/Enums/LoginState.ts","LoginPage/React/LoginPage.tsx","CharacterImage/Enums/PartType.ts","Routing/React/ProtectedRoute.tsx","CharacterImage/React/PartButton.tsx","CharacterImage/Enums/BodyType.ts","CharacterImage/React/PartTypeSelector.tsx","CharacterImage/React/PartBodySelector.tsx","CharacterImage/Enums/BodyDescription.ts","CharacterImage/React/PartSelector.tsx","CharacterImage/Classes/CharImageLayout.ts","CharacterImage/Classes/CharacterImageMap.ts","CharacterImage/React/CharacterImageCanvas.tsx","CharacterImage/Enums/CharacterSize.ts","CharacterImage/React/CharacterDrawingArea.tsx","FirebaseAuth/Types/PlayerCharacterData.ts","FirebaseAuth/Classes/PlayerInventoryService.ts","FirebaseAuth/Classes/CharacterStateManager.ts","CharacterImage/React/CharacterImage.tsx","Inventory/React/Inventory.tsx","CharacterManager/React/CurrentCharacterStatus.tsx","CharacterManager/React/CharacterSelectionButton.tsx","CharacterManager/React/NewCharacterButton.tsx","CharacterManager/React/CharacterSelector.tsx","CharacterManager/React/NewCharacterForm.tsx","CharacterManager/React/CharacterManager.tsx","Routing/React/LandingSpace.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AuthState","LoginState","UserDataAuth","_authState","salt","_username","this","Checking","BCrypt","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","auth","onAuthStateChanged","HandleAuthStateChanged","bind","uid","currentUser","undefined","Unauthorized","signOut","email","password","loginResponse","DidLogin","Errors","setPersistence","Auth","Persistence","LOCAL","catch","error","errorMessage","message","console","push","signInWithEmailAndPassword","then","passwordDupe","createResponse","DidCreate","passwordHash","length","createUserWithEmailAndPassword","fulfilledValue","log","rejectedValue","Promise","resolve","reject","timeoutWaiting","setTimeout","user","clearTimeout","Authorized","_instance","MaxPasswordLength","PartType","LoginPage","props","currentUsername","currentPassword","currentPassDupe","loginState","CheckingCredentials","GetInstance","CheckForAccess","LoggedIn","state","pageState","errorMessages","granted","setState","Login","onRejected","className","toString","getErrorMessages","GetInternalRenderBits","Username","onClick","submitLogout","CreateAnAccount","action","method","onSubmit","submitCreateAccount","type","name","onChange","handleUsernameInput","handlePasswordInput","handlePassDupeInput","style","display","value","submitBackToLogin","submitLogin","submitGoToCreateAccount","map","e","event","preventDefault","loginPromise","loggedIn","Logout","CreateAccount","onResolve","onReject","input","target","React","Component","ProtectedRoute","routeStatus","GetComponentToRender","path","children","to","PartButton","partSelectionCallback","partType","imageSource","src","width","BodyType","PartTypeSelector","Dropdown","Toggle","id","Menu","GetPartTypes","Object","values","pt","Item","SelectionCallback","BodyDescription","PartBodySelector","GetBodyTypes","bt","PartSelector","bodyTypeSelectionCallback","partTypeSelectionCallback","GetPartButtons","partOptions","po","CharImageLayout","partMap","bodyType","_imageSelection","Map","_bodyType","objString","obj","JSON","parse","imageSelection","image","set","images","PartOrder","forEach","part","EnlistImageIfExists","objectToStringify","Array","from","stringify","has","get","BackAccessory","Body","Bottoms","Shoes","LowerArmor","Tops","UpperArmor","MidAccessory","ArmArmor","HandWear","Hair","FacialWear","HeadWear","Pets","Weapons","Eyes","CharacterImageMap","charSize","CharImageMap","filter","c","CompareParamsToStructItem","flatMap","csi","Images","structItem","doesMatch","validBodyDescriptors","BodyTypeMap","Size","some","vbt","AverageSizedFeminineDefaults","AverageSizedMasculineDefaults","ReptilianFeminineDefaults","ReptilianMasculineDefaults","AverageSizedFeminine","HumanoidFemale","HumanoidAndrogynous","Female","Androgynous","AverageSizedMasculine","HumanoidMale","Male","ReptilianFeminine","ReptilianFemale","ReptilianAndrogynous","ReptilianMasculine","ReptilianMale","CharacterShadowSource","DefaultBodyParts","CharacterImageCanvas","showOnlySpinner","showLoadingSpinner","Spinner","animation","role","visibility","height","canvasHeight","charScaleFactor","canvasWidth","ref","refs","characterEffectsCanvas","toDataURL","charStagingCanvas","characterStagingCanvas","stagingCanvasContext","getContext","charCanvas","characterCanvas","charCanvasContext","effectsCanvasContext","imageSmoothingEnabled","DrawCharacterAndBorder","LoadCharacterImages","DrawCharacterBorder","DrawCharacterWithEffects","imagesToDraw","imagesToRender","loadedImagesPromises","img","index","imageElement","Image","onload","all","clearRect","itd","drawImage","charPartOffset","canvasContext","charImgSrc","char","charImg","i","borderCoordinates","thicknessScale","xCoord","yCoord","globalCompositeOperation","fillStyle","borderColor","fillRect","borderCanvas","effectsCanvas","shadowImgSrc","shadow","shadowImg","charBorderImgSrc","border","charBorderImg","shadowOffset","CharacterSize","CharacterDrawingArea","downloadUrl","onChangeComplete","handleColorChange","color","colors","outlineColorOptions","downloadCallback","fetchDownloadUrl","hex","charImageCanvas","GetDownloadUrl","PlayerCharacterData","copper","items","charLayout","Name","Copper","Items","CharLayout","BorderColor","item","itemJson","PlayerInventoryService","characterData","GetUid","firestore","collection","collection_userWritable","doc","document_playerInventory","withConverter","PlayerCharacterDataConverter","reason","charDataDocument","toFirestore","update","playerName","response","playerDataRef","docSnapshot","exists","data","limit","empty","docs","allCharData","charData","newCharData","charName","localStorage","setItem","storage_currentCharacter","getItem","GetCurrentCharacterName","FetchCharacterData","playerCharacterData","GetItemsAsStringArray","GetJsonString","fromFirestore","snapshot","options","snapshotData","playerCopper","playerItemData","playerCharData","playerBorder","GetLayoutFromString","playerItems","GetStringArrayAsItems","CharacterStateManager","_currentCharacter","GetDefaultCharacter","UpdateCharacterData","CharacterImage","Average","charImageLayout","checkingForCharacterImage","CheckForCharacterImage","imgSource","charImgLayout","SetPartImage","GetCurrentStaticCharacterData","UploadCharacterData","downloadSource","link","document","createElement","download","href","click","imagePaths","GetCharacterImagePaths","charImages","GetImages","handleCanvasDownload","handlePartSelection","handleBodyTypeChange","handlePartTypeChange","Inventory","CurrentCharacterStatus","currentCharacterData","CharacterSelectionButton","characterSelectedCallback","NewCharacterButton","CharacterSelector","showSpinner","isLoading","showNoCharactersMessage","allCharacterData","GetCharacterButtons","newCharacterButtonCallback","NewCharacterForm","currentNewCharName","currentBodyType","isCreating","inputIsValid","validationErrors","validateInput","inputValid","existingCharacterNames","existingName","startingCharBits","charDefaults","CreateCharacterData","onFormSubmission","formBodyOptions","creatingMessage","Modal","show","centered","onHide","onHideModal","Header","Title","errormessage","handleCreateCharacter","handleCharNameInput","disabled","CharacterManager","allCharactersData","showNewCharForm","allCharacterNames","acn","handleHideModal","handleSubmitNewCharForm","handleNewCharButtonClick","handleCharacterSelected","SetCurrentCharacter","FetchAllCharacters","currentCharacter","characterName","find","ChangeStaticCharacterData","LandingSpace","Navbar","expand","bg","Brand","aria-controls","Collapse","Nav","defaultActiveKey","Link","eventKey","exact","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.12f3806f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum AuthState\r\n{\r\n    Authorized = \"Authorized\",\r\n    Unauthorized = \"Unauthorized\",\r\n    Checking = \"Checking\"\r\n}\r\n","import * as BCrypt from 'bcryptjs';\r\nimport firebase from 'firebase';\r\nimport { CreateUserResponse } from '../Types/CreateUserResponse';\r\nimport { LoginResponse } from '../Types/LoginResponse';\r\nimport { AuthState } from '../Enums/AuthState';\r\n\r\n/**\r\n * @description A class used for authorizing user credentials and fetching user data.\r\n */\r\nexport class UserDataAuth {\r\n    /**\r\n     * @description Describes the singleton instance for this class.\r\n     */\r\n    private static _instance: UserDataAuth;\r\n\r\n    /**\r\n     * @description Describes the current authorization state for user authorization.\r\n     */\r\n    private _authState: AuthState;\r\n\r\n    /**\r\n     * @description A salt used for BCrypt encryption whenever evaluating user passwords.\r\n     */\r\n    private salt: string;\r\n\r\n    /**\r\n     * @description The user's username that is being stored after authorizing user credentials.\r\n     */\r\n    private _username: string = \"\";\r\n\r\n    /**\r\n     * @description The maximum length of allowed passwords.\r\n     */\r\n    public static readonly MaxPasswordLength = 60;\r\n\r\n    /**\r\n     * @description Gets the username for the current logged-in user. This is not the name of the character,\r\n     * but instead the e-mail address associated with this user's account.\r\n     */\r\n    public get Username(): string {\r\n        return this._username;\r\n    }\r\n\r\n    /**\r\n     * @description Gets the UID for the current user. This is the user's identification number. This is used\r\n     * to index a large amount of user storage.\r\n     */\r\n    public GetUid(): string | undefined {\r\n        let uid = firebase.auth().currentUser?.uid;\r\n        if (!uid) {\r\n            uid = undefined;\r\n        }\r\n        return uid;\r\n    }\r\n\r\n    /**\r\n     * @description Logs out from any current user instances.\r\n     */\r\n    public Logout(): void {\r\n        this._authState = AuthState.Unauthorized;\r\n        firebase.auth().signOut();\r\n    }\r\n\r\n    /**\r\n     * @description Logs into a user instance using an email-password combination.\r\n     * @param email The email of the user to login.\r\n     * @param password The password of the user to login.\r\n     */\r\n    public async Login(email: string, password: string): Promise<LoginResponse> {\r\n        let loginResponse: LoginResponse = {\r\n            DidLogin: false,\r\n            Errors: []\r\n        };\r\n\r\n        await firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\r\n            .catch(function (error) {\r\n                let errorMessage = error.message;\r\n                console.error(errorMessage);\r\n                loginResponse.Errors.push(errorMessage);\r\n            });\r\n\r\n        await firebase.auth().signInWithEmailAndPassword(email, password)\r\n            .then(() =>\r\n                loginResponse.DidLogin = true\r\n            )\r\n            .catch((error) => {\r\n                let errorMessage = error.message;\r\n                console.error(errorMessage);\r\n                loginResponse.Errors.push(errorMessage);\r\n            });\r\n\r\n        return loginResponse;\r\n    }\r\n\r\n    /**\r\n     * @description Creates a new user asynchronously.\r\n     * @param email The email of the new user to create.\r\n     * @param password The password for the new user.\r\n     * @param passwordDupe A duplicate of the password that the user has provided.\r\n     */\r\n    public async CreateAccount(email: string, password: string, passwordDupe: string): Promise<CreateUserResponse> {\r\n        let createResponse: CreateUserResponse = {\r\n            DidCreate: false,\r\n            Errors: []\r\n        };\r\n\r\n        // This may be a little overkill, but don't compare plaintext passwords, use something more robust\r\n        // like BCrypt to compare.\r\n        let passwordHash: string = BCrypt.hashSync(password, this.salt);\r\n        let passwordsMatch: boolean = BCrypt.compareSync(passwordDupe, passwordHash);\r\n\r\n        // Validate that the passwords match.\r\n        if (!passwordsMatch) {\r\n            createResponse.Errors.push(\"Your passwords did not match.\");\r\n        }\r\n\r\n        if (password.length < 6) {\r\n            createResponse.Errors.push(\"Passwords must be at least 6 characters long.\");\r\n        }\r\n\r\n        if (createResponse.Errors.length <= 0) {\r\n            await firebase.auth().createUserWithEmailAndPassword(email, password).then(\r\n                fulfilledValue => {\r\n                    createResponse.DidCreate = true;\r\n                    console.log(fulfilledValue);\r\n                }\r\n                , rejectedValue => {\r\n                    console.error(rejectedValue);\r\n                    createResponse.Errors.push(rejectedValue.message);\r\n                });\r\n        }\r\n\r\n        if (!createResponse.DidCreate) {\r\n            createResponse.Errors.push(\"There was a problem when creating this account. Please try again.\");\r\n        }\r\n\r\n        return createResponse;\r\n    }\r\n\r\n    /**\r\n     * @description Checks for access being granted to the user.\r\n     */\r\n    public async CheckForAccess(): Promise<boolean> {\r\n        if (this._authState == AuthState.Checking) {\r\n            await new Promise<void>((resolve, reject) => {\r\n                // Reject the promise if we wait > X seconds before getting a response.\r\n                let timeoutWaiting = setTimeout(() => reject(), 10000);\r\n\r\n                firebase.auth().onAuthStateChanged((user) => {\r\n                    // If we got an answer, don't reject.\r\n                    window.clearTimeout(timeoutWaiting);\r\n                    resolve();\r\n                });\r\n            });\r\n        }\r\n\r\n        return this._authState === AuthState.Authorized;\r\n    }\r\n\r\n    /**\r\n     * @description Gets the singleton instance of this object.\r\n     */\r\n    public static GetInstance(): UserDataAuth {\r\n        if (!UserDataAuth._instance) {\r\n            UserDataAuth._instance = new UserDataAuth();\r\n        }\r\n\r\n        return this._instance;\r\n    }\r\n\r\n    /**\r\n     * @description Creates a new instance of this object.\r\n     */\r\n    private constructor() {\r\n        this._authState = AuthState.Checking;\r\n        this.salt = BCrypt.genSaltSync();\r\n\r\n        // Your web app's Firebase configuration\r\n        let firebaseConfig = {\r\n            apiKey: \"AIzaSyD-s5zfMiZavJc8J0qsCVIpzSysbaRG7kU\",\r\n            authDomain: \"test-project-a4c30.firebaseapp.com\",\r\n            databaseURL: \"https://test-project-a4c30.firebaseio.com\",\r\n            projectId: \"test-project-a4c30\",\r\n            storageBucket: \"test-project-a4c30.appspot.com\",\r\n            messagingSenderId: \"553146248685\",\r\n            appId: \"1:553146248685:web:b24bdb19f4a400f3550be4\",\r\n            measurementId: \"G-Y6PMKS1PHP\"\r\n        };\r\n\r\n        // Initialize Firebase\r\n        firebase.initializeApp(firebaseConfig);\r\n        firebase.analytics()\r\n\r\n        // Add a listener for auth state changing.\r\n        firebase.auth().onAuthStateChanged(this.HandleAuthStateChanged.bind(this));\r\n    }\r\n\r\n\r\n    /**\r\n     * @description Handles the user's authorization state changing.\r\n     * @param user The user that was logged in, or null if the user was logged out.\r\n     */\r\n    private HandleAuthStateChanged(user: firebase.User | null): void {\r\n        if (user) {\r\n            this._authState = AuthState.Authorized;\r\n            console.log(\"User \" + user.uid + \" has logged in.\")\r\n\r\n            let email = firebase.auth().currentUser?.email;\r\n            if (email && email !== undefined) {\r\n                this._username = email;\r\n            }\r\n        }\r\n        else {\r\n            // This means that either the auth has initialized, or that someone has logged out.\r\n            this._authState = AuthState.Unauthorized;\r\n            console.log(\"User has logged out.\")\r\n        }\r\n    }\r\n}\r\n","export enum LoginState {\r\n    CheckingCredentials = \"Checking Credentials\",\r\n    Login = \"Login\",\r\n    LoggingIn = \"Logging In\",\r\n    LoggedIn = \"Logged In\",\r\n    LoggingOut = \"Logged Out\",\r\n    CreateAnAccount = \"Create An Account\"\r\n}\r\n","import React, { FormEvent, ChangeEvent } from 'react';\r\nimport '../LoginPage.css'\r\nimport { UserDataAuth } from '../../FirebaseAuth/Classes/UserDataAuth';\r\nimport { CreateUserResponse } from '../../FirebaseAuth/Types/CreateUserResponse';\r\nimport { LoginResponse } from '../../FirebaseAuth/Types/LoginResponse';\r\nimport { LoginState } from '../Enums/LoginState';\r\nimport { PlayerInventoryService } from '../../FirebaseAuth/Classes/PlayerInventoryService';\r\nimport { PlayerCharacterData } from '../../FirebaseAuth/Types/PlayerCharacterData';\r\nimport { CharImageLayout } from '../../CharacterImage/Classes/CharImageLayout';\r\nimport { BodyType } from '../../CharacterImage/Enums/BodyType';\r\n\r\n/**\r\n * @description A series of properties to use to render this component.\r\n */\r\ninterface ILoginPageProps {\r\n};\r\n\r\n/**\r\n * @description An object used to maintain the internal state of this object.\r\n * @param pageState A stateful viariable used to keep track of what to display/provide as options.\r\n * @param errorMessages A set of error messages to display to the user.\r\n */\r\ninterface ILoginPageState {\r\n    pageState: LoginState;\r\n    errorMessages: string[];\r\n}\r\n\r\n/**\r\n * @description The login and account-creation form for this site.\r\n */\r\nexport class LoginPage extends React.Component<ILoginPageProps, ILoginPageState> {\r\n    private currentUsername: string;\r\n    private currentPassword: string;\r\n    private currentPassDupe: string;\r\n\r\n    /**\r\n     * Creates a new instance of this object.\r\n     * @param props The series of properties passed in as input for this component.\r\n     */\r\n    public constructor(props: ILoginPageProps) {\r\n        super(props);\r\n\r\n        this.currentUsername = \"\";\r\n        this.currentPassword = \"\";\r\n        this.currentPassDupe = \"\";\r\n\r\n        let loginState: LoginState = LoginState.CheckingCredentials;\r\n        if (UserDataAuth.GetInstance().CheckForAccess()) {\r\n            loginState = LoginState.LoggedIn;\r\n        }\r\n\r\n        this.state = {\r\n            pageState: loginState,\r\n            errorMessages: []\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Fired immediately after this component has mounted. This is used to update the component\r\n     * to reflect whether the user has logged in using stored credentials.\r\n     */\r\n    public componentDidMount() {\r\n        UserDataAuth.GetInstance().CheckForAccess().then(granted => {\r\n            if (granted) {\r\n                this.setState({\r\n                    pageState: LoginState.LoggedIn\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    pageState: LoginState.Login\r\n                })\r\n            }\r\n        }, onRejected => {\r\n            console.error(\"Rejected login:\" + onRejected);\r\n            this.setState({\r\n                pageState: LoginState.Login\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @description Renders thi object.\r\n     */\r\n    public render() {\r\n        return (\r\n            <div className=\"login-container\">\r\n                <div className=\"login-dialog\">\r\n                    <h2 className=\"login-header\">\r\n                        {this.state.pageState.toString()}\r\n                    </h2>\r\n                    <div className=\"login-error-messages\">\r\n                        {this.getErrorMessages()}\r\n                    </div>\r\n                    {this.GetInternalRenderBits()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @description Renders the internal bits that change depending on the state of this component.\r\n     */\r\n    private GetInternalRenderBits(): JSX.Element {\r\n        switch (this.state.pageState) {\r\n            case LoginState.LoggedIn: {\r\n                return (\r\n                    <div>\r\n                        <h3>You are logged in as {UserDataAuth.GetInstance().Username}</h3>\r\n                        <br /><br />\r\n                        <div className=\"login-button-container\">\r\n                            <button className=\"login-button\" onClick={this.submitLogout.bind(this)}>\r\n                                Log Out\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            case LoginState.CreateAnAccount: {\r\n                return (\r\n                    <div>\r\n                        <form className=\"login-form\" action=\"/\" method=\"POST\" onSubmit={this.submitCreateAccount.bind(this)}>\r\n                            <br /> <br />\r\n                            <span>Email:</span>\r\n                            <br />\r\n                            <input type=\"text\" name=\"email\" onChange={this.handleUsernameInput.bind(this)} />\r\n                            <br /> <br />\r\n                            <span>Password:</span>\r\n                            <br />\r\n                            <input type=\"password\" name=\"password\" onChange={this.handlePasswordInput.bind(this)} />\r\n                            <br /> <br />\r\n                            <span>Password (Again!):</span>\r\n                            <br />\r\n                            <input type=\"password\" name=\"passwordDupe\" onChange={this.handlePassDupeInput.bind(this)} />\r\n                            <br /> <br />\r\n                            <input\r\n                                className=\"login-button\"\r\n                                type=\"submit\"\r\n                                style={{ display: \"initial\" }}\r\n                                value=\"Create Account\" />\r\n                        </form>\r\n                        <div className=\"login-button-container\">\r\n                            <button\r\n                                className=\"login-button\"\r\n                                onClick={this.submitBackToLogin.bind(this)}>\r\n                                Back To Login\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            case LoginState.CheckingCredentials: {\r\n                return (\r\n                    <div>\r\n                        <h2>Checking login credentials . . . </h2>\r\n                    </div>\r\n                )\r\n            }\r\n            case LoginState.Login:\r\n            default: {\r\n                return (\r\n                    <div>\r\n                        <form className=\"login-form\" action=\"/\" method=\"POST\" onSubmit={this.submitLogin.bind(this)}>\r\n                            <br /> <br />\r\n                            <span>Email:</span>\r\n                            <br />\r\n                            <input type=\"text\" name=\"email\" onChange={this.handleUsernameInput.bind(this)} />\r\n                            <br /> <br />\r\n                            <span>Password:</span>\r\n                            <br />\r\n                            <input type=\"password\" name=\"password\" onChange={this.handlePasswordInput.bind(this)} />\r\n                            <br /> <br />\r\n                            <input\r\n                                className=\"login-button\"\r\n                                style={{ display: \"initial\" }}\r\n                                type=\"submit\"\r\n                                value=\"Log In\" />\r\n                        </form>\r\n                        <div className=\"login-button-container\">\r\n                            <button\r\n                                className=\"login-button\"\r\n                                onClick={this.submitGoToCreateAccount.bind(this)}>\r\n                                Create An Account\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Gets a series of error messages to render from the current state.\r\n     */\r\n    private getErrorMessages(): JSX.Element[] {\r\n        return (\r\n            this.state.errorMessages.map(e => {\r\n                return (\r\n                    <p>{e}</p>\r\n                )\r\n            })\r\n        )\r\n    }\r\n\r\n    /**\r\n     * @description Handles the click event for the 'submit' button when the user is logging in.\r\n     * @param event The event to handle when the user presses, \"Login\".\r\n     */\r\n    private submitLogin(event: FormEvent<HTMLFormElement>) {\r\n        // By default, this causes the page to refresh which we DO NOT WANT. This happens because the provided\r\n        // form looks to browsers like a standard login form.\r\n        event.preventDefault();\r\n\r\n        // Attempt to log in using UserDataAuth.\r\n        let loginPromise: Promise<LoginResponse> = UserDataAuth.GetInstance().Login(this.currentUsername, this.currentPassword);\r\n\r\n        this.setState({\r\n            pageState: LoginState.CheckingCredentials\r\n        });\r\n\r\n        loginPromise.then(\r\n            loggedIn => {\r\n                if (loggedIn.DidLogin) {\r\n                    this.setState({\r\n                        pageState: LoginState.LoggedIn\r\n                    });\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        errorMessages: [\"That username and password was not valid. Please try again.\"]\r\n                    });\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    /**\r\n     * @description Handles when the user selects the \"Logout\" button.\r\n     */\r\n    private submitLogout() {\r\n        // Logout from the user data auth.\r\n        UserDataAuth.GetInstance().Logout();\r\n\r\n        // Set page state to LoggingOut, which should redirect to the home page.\r\n        this.setState({\r\n            pageState: LoginState.Login\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Handles when the user selects the \"Create an account\" button.\r\n     * @param event The event arguments provided when a user creates an account.\r\n     */\r\n    private submitCreateAccount(event: FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n\r\n        let response: Promise<CreateUserResponse> = UserDataAuth.GetInstance().CreateAccount(\r\n            this.currentUsername,\r\n            this.currentPassword,\r\n            this.currentPassDupe);\r\n\r\n        response.then(\r\n            onResolve => {\r\n                // Always set the error list to whatever we got. This way it clears when we have no errors.\r\n                this.setState({\r\n                    errorMessages: onResolve.Errors\r\n                });\r\n\r\n                if (onResolve.DidCreate) {\r\n                    this.setState({\r\n                        pageState: LoginState.LoggedIn\r\n                    });\r\n                }\r\n            }, onReject => {\r\n                console.error(\"Failed to create a user account.\" + onReject);\r\n            }\r\n        )\r\n    }\r\n\r\n    /**\r\n     * @description Handles the click event when a user goes to the 'Create An Account' button.\r\n     */\r\n    private submitGoToCreateAccount() {\r\n        this.setState({\r\n            pageState: LoginState.CreateAnAccount\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Handles when a user selects the \"Back To Login\" button.\r\n     */\r\n    private submitBackToLogin() {\r\n        this.setState({\r\n            pageState: LoginState.Login\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Handles when the user types/provides input into the username field.\r\n     * @param event The event arguments provided when the user is changing the username field.\r\n     */\r\n    private handleUsernameInput(event: ChangeEvent<HTMLInputElement>) {\r\n        let input = event.target?.value;\r\n        if (input !== null) {\r\n            this.currentUsername = input;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Handles when the user types/provides input into the password field.\r\n     * @param event The event arguments provided when the user is changing the field.\r\n     */\r\n    private handlePasswordInput(event: ChangeEvent<HTMLInputElement>) {\r\n        let input = event.target?.value;\r\n        if (input !== null) {\r\n            this.currentPassword = input;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Handles when the user types/provides input into the password verification field.\r\n     * @param event The event arguments provided when the user is changing the field.\r\n     */\r\n    private handlePassDupeInput(event: ChangeEvent<HTMLInputElement>) {\r\n        let input = event.target?.value;\r\n        if (input !== null) {\r\n            this.currentPassDupe = input;\r\n        }\r\n    }\r\n}\r\n","export enum PartType\r\n{\r\n    BackAccessory = 'Back Accessory',\r\n    Body = 'Body',\r\n    Bottoms = 'Bottoms',\r\n    Shoes = 'Shoes',\r\n    LowerArmor = 'Lower Armor',\r\n    Tops = 'Tops',\r\n    UpperArmor = 'Upper Armor',\r\n    MidAccessory = 'Mid Accessory',\r\n    ArmArmor = 'Arm Armor',\r\n    HandWear = 'Hand Wear',\r\n    Hair = 'Hair',\r\n    FacialWear = 'Facial Wear',\r\n    HeadWear = 'Head Wear',\r\n    Pets = 'Pets',\r\n    Weapons = 'Weapons',\r\n    Eyes = 'Eyes'\r\n}","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { UserDataAuth } from '../../FirebaseAuth/Classes/UserDataAuth';\r\n\r\nexport interface IProtectedRouteState {\r\n    routeStatus: TRouteCheckStatus;\r\n}\r\n\r\nexport interface IProtectedRouteProps {\r\n    children: JSX.Element,\r\n    path: string\r\n}\r\n\r\ntype TRouteCheckStatus = \"Granted\" | \"Redirect\" | \"Checking\"\r\n\r\n// https://reacttraining.com/react-router/web/example/auth-workflow\r\n// https://tylermcginnis.com/react-router-protected-routes-authentication/\r\nexport class ProtectedRoute extends React.Component<IProtectedRouteProps, IProtectedRouteState> {\r\n    public constructor(props: IProtectedRouteProps) {\r\n        super(props);\r\n        this.state = {\r\n            routeStatus: \"Checking\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.GetComponentToRender();\r\n    }\r\n\r\n    private GetComponentToRender(): void {\r\n        UserDataAuth.GetInstance().CheckForAccess().then(granted => {\r\n            if (granted) {\r\n                this.setState({\r\n                    routeStatus: \"Granted\"\r\n                });\r\n            }\r\n            else {\r\n                this.setState({\r\n                    routeStatus: \"Redirect\"\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n    public render() {\r\n        switch(this.state.routeStatus) {\r\n            case \"Granted\": {\r\n                return (\r\n                    <Route path={this.props.path} children={this.props.children} />\r\n                );\r\n            }\r\n            case \"Redirect\": {\r\n                return (\r\n                    <Redirect to='/login' />\r\n                );\r\n            }\r\n            case \"Checking\":\r\n            default: {\r\n                return (\r\n                    <div>\r\n                        <h2>Checking user authorization . . .</h2>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { PartSelectionCallback } from '../Types/PartSelectionCallback';\r\nimport { PartType } from '../Enums/PartType';\r\n\r\n/**\r\n * @description The properties for this component.\r\n * @param partType The type of part that is represented by this button.\r\n * @param imageSource The source for the iamge that is represented by this button.\r\n * @param partSelectionCallback The callback when this button is clicked.\r\n */\r\nexport interface IPartButtonProps {\r\n    partType: PartType;\r\n    imageSource: string;\r\n    partSelectionCallback: PartSelectionCallback;\r\n};\r\n\r\n/**\r\n * A constant that represents the size of the button/image that is represented here.\r\n */\r\nconst imgSize: string = \"128px\";\r\n\r\n/**\r\n * A component used to represent an individual option for a character part.\r\n * @param props \r\n */\r\nexport function PartButton(props: IPartButtonProps) {\r\n    return (\r\n        <button\r\n            className=\"part-button\"\r\n            onClick={() => props.partSelectionCallback(props.partType, props.imageSource)}>\r\n            <img\r\n                className=\"part-button-image\"\r\n                src={props.imageSource}\r\n                width={imgSize}\r\n            />\r\n        </button>\r\n    )\r\n}\r\n","export enum BodyType {\r\n    AverageSizedFeminine = \"Average-Sized Feminine\",\r\n    AverageSizedMasculine = \"Average-Sized Masculine\",\r\n    ReptilianFeminine = \"Reptilian Feminine\",\r\n    ReptilianMasculine = \"Reptilian Masculine\",\r\n}","import React from 'react';\r\nimport { PartType } from '../Enums/PartType';\r\nimport { PartTypeSelectionCallback } from '../Types/PartTypeSelectionCallback';\r\nimport { Dropdown } from 'react-bootstrap';\r\n\r\n/**\r\n * @description The properties provided to this component.\r\n * @param SelectionCallback The function to be called when a part type is selected from the dropdown.\r\n */\r\nexport interface IPartTypeSelectorProps {\r\n    SelectionCallback: PartTypeSelectionCallback;\r\n};\r\n\r\n/**\r\n * @description The state maintained by this component.\r\n */\r\nexport interface IPartTypeSelectorState {\r\n};\r\n\r\n/**\r\n * @description The part-type selector. This lets the character creator switch between part types.\r\n */\r\nexport class PartTypeSelector extends React.Component<IPartTypeSelectorProps, IPartTypeSelectorState> {\r\n    /**\r\n     * @description Creates a new isntance of this component.\r\n     * @param props The provided properties for this class.\r\n     */\r\n    constructor(props: IPartTypeSelectorProps) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n    /**\r\n     * @description Renders this component.\r\n     */\r\n    public render() {\r\n        return (\r\n            <Dropdown\r\n                className=\"part-type-selector\">\r\n                <Dropdown.Toggle id=\"part-dropdown\">\r\n                    Part Type Selection\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                    {this.GetPartTypes()}\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    private GetPartTypes(): JSX.Element[] {\r\n        return Object.values(PartType).map(pt => {\r\n            let itemClickCallback = () => {this.props.SelectionCallback(pt)};\r\n\r\n            return (\r\n                <Dropdown.Item\r\n                    onClick={itemClickCallback.bind(this)}>\r\n                    {pt.toString()}\r\n                </Dropdown.Item>\r\n            )\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Dropdown } from 'react-bootstrap';\r\nimport { BodyType } from '../Enums/BodyType';\r\nimport { BodyTypeSelectionCallback } from '../Types/BodyTypeSelectionCallback';\r\n\r\n/**\r\n * @description The properties provided to this component.\r\n * @param SelectionCallback The function to be called when a body type is selected from the dropdown.\r\n */\r\nexport interface IPartBodySelectorProps {\r\n    SelectionCallback: BodyTypeSelectionCallback;\r\n}\r\n\r\n/**\r\n * @description The state maintained by this component.\r\n */\r\nexport interface IPartBodySelectorState {\r\n}\r\n\r\n/**\r\n * @description The body-type selector. This lets the character creator switch between body types.\r\n */\r\nexport class PartBodySelector extends React.Component<IPartBodySelectorProps, IPartBodySelectorState> {\r\n    /**\r\n     * @description Creates a new isntance of this component.\r\n     * @param props The provided properties for this class.\r\n     */\r\n    constructor(props: IPartBodySelectorProps) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Renders this component.\r\n     */\r\n    public render() {\r\n        return (\r\n            <Dropdown>\r\n                <Dropdown.Toggle id=\"body-dropdown\">\r\n                    Body Type Selection\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                    {this.GetBodyTypes()}\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    private GetBodyTypes(): JSX.Element[] {\r\n        return Object.values(BodyType).map(bt => {\r\n            let itemClickCallback = () => {this.props.SelectionCallback(bt)};\r\n\r\n            return (\r\n                <Dropdown.Item\r\n                    onClick={itemClickCallback.bind(this)}>\r\n                    {bt.toString()}\r\n                </Dropdown.Item>\r\n            )\r\n        })\r\n    }\r\n}\r\n","export enum BodyDescription\r\n{\r\n    Androgynous = 'Androgynous',\r\n    Female = 'Female',\r\n    Male = 'Male',\r\n\r\n    HumanoidAndrogynous = 'Humanoid_Androgynous',\r\n    HumanoidFemale = 'Humanoid_Female',\r\n    HumanoidMale = 'Humanoid_Male',\r\n\r\n    ReptilianAndrogynous = 'Reptilian_Androgynous',\r\n    ReptilianFemale = 'Reptilian_Female',\r\n    ReptilianMale = 'Reptilian_Male',\r\n}","import React from 'react';\r\n\r\nimport { PartButton } from './PartButton';\r\nimport { PartTypeSelector } from './PartTypeSelector';\r\nimport { PartBodySelector } from './PartBodySelector';\r\n\r\nimport { PartType } from '../Enums/PartType';\r\nimport { PartTypeSelectionCallback } from '../Types/PartTypeSelectionCallback';\r\nimport { BodyTypeSelectionCallback } from '../Types/BodyTypeSelectionCallback';\r\nimport { PartSelectionCallback } from '../Types/PartSelectionCallback';\r\n\r\n/**\r\n * @description The properties provided to this component.\r\n * @param partType The part type whose buttons are displayed in in this component at present.\r\n * @param partOptions The list of image sources that are displayed as options.\r\n * @param partTypeSelectionCallback A callback when a part type has been selected.\r\n * @param bodyTypeSelectionCallback A callback when a body type has been selected.\r\n * @param partSelectionCallback A callback when the type of part represented as an option changes.\r\n */\r\nexport interface IPartSelectorProps {\r\n    partType: PartType;\r\n    partOptions: string[];\r\n    partTypeSelectionCallback: PartTypeSelectionCallback;\r\n    bodyTypeSelectionCallback: BodyTypeSelectionCallback;\r\n    partSelectionCallback: PartSelectionCallback;\r\n};\r\n\r\n/**\r\n * @description The state maintained by this component.\r\n */\r\nexport interface IPartSelectorState {\r\n};\r\n\r\n/**\r\n * @description The part selector for the character creator. This provides compnonents to switch body types,\r\n * part types, and parts.\r\n */\r\nexport class PartSelector extends React.Component<IPartSelectorProps, IPartSelectorState> {\r\n    /**\r\n     * @description Creates a new isntance of this component.\r\n     * @param props The provided properties for this class.\r\n     */\r\n    constructor(props: IPartSelectorProps) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n    /**\r\n     * @description Renders this component.\r\n     */\r\n    public render() {\r\n        return (\r\n            <div className=\"part-selector\">\r\n                <div className=\"part-character-selectors\">\r\n                    <PartBodySelector\r\n                        SelectionCallback={this.props.bodyTypeSelectionCallback}\r\n                    />\r\n                    <PartTypeSelector\r\n                        SelectionCallback={this.props.partTypeSelectionCallback}\r\n                    />\r\n                </div>\r\n                <div className=\"part-selector-buttons\">\r\n                    {this.GetPartButtons()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private GetPartButtons(): JSX.Element[] {\r\n        return this.props.partOptions.map(po => \r\n            <PartButton\r\n                partType={this.props.partType}\r\n                imageSource={po}\r\n                partSelectionCallback={this.props.partSelectionCallback}\r\n            />\r\n        );\r\n    }\r\n}\r\n","import { PartType } from '../Enums/PartType';\r\nimport { BodyType } from '../Enums/BodyType';\r\n\r\ntype CharImageObject = {\r\n    imageSelection: [PartType, string][],\r\n    bodyType: BodyType\r\n}\r\n\r\n/**\r\n * A structure used to gather information about a character visually, then a means to fetch that character\r\n * data as an organized list of images.\r\n */\r\nexport class CharImageLayout {\r\n    public static GetLayoutFromString(objString: string) {\r\n        let obj: CharImageObject = JSON.parse(objString) as CharImageObject;\r\n        let partMap: Map<PartType, string> = new Map(obj.imageSelection);\r\n        let charLayout: CharImageLayout = new CharImageLayout(partMap, obj.bodyType);\r\n\r\n        return charLayout;\r\n    }\r\n\r\n    /**\r\n     * @description A list of all parts that are available as options for the user to select. This also \r\n     * determines the order in which parts will be rendered, from back-to-front, read top-to-bottom.\r\n     */\r\n    public static readonly PartOrder: PartType[] = [\r\n        PartType.BackAccessory,\r\n        PartType.Body,\r\n        PartType.Bottoms,\r\n        PartType.Shoes,\r\n        PartType.LowerArmor,\r\n        PartType.Tops,\r\n        PartType.UpperArmor,\r\n        PartType.MidAccessory,\r\n        PartType.ArmArmor,\r\n        PartType.HandWear,\r\n        PartType.Hair,\r\n        PartType.FacialWear,\r\n        PartType.HeadWear,\r\n        PartType.Pets,\r\n        PartType.Weapons,\r\n        PartType.Eyes\r\n    ];\r\n\r\n    private _imageSelection: Map<PartType, string> = new Map();\r\n    private _bodyType: BodyType;\r\n\r\n    public get ImageSelection(): Map<PartType, string> {\r\n        return this._imageSelection;\r\n    }\r\n\r\n    public get BodyType(): BodyType {\r\n        return this._bodyType;\r\n    }\r\n\r\n    /**\r\n     * @description Gets a new instance of this object.\r\n     * @param partMap A map of part types to their respective strings. This may be an empty list.\r\n     */\r\n    public constructor(partMap: Map<PartType, string>, bodyType: BodyType) {\r\n        this._bodyType = bodyType;\r\n        this._imageSelection = partMap;\r\n    }\r\n\r\n    /**\r\n     * @description Sets the part type to the provided image.\r\n     * @param partType The part type to set.\r\n     * @param image The image source to set.\r\n     */\r\n    public SetPartImage(partType: PartType, image: string): void {\r\n        this._imageSelection.set(partType, image);\r\n    }\r\n\r\n    /**\r\n     * @description Resets this image's parts to an empty list.\r\n     */\r\n    public ResetImage(): void {\r\n        this._imageSelection = new Map();\r\n    }\r\n\r\n    /**\r\n     * @description Get a list of image sources, in-order.\r\n     */\r\n    public GetImages(): string[] {\r\n        let images: string[] = [];\r\n        \r\n        CharImageLayout.PartOrder.forEach(part => {\r\n            this.EnlistImageIfExists(images, part);\r\n        });\r\n\r\n        return images;\r\n    }\r\n\r\n    public GetJsonString(): string {\r\n        let images: [PartType, string][] = Array.from(this._imageSelection);\r\n        let objectToStringify: CharImageObject = {\r\n            imageSelection: images,\r\n            bodyType: this._bodyType\r\n        }\r\n\r\n        let objString: string = JSON.stringify(objectToStringify);\r\n        return objString;\r\n    }\r\n\r\n    /**\r\n     * @description Adds the specified image by-part-type to the array if it exists in the @see ImageSelection\r\n     * map.\r\n     * @param images An output list of images, passed by-reference. This should be empty when first called.\r\n     * @param partType The type of part to check-for and add to the list if it does.\r\n     */\r\n    private EnlistImageIfExists(images: string[], partType: PartType) {\r\n        if (this._imageSelection.has(partType)) {\r\n            let image: string\r\n            image = this._imageSelection.get(partType) as string;\r\n            images.push(image);\r\n        }\r\n    }\r\n}\r\n","import CharImageMap from './CharImageStruct.json';\r\nimport { CharacterSize } from '../Enums/CharacterSize';\r\nimport { BodyType } from '../Enums/BodyType';\r\nimport { PartType } from '../Enums/PartType';\r\nimport { CharImageStructItem } from '../Types/CharImageStructItem';\r\nimport { BodyDescription } from '../Enums/BodyDescription';\r\nimport { CharImageLayout } from './CharImageLayout';\r\n\r\n/**\r\n * @description A singleton-like class used to reference constants in the character parts, body types, etc.\r\n */\r\nexport class CharacterImageMap\r\n{\r\n    /**\r\n     * @description The default images to display when a user selects the \"Average-Sized Feminine\" body type.\r\n     */\r\n    private static AverageSizedFeminineDefaults: Map<PartType, string> = new Map<PartType, string>([\r\n        [\r\n            PartType.Eyes,\r\n            \"./images/Character_Image_Defaults/Average-Sized Feminine/Eyes.png\"\r\n        ],\r\n        [\r\n            PartType.Body,\r\n            \"./images/Character_Image_Defaults/Average-Sized Feminine/Body.png\"\r\n        ]\r\n    ]);\r\n\r\n    /**\r\n     * @description The default images to display when a user selects the \"Average-Sized Masculine\" body type.\r\n     */\r\n    private static AverageSizedMasculineDefaults: Map<PartType, string> = new Map<PartType, string>([\r\n        [\r\n            PartType.Eyes,\r\n            \"./images/Character_Image_Defaults/Average-Sized Masculine/Eyes.png\"\r\n        ],\r\n        [\r\n            PartType.Body,\r\n            \"./images/Character_Image_Defaults/Average-Sized Masculine/Body.png\"\r\n        ]\r\n    ]);\r\n    \r\n    /**\r\n     * @description The default images to display when a user selects the \"Reptilian Feminine\" body type.\r\n     */\r\n    private static ReptilianFeminineDefaults: Map<PartType, string> = new Map<PartType, string>([\r\n        [\r\n            PartType.Eyes,\r\n            \"./images/Character_Image_Defaults/Reptilian Feminine/Eyes.png\"\r\n        ],\r\n        [\r\n            PartType.Body,\r\n            \"./images/Character_Image_Defaults/Reptilian Feminine/Body.png\"\r\n        ]\r\n    ]);\r\n\r\n    /**\r\n     * @description The default images to display when a user selects the \"Reptilian Masculine\" body type.\r\n     */\r\n    private static ReptilianMasculineDefaults: Map<PartType, string> = new Map<PartType, string>([\r\n        [\r\n            PartType.Eyes,\r\n            \"./images/Character_Image_Defaults/Reptilian Masculine/Eyes.png\"\r\n        ],\r\n        [\r\n            PartType.Body,\r\n            \"./images/Character_Image_Defaults/Reptilian Masculine/Body.png\"\r\n        ]\r\n    ]);\r\n\r\n    /**\r\n     * @description A map of body types to their respective valid part-type categories. For example, the\r\n     * \"average-sized feminine\" body type can use parts from the, \"humanoid female\", \"humanoid androgynous\",\r\n     * \"female\", and \"androgynous\" categories.\r\n     */\r\n    private static BodyTypeMap: Map<BodyType, BodyDescription[]> = new Map<BodyType, BodyDescription[]>(\r\n        [\r\n            [\r\n                BodyType.AverageSizedFeminine,\r\n                [\r\n                    BodyDescription.HumanoidFemale,\r\n                    BodyDescription.HumanoidAndrogynous,\r\n                    BodyDescription.Female,\r\n                    BodyDescription.Androgynous,\r\n                ]\r\n            ],\r\n            [\r\n                BodyType.AverageSizedMasculine,\r\n                [\r\n                    BodyDescription.HumanoidMale,\r\n                    BodyDescription.HumanoidAndrogynous,\r\n                    BodyDescription.Male,\r\n                    BodyDescription.Androgynous,\r\n                ]\r\n            ],\r\n            [\r\n                BodyType.ReptilianFeminine,\r\n                [\r\n                    BodyDescription.ReptilianFemale,\r\n                    BodyDescription.ReptilianAndrogynous,\r\n                    BodyDescription.Female,\r\n                    BodyDescription.Androgynous,\r\n                ]\r\n            ],\r\n            [\r\n                BodyType.ReptilianMasculine,\r\n                [\r\n                    BodyDescription.ReptilianMale,\r\n                    BodyDescription.ReptilianAndrogynous,\r\n                    BodyDescription.Male,\r\n                    BodyDescription.Androgynous,\r\n                ]\r\n            ],\r\n        ]\r\n    );\r\n\r\n    /**\r\n     * @description The image source for the shadow for the character.\r\n     */\r\n    public static CharacterShadowSource: string = \"./images/Character_Image_Details/CharacterShadow.png\"\r\n\r\n    /**\r\n     * @description Gets the list of valid character images for a given series of body type categories.\r\n     * @param charSize The size of the character to get images for.\r\n     * @param bodyType The type of body to get the images for.\r\n     * @param partType The part type to get images for.\r\n     */\r\n    public static GetCharacterImagePaths(charSize: CharacterSize, bodyType: BodyType, partType: PartType): string[]\r\n    {\r\n        let charStructItems: CharImageStructItem[] =  CharImageMap.filter(c =>\r\n            CharacterImageMap.CompareParamsToStructItem(c, charSize, bodyType, partType));\r\n\r\n        let charImages: string[] = charStructItems.flatMap(csi => csi.Images);\r\n\r\n        return charImages;\r\n    }\r\n\r\n    /**\r\n     * @description A map of body types to their respective default images. Note that this is merely a wrapper\r\n     * to an internal list, this is just to reduce visual noise.\r\n     */\r\n    public static DefaultBodyParts: Map<BodyType, CharImageLayout> = new Map<BodyType, CharImageLayout>(\r\n        [\r\n            [\r\n                BodyType.AverageSizedFeminine,\r\n                new CharImageLayout(CharacterImageMap.AverageSizedFeminineDefaults, BodyType.AverageSizedFeminine)\r\n            ],\r\n            [\r\n                BodyType.AverageSizedMasculine,\r\n                new CharImageLayout(CharacterImageMap.AverageSizedMasculineDefaults, BodyType.AverageSizedMasculine)\r\n            ],\r\n            [\r\n                BodyType.ReptilianFeminine,\r\n                new CharImageLayout(CharacterImageMap.ReptilianFeminineDefaults, BodyType.ReptilianFeminine)\r\n            ],\r\n            [\r\n                BodyType.ReptilianMasculine,\r\n                new CharImageLayout(CharacterImageMap.ReptilianMasculineDefaults, BodyType.ReptilianMasculine)\r\n            ],\r\n        ]\r\n    );\r\n\r\n    /**\r\n     * @description Compares the body-type selection options to the character map struct, picking out items\r\n     * that have a valid match.\r\n     * @param structItem The struct item part to evaluate.\r\n     * @param charSize The size of the character to get images for.\r\n     * @param bodyType The type of body to get the images for.\r\n     * @param partType The part type to get images for.\r\n     */\r\n    private static CompareParamsToStructItem(structItem: CharImageStructItem, charSize: CharacterSize, bodyType: BodyType, partType: PartType): boolean {\r\n        let doesMatch: boolean = true;\r\n        let validBodyDescriptors: BodyDescription[] = [];\r\n\r\n        if (this.BodyTypeMap.has(bodyType)) {\r\n            validBodyDescriptors = this.BodyTypeMap.get(bodyType) as BodyDescription[];\r\n        }\r\n        else {\r\n            console.error(`Invalid body type: ${bodyType} attempted to be retrieved in character image map.`);\r\n        }\r\n        \r\n        doesMatch = doesMatch && structItem.PartType === partType.toString();\r\n        doesMatch = doesMatch && structItem.Size === charSize.toString();\r\n        doesMatch = doesMatch && validBodyDescriptors.some(vbt => vbt.toString() === structItem.BodyType)\r\n\r\n        return doesMatch;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { CharacterImageMap } from '../Classes/CharacterImageMap';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\n/**\r\n * @description The properties for this class.\r\n * @param imagesToRender A list of images that will be rendered in-order, in the drawing area. Note that the\r\n * order of this array determines how images will be drawn.\r\n * @param borderColor A css-tyle-string to be used to color the border for this character.\r\n */\r\nexport interface ICharacterImageCanvasProps {\r\n    showLoadingSpinner: boolean;\r\n    imagesToRender: string[];\r\n    borderColor: string;\r\n    charScaleFactor: number;\r\n};\r\n\r\n/**\r\n * @description The state maintained by this component.\r\n */\r\nexport interface ICharacterImageCanvasState {\r\n};\r\n\r\n/**\r\n * @description Used to display a character image and its associated border, specified by the properties.\r\n */\r\nexport class CharacterImageCanvas extends React.Component<ICharacterImageCanvasProps, ICharacterImageCanvasState> {\r\n    // private static canvasHeight: number = 512;\r\n    // private static canvasWidth:  number = 256;\r\n    private static canvasHeight: number = 128;\r\n    private static canvasWidth: number = 64;\r\n\r\n    // private static charScaleFactor: number = 4;\r\n    private static charPartOffset: number = 32;\r\n    private static shadowOffset: number = 90;\r\n\r\n    /**\r\n     * Note that the numbers stored here are effectively pairs of coordinates to offset the\r\n     * image stamping by, scaled by the desired thickness of the border.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Compositing\r\n     */\r\n    private static borderCoordinates: number[] =\r\n    [\r\n        -1, -1,\r\n         0, -1,\r\n         1, -1,\r\n        -1,  0,\r\n         1,  0,\r\n        -1,  1,\r\n         0,  1,\r\n         1,  1\r\n    ];\r\n\r\n    /**\r\n     * @description Creates a new isntance of this object.\r\n     * @param props The properties for this object.\r\n     */\r\n    public constructor(props: ICharacterImageCanvasProps) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Renders this object.\r\n     */\r\n    public render() {\r\n        let showOnlySpinner: boolean = this.props.showLoadingSpinner;\r\n\r\n        return (\r\n            <div className='character-canvas-container'>\r\n                <Spinner\r\n                    className=\"character-canvas-spinner\"\r\n                    animation=\"border\"\r\n                    role=\"character image status\"\r\n                    style={{ visibility: showOnlySpinner ? 'visible' : 'hidden'}}\r\n                />\r\n                <canvas\r\n                    height={CharacterImageCanvas.canvasHeight * this.props.charScaleFactor}\r\n                    width={CharacterImageCanvas.canvasWidth * this.props.charScaleFactor}\r\n                    id='character-staging-canvas'\r\n                    ref='characterStagingCanvas'\r\n                />\r\n                <canvas\r\n                    height={CharacterImageCanvas.canvasHeight * this.props.charScaleFactor}\r\n                    width={CharacterImageCanvas.canvasWidth * this.props.charScaleFactor}\r\n                    id='character-canvas'\r\n                    ref='characterCanvas'\r\n                />\r\n                <canvas\r\n                    height={CharacterImageCanvas.canvasHeight * this.props.charScaleFactor}\r\n                    width={CharacterImageCanvas.canvasWidth * this.props.charScaleFactor}\r\n                    id='character-effects-canvas'\r\n                    ref='characterEffectsCanvas'\r\n                    style={{ visibility: showOnlySpinner ? 'hidden' : 'visible' }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @description Gets the download url for this image. This can be used to get the image via a data url.\r\n     */\r\n    public GetDownloadUrl(): string {\r\n        let effectsCanvas: HTMLCanvasElement = this.refs.characterEffectsCanvas as HTMLCanvasElement;\r\n        let downloadUrl: string = effectsCanvas.toDataURL('image/png');\r\n\r\n        return downloadUrl;\r\n    }\r\n\r\n    /**\r\n     * @description Handles events when the component has mounted.\r\n     */\r\n    public componentDidMount() {\r\n        let charStagingCanvas: HTMLCanvasElement = this.refs.characterStagingCanvas as HTMLCanvasElement;\r\n        let stagingCanvasContext: CanvasRenderingContext2D = charStagingCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        let charCanvas: HTMLCanvasElement = this.refs.characterCanvas as HTMLCanvasElement;\r\n        let charCanvasContext: CanvasRenderingContext2D = charCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        let effectsCanvas: HTMLCanvasElement = this.refs.characterEffectsCanvas as HTMLCanvasElement;\r\n        let effectsCanvasContext: CanvasRenderingContext2D = effectsCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        // This is going around the css, but ideally we don't ever want this disply context to change. The\r\n        // sole point of this canvas element is to get a stapled-together version of our final character\r\n        // drawing.\r\n        charStagingCanvas.style.display = 'none';\r\n        charCanvas.style.display = 'none';\r\n\r\n        // This is all done with upsacled pixels, so absolutely no anti-aliasing.\r\n        stagingCanvasContext.imageSmoothingEnabled = false;\r\n        charCanvasContext.imageSmoothingEnabled = false;\r\n        effectsCanvasContext.imageSmoothingEnabled = false;\r\n\r\n        // Draw the character and the border after the component has mounted. This is so that we have at least\r\n        // some default character when we load the page.\r\n        this.DrawCharacterAndBorder();\r\n    }\r\n\r\n    /**\r\n     * @description Handles events when the component has updated.\r\n     */\r\n    public componentDidUpdate() {\r\n        this.DrawCharacterAndBorder();\r\n    }\r\n\r\n    /**\r\n     * @description Draws the character image along with a border for the character. Will clean the canvas on\r\n     * when called.\r\n     */\r\n    private async DrawCharacterAndBorder(): Promise<void> {\r\n        await this.LoadCharacterImages();\r\n        await this.DrawCharacterBorder();\r\n        await this.DrawCharacterWithEffects();\r\n    }\r\n\r\n    /**\r\n     * @description Loads all of the images used to draw a character.\r\n     */\r\n    private async LoadCharacterImages(): Promise<void> {\r\n        // Create an array of html image elements. This will be populated as images are loaded.\r\n        let imagesToDraw: HTMLImageElement[] = new Array(this.props.imagesToRender.length);\r\n\r\n        let loadedImagesPromises: Promise<void>[] = this.props.imagesToRender.map((img, index) => {\r\n            return new Promise<void>(resolve => {\r\n                let imageElement: HTMLImageElement = new Image();\r\n                imageElement.onload = () => resolve();\r\n                imageElement.src = img;\r\n                imagesToDraw[index] = imageElement;\r\n            });\r\n        });\r\n\r\n        await Promise.all(loadedImagesPromises);\r\n\r\n        let charStagingCanvas: HTMLCanvasElement = this.refs.characterStagingCanvas as HTMLCanvasElement;\r\n        let stagingCanvasContext: CanvasRenderingContext2D = charStagingCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        // First, wipe the canvas. This needs to be cleared every time we re-render and re-draw.\r\n        stagingCanvasContext.clearRect(0, 0, charStagingCanvas.width, charStagingCanvas.height);\r\n\r\n        // Now draw all of the individual character components layer-by-layer, from front to back.\r\n        imagesToDraw.forEach(itd => {\r\n            stagingCanvasContext.drawImage(\r\n                itd,\r\n                0,\r\n                CharacterImageCanvas.charPartOffset * this.props.charScaleFactor,\r\n                itd.width * this.props.charScaleFactor,\r\n                itd.height * this.props.charScaleFactor);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Draws the character image, along with a 1px border using the specified color.\r\n     * @remarks https://stackoverflow.com/questions/28207232/draw-border-around-nontransparent-part-of-image-on-canvas\r\n     * Something to note about this algorith; it can only draw borders of a thickness equal to the smallest\r\n     * outlying pixel. So, our resolution for pixels on this canvas is '4', which means that the thickness\r\n     * must be 4, or else we end up with weird stamping artifacts.\r\n     */\r\n    private async DrawCharacterBorder() {\r\n        let charStagingCanvas: HTMLCanvasElement = this.refs.characterStagingCanvas as HTMLCanvasElement;\r\n        let charCanvas: HTMLCanvasElement = this.refs.characterCanvas as HTMLCanvasElement;\r\n        let canvasContext: CanvasRenderingContext2D = charCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        // Get the character staging image. This is our character image that is drawn layer-by-layer. We\r\n        // 'stamp' this image 8 times in a circle to populate each pixel that we plan to use as a border.\r\n        let charImg: HTMLImageElement = await new Promise<HTMLImageElement>(resolve => {\r\n            let charImgSrc: string = charStagingCanvas.toDataURL('image/png');\r\n            let char: HTMLImageElement = new Image();\r\n            char.onload = () => resolve(char)\r\n            char.src = charImgSrc;\r\n        });\r\n\r\n        // First, wipe the canvas. This needs to be cleared every time we re-render and re-draw.\r\n        canvasContext.clearRect(0, 0, charCanvas.width, charCanvas.height);\r\n\r\n        for (let i: number = 0; i < CharacterImageCanvas.borderCoordinates.length; i += 2) {\r\n            let thicknessScale: number =  this.props.charScaleFactor;\r\n            let xCoord: number = CharacterImageCanvas.borderCoordinates[i];\r\n            let yCoord: number = CharacterImageCanvas.borderCoordinates[i + 1];\r\n\r\n            canvasContext.drawImage(charImg, xCoord * thicknessScale, yCoord * thicknessScale);\r\n        }\r\n\r\n        canvasContext.globalCompositeOperation = \"source-in\";\r\n        canvasContext.fillStyle = this.props.borderColor;\r\n        canvasContext.fillRect(0, 0, charCanvas.width, charCanvas.height);\r\n        canvasContext.globalCompositeOperation = \"source-over\";\r\n    }\r\n\r\n    /**\r\n     * @description Draws the character image, along with a 1px border using the specified color.\r\n     * @remarks https://stackoverflow.com/questions/28207232/draw-border-around-nontransparent-part-of-image-on-canvas\r\n     * Something to note about this algorith; it can only draw borders of a thickness equal to the smallest\r\n     * outlying pixel. So, our resolution for pixels on this canvas is '4', which means that the thickness\r\n     * must be 4, or else we end up with weird stamping artifacts.\r\n     */\r\n    private async DrawCharacterWithEffects() {\r\n        let charStagingCanvas: HTMLCanvasElement = this.refs.characterStagingCanvas as HTMLCanvasElement;\r\n        let borderCanvas: HTMLCanvasElement = this.refs.characterCanvas as HTMLCanvasElement;\r\n        let effectsCanvas: HTMLCanvasElement = this.refs.characterEffectsCanvas as HTMLCanvasElement;\r\n        let effectsCanvasContext: CanvasRenderingContext2D = effectsCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        let shadowImg: HTMLImageElement = await new Promise<HTMLImageElement>(resolve => {\r\n            let shadowImgSrc: string = CharacterImageMap.CharacterShadowSource;\r\n            let shadow: HTMLImageElement = new Image();\r\n            shadow.onload = () => resolve(shadow);\r\n            shadow.src = shadowImgSrc;\r\n        });\r\n\r\n        let charBorderImg: HTMLImageElement = await new Promise<HTMLImageElement>(resolve => {\r\n            let charBorderImgSrc: string = borderCanvas.toDataURL('image/png');\r\n            let border: HTMLImageElement = new Image();\r\n            border.onload = () => resolve(border);\r\n            border.src = charBorderImgSrc;\r\n        });\r\n\r\n        let charImg: HTMLImageElement = await new Promise<HTMLImageElement>(resolve => {\r\n            let charImgSrc: string = charStagingCanvas.toDataURL('image/png');\r\n            let char: HTMLImageElement = new Image();\r\n            char.onload = () => resolve(char);\r\n            char.src = charImgSrc;\r\n        });\r\n\r\n        // First, wipe the canvas. This needs to be cleared every time we re-render and re-draw.\r\n        effectsCanvasContext.clearRect(0, 0, effectsCanvas.width, effectsCanvas.height);\r\n\r\n        // Draw the shadow underneath a character's feet first. This puts it as far in the background as\r\n        // possible.\r\n        effectsCanvasContext.drawImage(\r\n            shadowImg,\r\n            0,\r\n            CharacterImageCanvas.shadowOffset * this.props.charScaleFactor,\r\n            shadowImg.width * this.props.charScaleFactor,\r\n            shadowImg.height * this.props.charScaleFactor\r\n            );\r\n\r\n        effectsCanvasContext.drawImage(charBorderImg, 0, 0);\r\n        effectsCanvasContext.drawImage(charImg, 0, 0);\r\n    }\r\n}\r\n","export enum CharacterSize\r\n{\r\n    Average = 'Size_Average'\r\n}","import React from 'react';\r\nimport { CharImageDownloadCallback } from '../Types/CharImageDownloadCallback';\r\nimport { CharacterImageCanvas } from './CharacterImageCanvas';\r\nimport { ColorResult, CirclePicker } from 'react-color';\r\n\r\n/**\r\n * @description The properties for this class.\r\n * @param imagesToRender A list of images that will be rendered in-order, in the drawing area. Note that the\r\n * order of this array determines how images will be drawn.\r\n * @param downloadCallback A callback when the download button is clicked in this component.\r\n */\r\nexport interface ICharacterDrawingAreaProps {\r\n    showLoadingSpinner: boolean;\r\n    imagesToRender: string[];\r\n    downloadCallback: CharImageDownloadCallback;\r\n}\r\n\r\n/**\r\n * @description The state for this class.\r\n * @param borderColor A css-style-string used to color the border for the character. This will come from the\r\n * circle color picker.\r\n * @param downloadUrl A data url that will be used when providing the callback for the download button.\r\n */\r\nexport interface ICharacterDrawingAreaState {\r\n    borderColor: string;\r\n    downloadUrl: string;\r\n}\r\n\r\n/**\r\n * A high-level container for the character drawing area. Contains the border color controls, the download\r\n * button and the character canvas.\r\n */\r\nexport class CharacterDrawingArea extends React.Component<ICharacterDrawingAreaProps, ICharacterDrawingAreaState> {\r\n    private static outlineColorOptions =\r\n    [\r\n        '#131313',\r\n        '#ffffff',\r\n        '#c42430',\r\n        '#ffeb57',\r\n        '#5ac54f',\r\n        '#0cf1ff'\r\n    ];\r\n\r\n    /**\r\n     * @description Creates a new instance of this class.\r\n     * @param props The provided properties for this class.\r\n     */\r\n    public constructor(props: ICharacterDrawingAreaProps) {\r\n        super(props);\r\n        this.state = {\r\n            borderColor: \"rgb(10, 10, 10)\",\r\n            downloadUrl: \"\"\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Renders this component.\r\n     */\r\n    public render() {\r\n        return (\r\n            <div className=\"character-drawing-area\">\r\n                <CharacterImageCanvas\r\n                    charScaleFactor={4}\r\n                    showLoadingSpinner={this.props.showLoadingSpinner}\r\n                    ref=\"charImageCanvas\"\r\n                    imagesToRender={this.props.imagesToRender}\r\n                    borderColor={this.state.borderColor}\r\n                />\r\n                <span className=\"character-drawing-label\">\r\n                    Border Color\r\n                </span>\r\n                <CirclePicker\r\n                    onChangeComplete={this.handleColorChange.bind(this)}\r\n                    color={this.state.borderColor}\r\n                    colors={CharacterDrawingArea.outlineColorOptions}\r\n                />\r\n                <button className=\"character-image-download\"\r\n                    onClick={() => this.props.downloadCallback(this.fetchDownloadUrl())}>\r\n                    &gt;&gt;Download&lt;&lt;\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    private handleColorChange(color: ColorResult): void {\r\n        this.setState({\r\n            borderColor: color.hex\r\n        });\r\n    }\r\n\r\n    private fetchDownloadUrl(): string {\r\n        let charImgCanvas: CharacterImageCanvas = this.refs.charImageCanvas as CharacterImageCanvas;\r\n        let downloadUrl = charImgCanvas.GetDownloadUrl();\r\n\r\n        return downloadUrl;\r\n    }\r\n}\r\n","import { IItemKey } from \"../../Items/Interfaces/IItem\";\r\nimport { PartType } from \"../../CharacterImage/Enums/PartType\";\r\nimport { CharImageLayout } from '../../CharacterImage/Classes/CharImageLayout';\r\n\r\nexport class PlayerCharacterData {\r\n    public Name: string;\r\n    public Copper: number;\r\n    public Items: IItemKey[];\r\n    public CharLayout: CharImageLayout;\r\n    public BorderColor: string;\r\n\r\n    public constructor(name: string, copper: number, items: IItemKey[], charLayout: CharImageLayout, borderColor: string) {\r\n        this.Name = name;\r\n        this.Copper = copper;\r\n        this.Items = items;\r\n        this.CharLayout = charLayout;\r\n        this.BorderColor = borderColor;\r\n    }\r\n\r\n    public GetItemsAsStringArray(): string[] {\r\n        return this.Items.map(item => JSON.stringify(item));\r\n    }\r\n\r\n    public static GetStringArrayAsItems(itemJson: string[]): IItemKey[] {\r\n        let items: IItemKey[] = itemJson\r\n            .map(itemJson => JSON.parse(itemJson) as IItemKey | undefined)\r\n            .filter(item => item !== undefined) as IItemKey[];\r\n\r\n        return items;\r\n    }\r\n}\r\n","import { UserDataAuth } from './UserDataAuth';\r\nimport { firestore } from 'firebase';\r\nimport { PlayerCharacterData } from '../Types/PlayerCharacterData';\r\nimport { IItemKey } from '../../Items/Interfaces/IItem';\r\nimport { PartType } from '../../CharacterImage/Enums/PartType';\r\nimport { CharImageLayout } from '../../CharacterImage/Classes/CharImageLayout';\r\n\r\nexport class PlayerInventoryService {\r\n    private static readonly collection_userWritable: string = \"userWritable\";\r\n    private static readonly document_playerInventory: string = \"playerInventory\";\r\n    private static readonly storage_currentCharacter: string = \"currentCharacter\";\r\n\r\n    private static PlayerCharacterDataConverter: firestore.FirestoreDataConverter<PlayerCharacterData> = {\r\n        toFirestore: (playerCharacterData: PlayerCharacterData): firestore.DocumentData => {\r\n            // https://stackoverflow.com/questions/29085197/how-do-you-json-stringify-an-es6-map\r\n\r\n            // let images: [PartType, string][] = Array.from(playerCharacterData.Images.entries());\r\n            // let imagesStr: string = JSON.stringify(images);\r\n\r\n            return {\r\n                name: playerCharacterData.Name,\r\n                copper: playerCharacterData.Copper,\r\n                items: playerCharacterData.GetItemsAsStringArray(),\r\n                charData: playerCharacterData.CharLayout.GetJsonString(),\r\n                borderColor: playerCharacterData.BorderColor\r\n            }\r\n        },\r\n        fromFirestore: (snapshot, options): PlayerCharacterData => {\r\n            let snapshotData = snapshot.data(options);\r\n\r\n            let playerName: string = snapshotData.name;\r\n            let playerCopper: number = snapshotData.copper;\r\n            let playerItemData: string[] = snapshotData.items;\r\n            let playerCharData: string = snapshotData.charData;\r\n            let playerBorder: string = snapshotData.borderColor;\r\n\r\n            let charData: CharImageLayout = CharImageLayout.GetLayoutFromString(playerCharData);\r\n            let playerItems: IItemKey[] = PlayerCharacterData.GetStringArrayAsItems(playerItemData);\r\n\r\n            let playerData: PlayerCharacterData = new PlayerCharacterData(\r\n                playerName,\r\n                playerCopper,\r\n                playerItems,\r\n                charData,\r\n                playerBorder);\r\n\r\n            return playerData;\r\n        }\r\n    }\r\n\r\n    public static async CreateCharacterData(characterData: PlayerCharacterData): Promise<void> {\r\n        let uid: string | undefined = UserDataAuth.GetInstance().GetUid();\r\n\r\n        if (uid !== undefined) {\r\n            await firestore()\r\n                .collection(this.collection_userWritable)\r\n                .doc(this.document_playerInventory)\r\n                .collection(uid)\r\n                .doc(characterData.Name)\r\n                .withConverter(PlayerInventoryService.PlayerCharacterDataConverter)\r\n                .set(characterData)\r\n                .catch(reason => {\r\n                    console.error(reason);\r\n                });\r\n        }\r\n    }\r\n\r\n    public static async UpdateCharacterData(characterData: PlayerCharacterData): Promise<void> {\r\n        let uid: string | undefined = UserDataAuth.GetInstance().GetUid();\r\n\r\n        // I'm not certain why, but the 'withConverter' option doesn't appear to work the same for .update as\r\n        // it does for .set. Just use the converter in a brute-force method instead since this seems to work.\r\n        let charDataDocument = PlayerInventoryService.PlayerCharacterDataConverter.toFirestore(characterData);\r\n        \r\n        if (uid !== undefined) {\r\n            await firestore()\r\n                .collection(this.collection_userWritable)\r\n                .doc(this.document_playerInventory)\r\n                .collection(uid)\r\n                .doc(characterData.Name)\r\n                .update(charDataDocument)\r\n                .catch(reason => {\r\n                    console.error(reason);\r\n                });\r\n        }\r\n    }\r\n\r\n    public static async FetchCharacterData(playerName: string): Promise<PlayerCharacterData | undefined> {\r\n        let response: PlayerCharacterData | undefined = undefined;\r\n        let uid: string | undefined = UserDataAuth.GetInstance().GetUid();\r\n\r\n        if (uid !== undefined) {\r\n            let playerDataRef = firestore()\r\n                .collection(this.collection_userWritable)\r\n                .doc(this.document_playerInventory)\r\n                .collection(uid)\r\n                .doc(playerName);\r\n\r\n            await playerDataRef\r\n                .withConverter(PlayerInventoryService.PlayerCharacterDataConverter)\r\n                .get()\r\n                .then(docSnapshot => {\r\n                    if (docSnapshot.exists) {\r\n                        response = docSnapshot.data();\r\n                    }\r\n                    else {\r\n                        console.error(`Could not find character document for ${playerName}.`);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.error(error);\r\n                });\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    public static async GetDefaultCharacter(): Promise<PlayerCharacterData | undefined> {\r\n        let response: PlayerCharacterData | undefined = undefined;\r\n        let uid: string | undefined = UserDataAuth.GetInstance().GetUid();\r\n\r\n        if (uid !== undefined) {\r\n            let playerDataRef = firestore()\r\n                .collection(this.collection_userWritable)\r\n                .doc(this.document_playerInventory)\r\n                .collection(uid)\r\n                .limit(1);\r\n\r\n            await playerDataRef\r\n                .withConverter(PlayerInventoryService.PlayerCharacterDataConverter)\r\n                .get()\r\n                .then(docSnapshot => {\r\n                    if (!docSnapshot.empty) {\r\n                        response = docSnapshot.docs[0].data();\r\n                    }\r\n                    else {\r\n                        console.error(`Could not find a default character.`);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.error(error);\r\n                });\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    public static async FetchAllCharacters(): Promise<PlayerCharacterData[]> {\r\n        let uid: string | undefined = UserDataAuth.GetInstance().GetUid();\r\n        let allCharData: PlayerCharacterData[] = [];\r\n\r\n        if (uid !== undefined) {\r\n            let playerDataRef = firestore()\r\n                .collection(this.collection_userWritable)\r\n                .doc(this.document_playerInventory)\r\n                .collection(uid);\r\n\r\n            await playerDataRef\r\n                .withConverter(PlayerInventoryService.PlayerCharacterDataConverter)\r\n                .get()\r\n                .then(docSnapshot => {\r\n                    // Calling .data() doesn't cost anything extra in terms of database reads, so go ahead and\r\n                    // get the list of characters as the full objects regardless.\r\n                    docSnapshot.forEach(charData => {\r\n                        let newCharData = charData.data();\r\n                        allCharData.push(newCharData);\r\n                    });\r\n                })\r\n                .catch(reason => {\r\n                    console.error(reason);\r\n                });\r\n        }\r\n\r\n        return allCharData;\r\n    }\r\n\r\n    public static SetCurrentCharacter(charName: string) {\r\n        localStorage.setItem(PlayerInventoryService.storage_currentCharacter, charName);\r\n    }\r\n\r\n    public static GetCurrentCharacterName(): string | null {\r\n        return localStorage.getItem(PlayerInventoryService.storage_currentCharacter);\r\n    }\r\n\r\n    public static async GetCurrentCharacter(): Promise<PlayerCharacterData | undefined> {\r\n        let charName: string | null = PlayerInventoryService.GetCurrentCharacterName();\r\n\r\n        if (!charName) {\r\n            return undefined;\r\n        }\r\n\r\n        return await PlayerInventoryService.FetchCharacterData(charName as string);\r\n    }\r\n}\r\n","import { PlayerInventoryService } from './PlayerInventoryService';\r\nimport { PlayerCharacterData } from '../Types/PlayerCharacterData';\r\n\r\nexport class CharacterStateManager {\r\n    private static _instance: CharacterStateManager;\r\n\r\n    public static GetInstance() {\r\n        if (!this._instance) {\r\n            this._instance = new CharacterStateManager();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    public async GetCurrentStaticCharacterData(): Promise<PlayerCharacterData | undefined> {\r\n        // First, verify that the current character has been loaded. If it hasn't, load up the first\r\n        // applicable character.\r\n        if (this._currentCharacter === undefined) {\r\n            let playerName: string | null = PlayerInventoryService.GetCurrentCharacterName();\r\n\r\n            // If we have a player name in local storage, try loading that first.\r\n            if (playerName) {\r\n                this._currentCharacter = await PlayerInventoryService.FetchCharacterData(playerName);\r\n            }\r\n            else {\r\n                this._currentCharacter = await PlayerInventoryService.GetDefaultCharacter();\r\n            }\r\n        }\r\n\r\n        return this._currentCharacter;\r\n    }\r\n\r\n    /**\r\n     * @description Called in order to update the local static object that tracks the character's state.\r\n     * @param charData \r\n     */\r\n    public async ChangeStaticCharacterData(charData: PlayerCharacterData | undefined) {\r\n        this._currentCharacter = charData;\r\n    }\r\n\r\n    /**\r\n     * @description Called in order to modify the current character data, and submit that data to the server.\r\n     * @param charData \r\n     */\r\n    public async UploadCharacterData(charData: PlayerCharacterData) {\r\n        this._currentCharacter = charData;\r\n        PlayerInventoryService.UpdateCharacterData(charData);\r\n    }\r\n\r\n    private _currentCharacter: PlayerCharacterData | undefined = undefined;\r\n\r\n    private constructor() {}\r\n}\r\n","import React from 'react';\r\nimport '../CharacterImage.css';\r\n\r\nimport { PartSelector } from './PartSelector';\r\nimport { CharacterDrawingArea } from './CharacterDrawingArea';\r\n\r\nimport { CharacterImageMap } from '../Classes/CharacterImageMap';\r\nimport { CharImageLayout } from '../Classes/CharImageLayout';\r\n\r\nimport { CharacterSize } from '../Enums/CharacterSize';\r\nimport { PartType } from '../Enums/PartType';\r\nimport { BodyType } from '../Enums/BodyType';\r\n\r\nimport { BodyTypeSelectionCallback } from '../Types/BodyTypeSelectionCallback';\r\nimport { PartTypeSelectionCallback } from '../Types/PartTypeSelectionCallback';\r\nimport { PartSelectionCallback } from '../Types/PartSelectionCallback';\r\nimport { CharImageDownloadCallback } from '../Types/CharImageDownloadCallback';\r\nimport { CharacterStateManager } from '../../FirebaseAuth/Classes/CharacterStateManager';\r\nimport { UserDataAuth } from '../../FirebaseAuth/Classes/UserDataAuth';\r\nimport { PlayerCharacterData } from '../../FirebaseAuth/Types/PlayerCharacterData';\r\n\r\n/**\r\n * @description\r\n * The interface for props passed to this object. This class in particular takes no props; it is effectively\r\n * the app itself.\r\n */\r\nexport interface ICharacterImageProps {\r\n};\r\n\r\n/**\r\n * @description\r\n * The interface for the internal state maintained by this object.\r\n * @param canvasImages The list of image sources, represented as strings, that will be rendered using the\r\n * Canvas class.\r\n * @param partLayers A list of image layers. This contains information about all of the possible layers that\r\n * can be drawn to the currently-selected body type. This contains information about what each layer is, how\r\n * that layer is drawn, and what the possible images are in that layer.\r\n */\r\nexport interface ICharacterImageState {\r\n    charSize: CharacterSize;\r\n    partType: PartType;\r\n    charImageLayout: CharImageLayout;\r\n    checkingForCharacterImage: boolean;\r\n};\r\n\r\n/**\r\n * @description The main entry point for the character drawing application. Provides all of the buttons and\r\n * fun stuff needed to create a character image on a canvas element.\r\n */\r\nexport class CharacterImage extends React.Component<ICharacterImageProps, ICharacterImageState> {\r\n    private handlePartTypeChange(partType: PartType) {\r\n        this.setState({\r\n            partType: partType\r\n        });\r\n    }\r\n\r\n    private handleBodyTypeChange(bodyType: BodyType) {\r\n        let charImageLayout: CharImageLayout = new CharImageLayout(new Map<PartType, string>(), bodyType);\r\n\r\n        if (CharacterImageMap.DefaultBodyParts.has(bodyType)) {\r\n            charImageLayout = CharacterImageMap.DefaultBodyParts.get(bodyType) as CharImageLayout;\r\n        }\r\n\r\n        this.setState({\r\n            charImageLayout: charImageLayout\r\n        });\r\n    }\r\n\r\n    private handlePartSelection(partType: PartType, imgSource: string): void {\r\n        let charImgLayout = this.state.charImageLayout;\r\n        charImgLayout.SetPartImage(partType, imgSource);\r\n\r\n        this.setState({\r\n            charImageLayout: charImgLayout\r\n        });\r\n        \r\n        CharacterStateManager.GetInstance().GetCurrentStaticCharacterData()\r\n            .then(charData => {\r\n                if (charData !== undefined) {\r\n                    charData.CharLayout = this.state.charImageLayout;\r\n                    \r\n                    CharacterStateManager.GetInstance().UploadCharacterData(charData);\r\n                }\r\n            });\r\n    }\r\n\r\n    private handleCanvasDownload(downloadSource: string): void {\r\n        if (downloadSource === undefined || downloadSource === \"\") {\r\n            console.error(\"Character image was attempted to be downloaded with an empty, unset string.\");\r\n        }\r\n        else {\r\n            let link = document.createElement('a');\r\n\r\n            link.download = 'characterImage.png';\r\n            link.href = downloadSource;\r\n            link.click();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Creates a new instance of this component.\r\n     * @param props Higher-order properties passed in to this component.\r\n     */\r\n    public constructor(props: ICharacterImageProps) {\r\n        super(props);\r\n        this.state = {\r\n            charSize: CharacterSize.Average,\r\n            partType: PartType.Body,\r\n            charImageLayout: new CharImageLayout(new Map(), BodyType.AverageSizedFeminine),\r\n            checkingForCharacterImage: true\r\n        }\r\n        this.CheckForCharacterImage();\r\n\r\n    }\r\n\r\n    private async CheckForCharacterImage() {\r\n        let charData: PlayerCharacterData | undefined = undefined;\r\n\r\n        // Check to see if we have some character data we can load for this person. If so, update the current\r\n        // layers so someone can modify their character!\r\n        let userHasAccount: boolean = await UserDataAuth.GetInstance().CheckForAccess();\r\n        if (userHasAccount) {\r\n            charData = await CharacterStateManager.GetInstance().GetCurrentStaticCharacterData();\r\n        }\r\n\r\n        if (charData !== undefined) {\r\n            console.log(charData);\r\n            this.setState({\r\n                charImageLayout: charData.CharLayout,\r\n                checkingForCharacterImage: false\r\n            });\r\n        }\r\n        else {\r\n            console.log(\"Could not load char data\");\r\n            this.setState({\r\n                charImageLayout: CharacterImageMap.DefaultBodyParts.get(BodyType.AverageSizedFeminine) as CharImageLayout,\r\n                checkingForCharacterImage: false\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description\r\n     * Renders a series of body selectors for the user to pick from. These body selectors will modify the list\r\n     * of available accessories (since a tiny hat looks silly on a giant person . . . or does it?). Needs to\r\n     * look at the BodyMap.tsx file to understand what will be populated.\r\n     */\r\n    public renderBodySelection() {\r\n        return (<div></div>);\r\n    }\r\n\r\n    /**\r\n     * @description Renders this component.\r\n     */\r\n    public render() {\r\n        let imagePaths = CharacterImageMap.GetCharacterImagePaths(\r\n            this.state.charSize,\r\n            this.state.charImageLayout.BodyType,\r\n            this.state.partType);\r\n        \r\n        let partTypeTabSelection: PartTypeSelectionCallback = (partType: PartType) => {\r\n            this.handlePartTypeChange(partType);\r\n        };\r\n\r\n        let bodyTypeTabSelection: BodyTypeSelectionCallback = (bodyType: BodyType) => {\r\n            this.handleBodyTypeChange(bodyType);\r\n        };\r\n\r\n        let partSelection: PartSelectionCallback = (partType: PartType, imgSource: string) => {\r\n            this.handlePartSelection(partType, imgSource);\r\n        };\r\n\r\n        let canvasDownload: CharImageDownloadCallback = (downloadSource: string) => {\r\n            this.handleCanvasDownload(downloadSource);\r\n        };\r\n\r\n        let charImages: string[] = this.state.charImageLayout.GetImages();\r\n        console.log(`Render called with images: ${charImages}`);\r\n\r\n        return (\r\n            <div className=\"character-image\">\r\n                <CharacterDrawingArea\r\n                    showLoadingSpinner={this.state.checkingForCharacterImage}\r\n                    imagesToRender={charImages}\r\n                    downloadCallback={canvasDownload.bind(this)}\r\n                />\r\n                <PartSelector\r\n                    partSelectionCallback={partSelection.bind(this)}\r\n                    bodyTypeSelectionCallback={bodyTypeTabSelection.bind(this)}\r\n                    partTypeSelectionCallback={partTypeTabSelection.bind(this)}\r\n                    partType={this.state.partType}\r\n                    partOptions={imagePaths}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport interface IInventoryProps {\r\n}\r\n\r\nexport interface IInventoryState {\r\n}\r\n\r\nexport class Inventory extends React.Component<IInventoryProps, IInventoryState> {\r\n    public constructor(props: IInventoryProps) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { PlayerCharacterData } from '../../FirebaseAuth/Types/PlayerCharacterData';\r\nimport { CharacterImageCanvas } from '../../CharacterImage/React/CharacterImageCanvas';\r\n\r\nexport interface ICurrentCharacterStatusProps {\r\n    currentCharacterData: PlayerCharacterData | undefined;\r\n}\r\n\r\nexport function CurrentCharacterStatus(props: ICurrentCharacterStatusProps) {\r\n    let name: string = \"\";\r\n    let images: string[] = [];\r\n    let borderColor: string = \"\";\r\n\r\n    if (props.currentCharacterData !== undefined) {\r\n        name = props.currentCharacterData.Name;\r\n        images = props.currentCharacterData.CharLayout.GetImages();\r\n        borderColor = props.currentCharacterData.BorderColor;\r\n    }\r\n\r\n    return (\r\n        <div className=\"character-status\">\r\n            <div className=\"character-selector-name\">\r\n                <h6>You are currently playing as . . . </h6>\r\n                <h1>{name}</h1>\r\n            </div>\r\n            <CharacterImageCanvas\r\n                charScaleFactor={4}\r\n                showLoadingSpinner={false}\r\n                imagesToRender={images}\r\n                borderColor={borderColor}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { PlayerCharacterData } from '../../FirebaseAuth/Types/PlayerCharacterData';\r\nimport { SelectedCharacterCallback } from '../Types/SelectedCharacterCallback';\r\nimport { CharacterImageCanvas } from '../../CharacterImage/React/CharacterImageCanvas';\r\n\r\nexport interface ICharacterSelectionButtonProps {\r\n    characterData: PlayerCharacterData;\r\n    characterSelectedCallback: SelectedCharacterCallback;\r\n}\r\n\r\nexport interface ICharacterSelectionButtonState {\r\n}\r\n\r\nexport class CharacterSelectionButton extends React.Component<ICharacterSelectionButtonProps, ICharacterSelectionButtonState> {\r\n    public constructor(props: ICharacterSelectionButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"character-selector-container\">\r\n                <button\r\n                    className=\"character-selection-button\"\r\n                    onClick={() => this.props.characterSelectedCallback(this.props.characterData)}>\r\n                    <CharacterImageCanvas\r\n                        charScaleFactor={2}\r\n                        showLoadingSpinner={false}\r\n                        imagesToRender={this.props.characterData.CharLayout.GetImages()}\r\n                        borderColor={this.props.characterData.BorderColor}\r\n                        />\r\n                </button>\r\n                <span className=\"character-selection-name\">\r\n                    {this.props.characterData.Name}\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport interface INewCharacterButtonProps {\r\n    onClick: () => void;\r\n}\r\n\r\nexport interface INewCharacterButtonState {\r\n}\r\n\r\nexport class NewCharacterButton extends React.Component<INewCharacterButtonProps, INewCharacterButtonState> {\r\n    public constructor(props: INewCharacterButtonProps) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"character-selector-container\">\r\n                <button className=\"new-character-button\" onClick={this.props.onClick}>\r\n                    +\r\n                </button>\r\n                <span className=\"character-selection-name\">\r\n                    New Character\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { PlayerCharacterData } from '../../FirebaseAuth/Types/PlayerCharacterData';\r\nimport { CharacterSelectionButton } from './CharacterSelectionButton';\r\nimport { SelectedCharacterCallback } from '../Types/SelectedCharacterCallback';\r\nimport { NewCharacterButton } from './NewCharacterButton';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nexport interface ICharacterSelectorProps {\r\n    allCharacterData: PlayerCharacterData[];\r\n    characterSelectedCallback: SelectedCharacterCallback;\r\n    newCharacterButtonCallback: () => void;\r\n    isLoading: boolean;\r\n}\r\n\r\nexport interface ICharacterSelectorState {\r\n}\r\n\r\nexport class CharacterSelector extends React.Component<ICharacterSelectorProps, ICharacterSelectorState> {\r\n    public constructor(props: ICharacterSelectorProps) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        let showSpinner: boolean = this.props.isLoading;\r\n        let showNoCharactersMessage: boolean = this.props.allCharacterData.length === 0 && !this.props.isLoading;\r\n\r\n        return (\r\n            <div className=\"character-selector\">\r\n                <h2>\r\n                    Characters:\r\n                </h2>\r\n                <h4 style={{ visibility: showNoCharactersMessage ? 'visible' : 'hidden' }}>\r\n                    You don't have any characters yet! You should make one.\r\n                </h4>\r\n                <div className=\"character-selector-buttons\">\r\n                    <Spinner\r\n                        animation=\"border\"\r\n                        role=\"character button status\"\r\n                        style={{ visibility: showSpinner ? 'visible' : 'hidden' }}\r\n                    />\r\n                    {this.GetCharacterButtons()}\r\n                    <NewCharacterButton\r\n                        onClick={this.props.newCharacterButtonCallback}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private GetCharacterButtons(): JSX.Element[] {\r\n        return this.props.allCharacterData.map(charData => {\r\n            return (\r\n                <CharacterSelectionButton\r\n                    characterSelectedCallback={this.props.characterSelectedCallback}\r\n                    characterData={charData}\r\n                />\r\n            )\r\n        })\r\n    }\r\n}\r\n","import React, { ChangeEvent, FormEvent } from 'react';\r\nimport { Modal, Spinner } from 'react-bootstrap';\r\nimport { BodyType } from '../../CharacterImage/Enums/BodyType';\r\nimport { PlayerCharacterData } from '../../FirebaseAuth/Types/PlayerCharacterData';\r\nimport { CharImageLayout } from '../../CharacterImage/Classes/CharImageLayout';\r\nimport { PlayerInventoryService } from '../../FirebaseAuth/Classes/PlayerInventoryService';\r\nimport { CharacterImageMap } from '../../CharacterImage/Classes/CharacterImageMap';\r\n\r\nexport interface INewCharacterFormProps {\r\n    show: boolean;\r\n    existingCharacterNames: string[];\r\n    onHideModal: () => void;\r\n    onFormSubmission: () => void;\r\n}\r\n\r\nexport interface INewCharacterFormState {\r\n    isCreating: boolean;\r\n    inputIsValid: boolean;\r\n    validationErrors: string[];\r\n}\r\n\r\nexport class NewCharacterForm extends React.Component<INewCharacterFormProps, INewCharacterFormState> {\r\n    private currentNewCharName: string;\r\n    private currentBodyType: BodyType;\r\n\r\n    public constructor(props: INewCharacterFormProps) {\r\n        super(props);\r\n\r\n        this.currentNewCharName = \"\";\r\n        this.currentBodyType = BodyType.AverageSizedFeminine;\r\n\r\n        this.state = {\r\n            isCreating: false,\r\n            inputIsValid: false,\r\n            validationErrors: []\r\n        };\r\n    }\r\n\r\n    private handleCharNameInput(event: ChangeEvent<HTMLInputElement>): void {\r\n        let input = event.target?.value;\r\n        if (input) {\r\n            this.currentNewCharName = input;\r\n        }\r\n\r\n        this.validateInput();\r\n    }\r\n\r\n    private handleBodyTypeChange(event: ChangeEvent<HTMLSelectElement>): void {\r\n        let input = event.target?.value;\r\n        if (input) {\r\n            this.currentBodyType = input as BodyType;\r\n        }\r\n        \r\n        this.validateInput();\r\n    }\r\n\r\n    private validateInput() {\r\n        let validCharNameRegex: RegExp = /^[A-Z0-9_ -]+$/i;\r\n        let inputValid: boolean = true;\r\n        let validationErrors: string[] = [];\r\n\r\n        if (!this.currentNewCharName.match(validCharNameRegex)) {\r\n            inputValid = false;\r\n            validationErrors.push(\"Character names can only contain alphanumerics, underscores, and hyphens.\")\r\n        }\r\n\r\n        if (this.props.existingCharacterNames.some(existingName => this.currentNewCharName === existingName)) {\r\n            inputValid = false;\r\n            validationErrors.push(`${this.currentNewCharName} already exists!`);\r\n        }\r\n\r\n        this.setState({\r\n            inputIsValid: inputValid,\r\n            validationErrors: validationErrors\r\n        });\r\n    }\r\n\r\n    private handleCreateCharacter(event: FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n        this.setState({\r\n            isCreating: true\r\n        });\r\n\r\n        let charDefaults: CharImageLayout | undefined = CharacterImageMap.DefaultBodyParts.get(this.currentBodyType);\r\n        let startingCharBits: CharImageLayout;\r\n\r\n        if (charDefaults !== undefined) {\r\n            startingCharBits = charDefaults;\r\n        }\r\n        else {\r\n            startingCharBits = new CharImageLayout(new Map(), this.currentBodyType);\r\n        }\r\n\r\n        let newCharData: PlayerCharacterData = new PlayerCharacterData(\r\n            this.currentNewCharName,\r\n            0,\r\n            [],\r\n            startingCharBits,\r\n            \"\"\r\n        );\r\n\r\n        PlayerInventoryService.CreateCharacterData(newCharData).then(() => {\r\n            this.setState({\r\n                isCreating: false\r\n            });\r\n            this.props.onFormSubmission();\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        let formBodyOptions: JSX.Element[] = Object.values(BodyType).map(bt => {\r\n            return (\r\n                <option>\r\n                    {bt.toString()}\r\n                </option>\r\n            )\r\n        });\r\n\r\n        let creatingMessage: boolean = this.state.isCreating;\r\n\r\n        return (\r\n            <Modal\r\n                show={this.props.show}\r\n                centered={true}\r\n                onHide={this.props.onHideModal}\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title>New Character Deets</Modal.Title>\r\n                </Modal.Header>\r\n                <div className=\"new-character-form-errors\">\r\n                    {\r\n                        this.state.validationErrors.map(errormessage => (<span>{errormessage}</span>))\r\n                    }\r\n                </div>\r\n                <form className=\"new-character-form\" onSubmit={this.handleCreateCharacter.bind(this)}>\r\n                    <br />\r\n                    <span className=\"new-character-form-title\">\r\n                        Character Name:\r\n                    </span>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"characterName\"\r\n                        className=\"new-character-form-field new-character-form-name\"\r\n                        onChange={this.handleCharNameInput.bind(this)}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n                    <span className=\"new-character-form-title\">\r\n                        Body Type:\r\n                    </span>\r\n                    <select\r\n                        id=\"new character body type\"\r\n                        className=\"new-character-form-field new-character-form-body-type\"\r\n                        onChange={this.handleBodyTypeChange.bind(this)}\r\n                    >\r\n                        {formBodyOptions}\r\n                    </select>\r\n                    <br />\r\n                    <br />\r\n                    <input\r\n                        disabled={!this.state.inputIsValid || this.state.isCreating}\r\n                        className=\"submit-new-character-button\"\r\n                        type=\"submit\"\r\n                        value=\"Create New Character\"\r\n                    />\r\n                </form>\r\n                <div style={{visibility: creatingMessage ? 'visible' : 'hidden'}}>\r\n                    <Spinner\r\n                        animation=\"border\"\r\n                        role=\"character button status\"\r\n                    />\r\n                    <span>Creating {this.currentNewCharName} . . .</span>\r\n                </div>\r\n                <button\r\n                        className=\"cancel-new-character-button\"\r\n                        onClick={this.props.onHideModal}\r\n                    >\r\n                        Close without creating\r\n                </button>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n","import '../CharacterManager.css';\r\n\r\nimport React from 'react';\r\nimport { CurrentCharacterStatus } from './CurrentCharacterStatus';\r\nimport { PlayerInventoryService } from '../../FirebaseAuth/Classes/PlayerInventoryService';\r\nimport { PlayerCharacterData } from '../../FirebaseAuth/Types/PlayerCharacterData';\r\nimport { CharacterSelector } from './CharacterSelector';\r\nimport { CharacterStateManager } from '../../FirebaseAuth/Classes/CharacterStateManager';\r\nimport { NewCharacterForm } from './NewCharacterForm';\r\n\r\nexport interface ICharacterManagerProps {\r\n}\r\n\r\nexport interface ICharacterManagerState {\r\n    currentCharacterData: PlayerCharacterData | undefined;\r\n    allCharactersData: PlayerCharacterData[];\r\n    isLoading: boolean;\r\n    showNewCharForm: boolean;\r\n}\r\n\r\nexport class CharacterManager extends React.Component<ICharacterManagerProps, ICharacterManagerState> {\r\n    private handleNewCharButtonClick(): void {\r\n        this.setState({\r\n            showNewCharForm: true\r\n        });\r\n    }\r\n\r\n    private handleHideModal(): void {\r\n        this.setState({\r\n            showNewCharForm: false\r\n        });\r\n    }\r\n\r\n    private handleSubmitNewCharForm(): void {\r\n        this.setState({\r\n            showNewCharForm: false\r\n        });\r\n        this.UpdateCharacterData();\r\n    }\r\n\r\n    public constructor(props: ICharacterManagerProps) {\r\n        super(props);\r\n        this.state = {\r\n            currentCharacterData: undefined,\r\n            allCharactersData: [],\r\n            isLoading: true,\r\n            showNewCharForm: false\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        let allCharacterNames: string[] = this.state.allCharactersData.map(acn => acn.Name);\r\n\r\n        return (\r\n            <div className=\"character-manager\">\r\n                <NewCharacterForm\r\n                    existingCharacterNames={allCharacterNames}\r\n                    show={this.state.showNewCharForm}\r\n                    onHideModal={this.handleHideModal.bind(this)}\r\n                    onFormSubmission={this.handleSubmitNewCharForm.bind(this)}\r\n                />\r\n                <CurrentCharacterStatus\r\n                    currentCharacterData={this.state.currentCharacterData}\r\n                />\r\n                <CharacterSelector\r\n                    newCharacterButtonCallback={this.handleNewCharButtonClick.bind(this)}\r\n                    characterSelectedCallback={this.handleCharacterSelected.bind(this)}\r\n                    allCharacterData={this.state.allCharactersData}\r\n                    isLoading={this.state.isLoading}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.UpdateCharacterData();\r\n    }\r\n\r\n    private handleCharacterSelected(charData: PlayerCharacterData): void {\r\n        PlayerInventoryService.SetCurrentCharacter(charData.Name);\r\n        this.UpdateCharacterData();\r\n    }\r\n\r\n    private UpdateCharacterData(): void {\r\n        PlayerInventoryService.FetchAllCharacters().then(characterData => {\r\n            let currentCharacter: PlayerCharacterData | undefined = undefined;\r\n            let characterName: string | null = PlayerInventoryService.GetCurrentCharacterName();\r\n\r\n            if (characterData) {\r\n                currentCharacter = characterData.find(c => c.Name === characterName);\r\n            }\r\n\r\n            this.setState({\r\n                currentCharacterData: currentCharacter,\r\n                allCharactersData: characterData,\r\n                isLoading: false\r\n            });\r\n\r\n            // Modify our existing singleton that tracks our current character selection.\r\n            CharacterStateManager.GetInstance().ChangeStaticCharacterData(currentCharacter);\r\n        });\r\n    }\r\n}\r\n","import '../LandingSpace.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport React from 'react';\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\nimport { LoginPage } from '../../LoginPage/React/LoginPage';\r\nimport { ProtectedRoute } from './ProtectedRoute';\r\nimport { CharacterImage } from '../../CharacterImage/React/CharacterImage';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport { Inventory } from '../../Inventory/React/Inventory';\r\nimport { CharacterManager } from '../../CharacterManager/React/CharacterManager';\r\n\r\n// Use the hash router instead of a browser router so that refreshes and direct-links to pages work.\r\n//https://stackoverflow.com/questions/27928372/react-router-urls-dont-work-when-refreshing-or-writing-manually\r\nexport default function LandingSpace() {\r\n    return (\r\n        <div className=\"landing-space\">\r\n            <div className=\"page-nav\">\r\n                <Navbar expand=\"lg\" bg=\"dark\">\r\n                    <Navbar.Brand style={{ color: \"white\" }} href=\"/\">LantsPants.com</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-pagebar-nav\" />\r\n                    <Navbar.Collapse>\r\n                        <Nav defaultActiveKey=\"/\">\r\n                            <Nav.Link\r\n                                href=\"/#/character_creator\"\r\n                                eventKey=\"character_creator\"\r\n                                style={{ color: \"white\" }}>\r\n                                Character Creator\r\n                            </Nav.Link>\r\n                            <Nav.Link\r\n                                href=\"/#/inventory\"\r\n                                eventKey=\"inventory\"\r\n                                style={{ color: \"white\" }}>\r\n                                Inventory\r\n                            </Nav.Link>\r\n                            <Nav.Link\r\n                                href=\"/#/characterManager\"\r\n                                eventKey=\"characterManager\"\r\n                                style={{ color: \"white\" }}>\r\n                                Characters\r\n                            </Nav.Link>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n            </div>\r\n            <div className=\"page-content\">\r\n                <Router>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" children={<LoginPage />} />\r\n                        <Route exact path=\"/login\" children={<LoginPage />} />\r\n                        <Route exact path=\"/character_creator\" children={<CharacterImage />} />\r\n                        <ProtectedRoute path=\"/inventory\" children={<Inventory />} />\r\n                        <ProtectedRoute path=\"/characterManager\" children={<CharacterManager />} />\r\n                    </Switch>\r\n                </Router>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport LandingSpace from './Routing/React/LandingSpace';\r\n\r\nReactDOM.render(<LandingSpace />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}