{"version":3,"sources":["BodyMap.tsx","BodySelector.tsx","PartSelector.tsx","PartAccordion.tsx","Canvas.tsx","CharacterCreator.tsx","serviceWorker.ts","index.tsx"],"names":["bodyMaps","Array","push","name","description","imageSource","layers","avgMasculineLayers","avgFeminineLayers","BodySelector","props","Card","bg","style","width","borderColor","boxShadow","Button","className","variant","onClick","bodyMap","Img","src","Body","Title","Text","PartSelector","layerIndex","rounded","PartAccordion","layer","images","map","this","background","text","Accordion","Toggle","as","Header","eventKey","toString","cursor","key","Collapse","renderPartsButtons","renderPartCards","React","Component","Canvas","canvasHeight","canvasWidth","backgroundColors","handleBackgroundColorChange","color","setState","backgroundColor","hex","state","refs","canvas","getContext","imageSmoothingEnabled","prevProps","imagesToRender","ctx","clearRect","forEach","imgSrc","htmlImg","Image","onload","drawImage","height","bgColor","id","ref","Container","fluid","Row","onChangeComplete","colors","onClickDownload","document","getElementById","CharacterCreator","canvasImages","partLayers","downloadUrl","toDataURL","link","createElement","download","href","click","newCanvasImages","slice","newImagesToRender","body","handleBodySelection","canvasImagesToRender","currentBodyMap","Col","lg","downloadImage","layerName","handlePartSelection","CardColumns","renderBodySelection","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e12298f5.chunk.js","sourcesContent":["import avgFeminineLayers from './json/avgFeminine.json';\r\nimport avgMasculineLayers from './json/avgMasculine.json';\r\n\r\n/**\r\n * @description\r\n * The contents of each image \"layer\" that can be overlayed on top of the character image. This contains info\r\n * about what the layer is called (e.g. 'clothing', or 'hats'), what the z-layer info is for the layer, and a\r\n * list of possible image sources that are contained in the image layer.\r\n * @param key The name of the layer.\r\n * @param layerIndex The z-index of the layer. The higher the number, the more 'in front' that the layer is.\r\n * @param images A list of possible image sources that are drawn in this layer. Only one of these can be drawn\r\n * from this list at a time (this is intentional).\r\n */\r\nexport type ImageLayer = {\r\n    key: string;\r\n    layerIndex: number;\r\n    images: string[];\r\n}\r\n\r\n/**\r\n * @description\r\n * A mapping from the body that will be displayed to the list of layers associated with that body.\r\n */\r\nexport type BodyMap = {\r\n    name: string;\r\n    description: string;\r\n    imageSource: string;\r\n    layers: ImageLayer[];\r\n}\r\n\r\n/**\r\n * @remarks The layer index for every layer starts at 1. This is because '0' is reserved for the base\r\n * body. Setting this to '0' on a layer will remove the base body.\r\n */\r\nexport var bodyMaps: BodyMap[] = new Array(0);\r\nbodyMaps.push({\r\n    name: 'Masculine, Average-Sized',\r\n    description: \"Masculine body type! Of average size; good for humans, elves, and orcs\",\r\n    imageSource: \"./images/Size_Average/0-Body/Male/Base_Male_Tan.png\",\r\n    layers: avgMasculineLayers\r\n}, {\r\n    name: 'Feminine, Average-Sized',\r\n    description: \"Feminine body type! Of average size; good for humans, elves, and orcs\",\r\n    imageSource: \"./images/Size_Average/0-Body/Female/Base_Female_Tan.png\",\r\n    layers: avgFeminineLayers\r\n}\r\n);\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { BodyMap } from './BodyMap';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\ninterface IBodySelector {\r\n    onClick: Function;\r\n    bodyMap: BodyMap;\r\n}\r\n\r\nexport function BodySelector(props: IBodySelector) {\r\n    return (\r\n        <Card\r\n            bg='dark'\r\n            style={{\r\n                width: '18rem',\r\n                borderColor: 'rgba(255, 255, 255, 0.05)',\r\n                boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'\r\n            }}>\r\n            <Button\r\n                className='bodySelector'\r\n                variant='dark'\r\n                style={{\r\n                    borderColor: 'rgba(255, 255, 255, 0.05)',\r\n                    boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'\r\n                }}\r\n                onClick={() => props.onClick(props.bodyMap)}>\r\n                <Card.Img src={props.bodyMap.imageSource} />\r\n                <Card.Body\r\n                    className='body-selector-card'>\r\n                    <Card.Title>{props.bodyMap.name}</Card.Title>\r\n                    <Card.Text>{props.bodyMap.description}</Card.Text>\r\n                </Card.Body>\r\n            </Button>\r\n        </Card>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\ninterface IPartSelector {\r\n    onClick: Function;\r\n    layerIndex: number;\r\n    imageSource: string;\r\n}\r\n\r\nexport default function PartSelector(props: IPartSelector) {\r\n    return (\r\n        <Button\r\n            className='part-selector-button'\r\n            variant='dark'\r\n            style={{\r\n                borderColor: 'rgba(255, 255, 255, 0.05)',\r\n                boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'\r\n            }}\r\n            onClick={() => props.onClick(props.layerIndex, props.imageSource)}>\r\n            <Image\r\n                className='partSelector'\r\n                src={props.imageSource}\r\n                rounded />\r\n        </Button>\r\n    )\r\n}","import React from 'react';\r\nimport { ImageLayer } from './BodyMap';\r\nimport PartSelector from './PartSelector';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\n\r\ninterface IPartAccordion {\r\n    layers: ImageLayer[];\r\n    onClick: Function;\r\n}\r\n\r\nexport class PartAccordion extends React.Component<IPartAccordion> {\r\n    renderPartsButtons(layer: ImageLayer) {\r\n        return layer.images.map((src) => {\r\n            return (\r\n                <PartSelector\r\n                    onClick={this.props.onClick}\r\n                    layerIndex={layer.layerIndex}\r\n                    imageSource={src}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    renderPartCards() {\r\n        return this.props.layers.map((layer) => {\r\n            return (\r\n                <Card style={{ background: 'rgba(255, 255, 255, 0.07)' }} text=\"white\">\r\n                    <Accordion.Toggle as={Card.Header} eventKey={layer.layerIndex.toString()}\r\n                        style={{ cursor: \"pointer\" }}>\r\n                        {layer.key}\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey={layer.layerIndex.toString()}>\r\n                        <Card.Body>\r\n                            {this.renderPartsButtons(layer)}\r\n                        </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderPartCards()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// https://blog.cloudboost.io/using-html5-canvas-with-react-ff7d93f5dc76\r\nimport React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Color, ColorResult, CirclePicker } from 'react-color';\r\nimport { Container } from 'react-bootstrap';\r\nimport { Row } from 'react-bootstrap';\r\nimport { Col } from 'react-bootstrap';\r\n\r\ninterface ICanvasProps {\r\n    imagesToRender: Array<string>;\r\n    onClickDownload: Function;\r\n}\r\n\r\ninterface ICanvasState {\r\n    backgroundColor: Color;\r\n}\r\n\r\nexport class Canvas extends React.Component<ICanvasProps, ICanvasState> {\r\n    canvasHeight: number = 256;\r\n    canvasWidth: number = 256;\r\n    backgroundColors: string[] = [\"#131313\", \"#ffffff\", ];\r\n\r\n    constructor(props: Readonly<ICanvasProps>) {\r\n        super(props);\r\n        this.state = {\r\n            backgroundColor: '#ffffff'\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const canvas = this.refs.canvas as HTMLCanvasElement;\r\n        const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n        ctx.imageSmoothingEnabled = false;\r\n    }\r\n\r\n    handleBackgroundColorChange = (color: ColorResult) => {\r\n        this.setState({\r\n            backgroundColor: color.hex\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ICanvasProps)\r\n    {\r\n        if (this.props.imagesToRender !== prevProps.imagesToRender)\r\n        {\r\n            // this.setState(this.state, this.props);\r\n\r\n            const canvas = this.refs.canvas as HTMLCanvasElement;\r\n            const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n            // Always empty the canvas before we decide to muss with it again.\r\n            ctx.clearRect(0, 0, this.canvasHeight, this.canvasWidth);\r\n            \r\n            // Muss with it again! This draws each of the images in our props field one-after-another.\r\n            this.props.imagesToRender.forEach((imgSrc: string) => {\r\n                var htmlImg = new Image(this.canvasWidth, this.canvasHeight);\r\n                htmlImg.src = imgSrc;\r\n                \r\n                htmlImg.onload = () => {\r\n                    ctx.drawImage(htmlImg, 0, 0, htmlImg.width, htmlImg.height);\r\n                };\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var bgColor: string = this.state.backgroundColor.toString();\r\n\r\n        return (\r\n            <div>\r\n                <canvas style={{ backgroundColor: bgColor }} id=\"characterCanvas\" ref=\"canvas\" width={this.canvasWidth} height={this.canvasHeight} />\r\n                <Container fluid={true} className='d-flex justify-content-center'>\r\n                    <Row>\r\n                        <CirclePicker\r\n                            onChangeComplete={this.handleBackgroundColorChange}\r\n                            color={bgColor}\r\n                            colors={this.backgroundColors}\r\n                        />\r\n                    </Row>\r\n                </Container>\r\n                <Button\r\n                    variant=\"primary\"\r\n                    className=\"downloadButton\"\r\n                    onClick={() => this.props.onClickDownload(document.getElementById('characterCanvas'))}>\r\n                    <h4>&gt;&gt; DOWNLOAD &lt;&lt;</h4>\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}","import './CharacterCreator.css';\r\nimport { bodyMaps, BodyMap, ImageLayer } from './BodyMap';\r\n\r\nimport React from 'react';\r\n\r\nimport {BodySelector} from './BodySelector';\r\nimport {PartAccordion} from './PartAccordion';\r\nimport {Canvas} from './Canvas';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport CardColumns from 'react-bootstrap/CardColumns'\r\n\r\n/**\r\n * @description\r\n * The interface for props passed to this object. This class in particular takes no props; it is effectively\r\n * the app itself.\r\n */\r\ninterface ICharacterCreatorProps {\r\n};\r\n\r\n/**\r\n * @description\r\n * The interface for the internal state maintained by this object.\r\n * @param canvasImages The list of image sources, represented as strings, that will be rendered using the\r\n * Canvas class.\r\n * @param partLayers A list of image layers. This contains information about all of the possible layers that\r\n * can be drawn to the currently-selected body type. This contains information about what each layer is, how\r\n * that layer is drawn, and what the possible images are in that layer.\r\n */\r\ninterface ICharacterCreatorState {\r\n    canvasImages: Array<string>,\r\n    partLayers: ImageLayer[]\r\n};\r\n\r\n/**\r\n * The main entry point for this application. Provides all of the buttons and fun stuff needed to create a\r\n * character image on a canvas element.\r\n */\r\nclass CharacterCreator extends React.Component<ICharacterCreatorProps, ICharacterCreatorState> {\r\n    constructor(props: ICharacterCreatorProps) {\r\n        super(props);\r\n        this.state = {\r\n            // Just fill the canvas images with nothing. We'll re-define it when we add to it.\r\n            canvasImages: new Array<string>(),\r\n            partLayers: Array(0)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description\r\n     * Used to download the main character image from the canvas. This is a callback that is passed down to\r\n     * the canvas element.\r\n     * @param canvas The canvas html element from the Canvas character creator class.\r\n     */\r\n    downloadImage(canvas: HTMLCanvasElement)\r\n    {\r\n        const downloadUrl = canvas.toDataURL('image/png');\r\n        const link = document.createElement('a');\r\n\r\n        link.download = 'characterImage.png';\r\n        link.href = downloadUrl;\r\n        link.click();\r\n    }\r\n\r\n    /**\r\n     * A handler for a part selector. Replaces the image at the specified index with a new image.\r\n     * @param layerIndex The index of the layer. This is the z-layer, effectively. The higher the number, the\r\n     * more layers that it draws over.\r\n     * @param imageSource The image source. This is what gets drawn.\r\n     */\r\n    handlePartSelection(layerIndex: number, imageSource: string) {\r\n        const newCanvasImages: Array<string> = this.state.canvasImages.slice();\r\n\r\n        // Javascript doesn't have arrays of fixed length, so this is safe? Still getting used to this.\r\n        newCanvasImages[layerIndex] = imageSource;\r\n\r\n        this.setState({\r\n            canvasImages: newCanvasImages\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Handles the prop-pass from the body-type selector.\r\n     * @param bodyType The type of body that this character creator should acknowledge.\r\n     */\r\n    handleBodySelection(bodyMap: BodyMap) {\r\n        const newImagesToRender: Array<string> = new Array<string>(0);\r\n\r\n        // Javascript doesn't have arrays of fixed length, so this is safe? Still getting used to this.\r\n        newImagesToRender[0] = bodyMap.imageSource;\r\n\r\n        this.setState({\r\n            canvasImages: newImagesToRender,\r\n            partLayers: bodyMap.layers\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description\r\n     * Renders a series of body selectors for the user to pick from. These body selectors will modify the list\r\n     * of available accessories (since a tiny hat looks silly on a giant person . . . or does it?). Needs to\r\n     * look at the BodyMap.tsx file to understand what will be populated.\r\n     */\r\n    renderBodySelection() {\r\n        return bodyMaps.map((bodyMap) => {\r\n            return (\r\n                <BodySelector\r\n                    onClick={(body: BodyMap) => this.handleBodySelection(body)}\r\n                    bodyMap={bodyMap}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Renders this object.\r\n     */\r\n    render() {\r\n        const canvasImagesToRender = this.state.canvasImages;\r\n        const currentBodyMap = this.state.partLayers;\r\n\r\n        return (\r\n            <div className=\"CharacterCreator\">\r\n                <h1>Character Creator</h1>\r\n                <Container>\r\n                    <Row className=\"align-items-center\">\r\n                        <Col lg={true} className='TopSplit'>\r\n                            <Canvas\r\n                                imagesToRender={canvasImagesToRender}\r\n                                onClickDownload={(canvas: HTMLCanvasElement) => this.downloadImage(canvas)}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col lg={true} className='BottomSplit'>\r\n                            <h2>Accessory Selection</h2>\r\n                            <p className=\"italics\">(You need to select a body first if this is empty)</p>\r\n                            <Accordion>\r\n                                <PartAccordion\r\n                                    layers={currentBodyMap}\r\n                                    onClick={(layerName: number, imageSource: string) => this.handlePartSelection(layerName, imageSource)}\r\n                                />\r\n                            </Accordion>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col lg={true} className='BottomSplit'>\r\n                            <h2>Body Selection</h2>\r\n                            <p className=\"italics\">(Each body type uses different accessories and will reset your character design)</p>\r\n                            <CardColumns>\r\n                                {this.renderBodySelection()}\r\n                            </CardColumns>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CharacterCreator;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CharacterCreator from './CharacterCreator'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<CharacterCreator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}