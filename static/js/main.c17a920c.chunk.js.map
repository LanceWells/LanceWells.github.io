{"version":3,"sources":["BodyMap.tsx","BodySelector.tsx","Canvas.tsx","PartSelector.tsx","PartAccordion.tsx","CharacterCreator.tsx","serviceWorker.ts","index.tsx"],"names":["bodyMaps","Array","push","imageSource","layers","key","layerIndex","images","BodySelector","props","Button","variant","onClick","bodyMap","className","src","roundedCircle","Canvas","canvasHeight","canvasWidth","this","refs","canvas","getContext","imageSmoothingEnabled","prevProps","imagesToRender","setState","ctx","clearRect","forEach","imgSrc","htmlImg","Image","onload","drawImage","width","height","ref","React","Component","PartSelector","PartAccordion","layer","map","Card","Accordion","Toggle","as","Header","eventKey","toString","style","cursor","Collapse","Body","renderPartsButtons","renderPartCards","CharacterCreator","state","canvasImages","partLayers","newCanvasImages","slice","newImagesToRender","body","handleBodySelection","canvasImagesToRender","currentBodyMap","Container","fluid","Row","Col","xs","lg","ButtonGroup","renderBodySelection","defaultActiveKey","layerName","handlePartSelection","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAeaA,G,MAAsB,IAAIC,MAAM,IAC7CD,EAASE,KAAK,CACVC,YAAa,8BACbC,OAAQ,CAAC,CACLC,IAAK,WACLC,WAAY,EACZC,OAAQ,CACJ,2BACA,gDAGT,CACCJ,YAAa,+BACbC,OAAQ,CAAC,CACLC,IAAK,WACLC,WAAY,EACZC,OAAQ,CACJ,2BACA,gDAGR,CACIF,IAAK,WACLC,WAAY,EACZC,OAAQ,CACJ,4C,oBC9BG,SAASC,EAAaC,GACjC,OACI,kBAACC,EAAA,EAAD,CACIC,QAAQ,eACRC,QAAS,kBAAMH,EAAMG,QAAQH,EAAMI,WACnC,kBAAC,IAAD,CACIC,UAAU,eACVC,IAAKN,EAAMI,QAAQV,YACnBa,eAAa,K,IC+BdC,E,2MAzCXC,aAAuB,I,EACvBC,YAAsB,I,mFAGHC,KAAKC,KAAKC,OACNC,WAAW,MAC1BC,uBAAwB,I,yCAGbC,GAClB,IAAD,OACI,GAAIL,KAAKX,MAAMiB,iBAAmBD,EAAUC,eAC5C,CACIN,KAAKO,SAASP,KAAKX,OAEnB,IACMmB,EADSR,KAAKC,KAAKC,OACNC,WAAW,MAG9BK,EAAIC,UAAU,EAAG,EAAGT,KAAKF,aAAcE,KAAKD,aAG5CC,KAAKX,MAAMiB,eAAeI,SAAQ,SAACC,GAC/B,IAAIC,EAAU,IAAIC,MAAM,EAAKd,YAAa,EAAKD,cAC/Cc,EAAQjB,IAAMgB,EAEdC,EAAQE,OAAS,WACbN,EAAIO,UAAUH,EAAS,EAAG,EAAGA,EAAQI,MAAOJ,EAAQK,e,+BAOhE,OACI,6BACI,4BAAQC,IAAI,SAASF,MAAOhB,KAAKD,YAAakB,OAAQjB,KAAKF,oB,GArCtDqB,IAAMC,W,gDCGZ,SAASC,EAAahC,GACjC,OACI,kBAACC,EAAA,EAAD,CACIC,QAAQ,eACRC,QAAS,kBAAMH,EAAMG,QAAQH,EAAMH,WAAYG,EAAMN,eACrD,kBAAC,IAAD,CACIW,UAAU,eACVC,IAAKN,EAAMN,YACXa,eAAa,K,YCPhB0B,EAAb,2LACuBC,GAAoB,IAAD,OAClC,OAAOA,EAAMpC,OAAOqC,KAAI,SAAC7B,GACrB,OACI,kBAAC0B,EAAD,CACI7B,QAAS,EAAKH,MAAMG,QACpBN,WAAYqC,EAAMrC,WAClBH,YAAaY,SAPjC,wCAauB,IAAD,OACd,OAAOK,KAAKX,MAAML,OAAOwC,KAAI,SAACD,GAC1B,OACI,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAUC,OAAX,CAAkBC,GAAIH,IAAKI,OAAQC,SAAUP,EAAMrC,WAAW6C,WAC1DC,MAAO,CAAEC,OAAQ,YAChBV,EAAMtC,KAEX,kBAACyC,EAAA,EAAUQ,SAAX,CAAoBJ,SAAUP,EAAMrC,WAAW6C,YAC3C,kBAACN,EAAA,EAAKU,KAAN,KACK,EAAKC,mBAAmBb,WAvBrD,+BAyCQ,OACI,6BACKvB,KAAKqC,uBA3CtB,GAAmClB,IAAMC,WCsG1BkB,E,YApFX,WAAYjD,GAAgC,IAAD,8BACvC,4CAAMA,KACDkD,MAAQ,CAETC,aAAc,IAAI3D,MAClB4D,WAAY5D,MAAM,IALiB,E,iFASvBK,EAAoBH,GACpC,IAAM2D,EAAiC1C,KAAKuC,MAAMC,aAAaG,QAC/DD,EAAgBxD,GAAeH,EAE/BiB,KAAKO,SAAS,CACViC,aAAcE,M,0CAQFjD,GAChB,IAAMmD,EAAmC,IAAI/D,MAAc,GAG3D+D,EAAkB,GAAKnD,EAAQV,YAE/BiB,KAAKO,SAAS,CACViC,aAAcI,EACdH,WAAYhD,EAAQT,W,4CASL,IAAD,OAClB,OAAOJ,EAAS4C,KAAI,SAAC/B,GACjB,OACI,kBAACL,EAAD,CACII,QAAS,SAACqD,GAAD,OAAmB,EAAKC,oBAAoBD,IACrDpD,QAASA,S,+BASf,IAAD,OACCsD,EAAuB/C,KAAKuC,MAAMC,aAClCQ,EAAiBhD,KAAKuC,MAAME,WAElC,OACI,yBAAK/C,UAAU,oBACX,kBAACuD,EAAA,EAAD,CAAWC,OAAO,GACd,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,IAAE,EAACC,GAAG,IAAI5D,UAAU,aACrB,sCACA,kBAAC,EAAD,CAAQY,eAAgByC,KAE5B,kBAACK,EAAA,EAAD,CAAK1D,UAAU,cACX,0CACA,kBAAC6D,EAAA,EAAD,KACKvD,KAAKwD,uBAEV,kBAAC9B,EAAA,EAAD,CAAW+B,iBAAiB,KACxB,kBAAC,EAAD,CACIzE,OAAQgE,EACRxD,QAAS,SAACkE,EAAmB3E,GAApB,OAA4C,EAAK4E,oBAAoBD,EAAW3E,e,GA1E9FoC,IAAMC,WChBjBwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAsBC,SAASC,eAAe,SDmIxD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c17a920c.chunk.js","sourcesContent":["export type ImageLayer = {\r\n    key: string;\r\n    layerIndex: number;\r\n    images: string[];\r\n}\r\n\r\nexport type BodyMap = {\r\n    imageSource: string;\r\n    layers: ImageLayer[];\r\n}\r\n\r\n/**\r\n * @remarks The layer index for every layer starts at 1. This is because '0' is reserved for the base\r\n * body. Setting this to '0' on a layer will remove the base body.\r\n */\r\nexport const bodyMaps: BodyMap[] = new Array(0);\r\nbodyMaps.push({\r\n    imageSource: \"./images/BodyTypes/Blue.png\",\r\n    layers: [{\r\n        key: \"Clothing\",\r\n        layerIndex: 1,\r\n        images: [\r\n            \"./images/Empty/Empty.png\",\r\n            \"./images/BlueAccessories/BlueTriangle.png\"\r\n        ]\r\n    }]\r\n}, {\r\n    imageSource: \"./images/BodyTypes/Green.png\",\r\n    layers: [{\r\n        key: \"Clothing\",\r\n        layerIndex: 1,\r\n        images: [\r\n            \"./images/Empty/Empty.png\",\r\n            \"./images/GreenAccessories/GreenTriangle.png\"\r\n        ],\r\n    },\r\n    {\r\n        key: \"Sparkles\",\r\n        layerIndex: 2,\r\n        images: [\r\n            \"./images/Sparkles/YellowSparkles.png\"\r\n        ]\r\n    }]\r\n});","import React from 'react';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {BodyMap} from './BodyMap';\r\n\r\ninterface IBodySelector {\r\n    onClick: Function;\r\n    bodyMap: BodyMap;\r\n}\r\n\r\nexport default function BodySelector(props: IBodySelector) {\r\n    return (\r\n        <Button\r\n            variant='outline-dark'\r\n            onClick={() => props.onClick(props.bodyMap)}>\r\n            <Image\r\n                className=\"bodySelector\"\r\n                src={props.bodyMap.imageSource}\r\n                roundedCircle />\r\n        </Button>\r\n    )\r\n}\r\n","// https://blog.cloudboost.io/using-html5-canvas-with-react-ff7d93f5dc76\r\nimport React from 'react';\r\n\r\ninterface ICanvasProps {\r\n    imagesToRender: Array<string>;\r\n}\r\n\r\nclass Canvas extends React.Component<ICanvasProps> {\r\n    canvasHeight: number = 256;\r\n    canvasWidth: number = 256;\r\n\r\n    componentDidMount() {\r\n        const canvas = this.refs.canvas as HTMLCanvasElement;\r\n        const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n        ctx.imageSmoothingEnabled = false;\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ICanvasProps)\r\n    {\r\n        if (this.props.imagesToRender !== prevProps.imagesToRender)\r\n        {\r\n            this.setState(this.props);\r\n\r\n            const canvas = this.refs.canvas as HTMLCanvasElement;\r\n            const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n            // Always empty the canvas before we decide to muss with it again.\r\n            ctx.clearRect(0, 0, this.canvasHeight, this.canvasWidth);\r\n            \r\n            // Muss with it again! This draws each of the images in our props field one-after-another.\r\n            this.props.imagesToRender.forEach((imgSrc: string) => {\r\n                var htmlImg = new Image(this.canvasWidth, this.canvasHeight);\r\n                htmlImg.src = imgSrc;\r\n                \r\n                htmlImg.onload = () => {\r\n                    ctx.drawImage(htmlImg, 0, 0, htmlImg.width, htmlImg.height);\r\n                };\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <canvas ref=\"canvas\" width={this.canvasWidth} height={this.canvasHeight} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Canvas;","import React from 'react';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\ninterface IPartSelector {\r\n    onClick: Function;\r\n    layerIndex: number;\r\n    imageSource: string;\r\n}\r\n\r\nexport default function PartSelector(props: IPartSelector) {\r\n    return (\r\n        <Button\r\n            variant='outline-dark'\r\n            onClick={() => props.onClick(props.layerIndex, props.imageSource)}>\r\n            <Image\r\n                className='partSelector'\r\n                src={props.imageSource}\r\n                roundedCircle />\r\n        </Button>\r\n    )\r\n}","import React from 'react';\r\nimport { ImageLayer } from './BodyMap';\r\nimport PartSelector from './PartSelector';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\n\r\ninterface IPartAccordion {\r\n    layers: ImageLayer[];\r\n    onClick: Function;\r\n}\r\n\r\nexport class PartAccordion extends React.Component<IPartAccordion> {\r\n    renderPartsButtons(layer: ImageLayer) {\r\n        return layer.images.map((src) => {\r\n            return (\r\n                <PartSelector\r\n                    onClick={this.props.onClick}\r\n                    layerIndex={layer.layerIndex}\r\n                    imageSource={src}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    renderPartCards() {\r\n        return this.props.layers.map((layer) => {\r\n            return (\r\n                <Card>\r\n                    <Accordion.Toggle as={Card.Header} eventKey={layer.layerIndex.toString()}\r\n                        style={{ cursor: \"pointer\" }}>\r\n                        {layer.key}\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey={layer.layerIndex.toString()}>\r\n                        <Card.Body>\r\n                            {this.renderPartsButtons(layer)}\r\n                        </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n            );\r\n        });\r\n    }\r\n\r\n    // renderPartCards() {\r\n    //     const layers = this.props.layers;\r\n    //     return layers.map((layer) => {\r\n    //         return (\r\n    //             <h1>{layer.key}</h1>\r\n    //         );\r\n    //     });\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderPartCards()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import './CharacterCreator.css';\r\nimport { bodyMaps, BodyMap, ImageLayer } from './BodyMap';\r\n\r\nimport React from 'react';\r\n\r\nimport BodySelector from './BodySelector';\r\nimport Canvas from './Canvas';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport {PartAccordion} from './PartAccordion';\r\n\r\ninterface ICharacterCreatorProps {\r\n};\r\n\r\ninterface ICharacterCreatorState {\r\n    canvasImages: Array<string>,\r\n    partLayers: ImageLayer[]\r\n};\r\n\r\n/**\r\n * The main entry point for this application. Provides all of the buttons and fun stuff needed to create a\r\n * character image on a canvas element.\r\n */\r\nclass CharacterCreator extends React.Component<ICharacterCreatorProps, ICharacterCreatorState> {\r\n    constructor(props: ICharacterCreatorProps) {\r\n        super(props);\r\n        this.state = {\r\n            // Just fill the canvas images with nothing. We'll re-define it when we add to it.\r\n            canvasImages: new Array<string>(),\r\n            partLayers: Array(0)\r\n        }\r\n    }\r\n\r\n    handlePartSelection(layerIndex: number, imageSource: string) {\r\n        const newCanvasImages: Array<string> = this.state.canvasImages.slice();\r\n        newCanvasImages[layerIndex] =  imageSource;\r\n\r\n        this.setState({\r\n            canvasImages: newCanvasImages\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Handles the prop-pass from the body-type selector.\r\n     * @param bodyType The type of body that this character creator should acknowledge.\r\n     */\r\n    handleBodySelection(bodyMap: BodyMap) {\r\n        const newImagesToRender: Array<string> = new Array<string>(0);\r\n\r\n        // Javascript doesn't have arrays of fixed length, so this is safe? Still getting used to this.\r\n        newImagesToRender[0] = bodyMap.imageSource;\r\n\r\n        this.setState({\r\n            canvasImages: newImagesToRender,\r\n            partLayers: bodyMap.layers\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Renders a series of body selectors for the user to pick from. These body selectors will modify the list\r\n     * of available accessories (since a tiny hat looks silly on a giant person . . . or does it?). Needs to\r\n     * look at a json file (json/bodySelection.json) to understand what to populate.\r\n     */\r\n    renderBodySelection() {\r\n        return bodyMaps.map((bodyMap) => {\r\n            return (\r\n                <BodySelector\r\n                    onClick={(body: BodyMap) => this.handleBodySelection(body)}\r\n                    bodyMap={bodyMap}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Renders this object.\r\n     */\r\n    render() {\r\n        const canvasImagesToRender = this.state.canvasImages;\r\n        const currentBodyMap = this.state.partLayers;\r\n\r\n        return (\r\n            <div className=\"CharacterCreator\">\r\n                <Container fluid={true}>\r\n                    <Row>\r\n                        <Col xs lg=\"4\" className='LeftSplit'>\r\n                            <h1>HELLO!</h1>\r\n                            <Canvas imagesToRender={canvasImagesToRender} />\r\n                        </Col>\r\n                        <Col className='RightSplit'>\r\n                            <h1>HELLLOOOOO</h1>\r\n                            <ButtonGroup>\r\n                                {this.renderBodySelection()}\r\n                            </ButtonGroup>\r\n                            <Accordion defaultActiveKey=\"1\">\r\n                                <PartAccordion\r\n                                    layers={currentBodyMap}\r\n                                    onClick={(layerName: number, imageSource: string) => this.handlePartSelection(layerName, imageSource)}\r\n                                />\r\n                            </Accordion>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CharacterCreator;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CharacterCreator from './CharacterCreator'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<CharacterCreator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}