{"version":3,"sources":["serviceWorker.ts","FirebaseAuth/Enums/AuthState.ts","FirebaseAuth/Classes/UserDataAuth.ts","LoginPage/Enums/LoginState.ts","FirebaseAuth/Types/PlayerCharacterData.ts","CharacterImage/Enums/PartType.ts","CharacterImage/Classes/CharImageLayout.ts","FirebaseAuth/Classes/PlayerInventoryService.ts","FirebaseAuth/Classes/CharacterStateManager.ts","LoginPage/React/LoginPage.tsx","Routing/React/ProtectedRoute.tsx","CharacterImage/React/PartButton.tsx","CharacterImage/Enums/BodyType.ts","CharacterImage/React/PartTypeSelector.tsx","CharacterImage/React/PartBodySelector.tsx","CharacterImage/Enums/BodyDescription.ts","CharacterImage/React/PartSelector.tsx","CharacterImage/Classes/CharacterImageMap.ts","CharacterImage/React/CharacterImageCanvas.tsx","CharacterImage/Enums/CharacterSize.ts","CharacterImage/React/CharacterDrawingArea.tsx","CharacterImage/React/CharacterImage.tsx","ItemData/Enums/SourceType.ts","ItemData/Enums/ItemType.ts","ItemData/Classes/Item.tsx","ItemData/Classes/ItemWeapon.tsx","ItemData/Classes/ItemPotion.tsx","ItemData/Classes/ItemArmor.tsx","ItemData/Classes/ItemWondrous.tsx","ItemData/Enums/WeaponProperties.ts","ItemData/Enums/DamageType.ts","ItemData/Classes/ItemSource.ts","ItemData/React/AttackRollModal.tsx","Utilities/React/LoadingPlaceholder.tsx","Utilities/React/StylizedModal.tsx","ItemData/React/ItemDetailsModal.tsx","ItemData/React/DTwenty.tsx","ItemData/React/CardIcon.tsx","ItemData/React/CardButtons/AttackButton.tsx","ItemData/React/CardButtons/AddButton.tsx","ItemData/React/CardButtons/PurchaseButton.tsx","ItemData/React/CardButtons/RemoveButton.tsx","ItemData/React/ItemCard.tsx","ItemData/Enums/CardInteractions.ts","Inventory/React/InventoryTab.tsx","Inventory/React/Inventory.tsx","CharacterManager/React/CurrentCharacterStatus.tsx","CharacterManager/React/CharacterSelectionButton.tsx","CharacterManager/React/NewCharacterButton.tsx","CharacterManager/React/CharacterSelector.tsx","CharacterManager/React/NewCharacterForm.tsx","CharacterInfo/React/CharacterInfoContainer.tsx","CharacterManager/React/CharacterManager.tsx","Inventory/Classes/MoneyConverter.ts","CharacterInfo/React/MoneyDisplay.tsx","CharacterInfo/React/MoneyAdjustModal.tsx","Routing/React/LandingSpace.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AuthState","LoginState","UserDataAuth","_authState","salt","_username","this","Checking","BCrypt","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","auth","onAuthStateChanged","HandleAuthStateChanged","bind","uid","currentUser","undefined","Unauthorized","signOut","email","password","loginResponse","DidLogin","Errors","setPersistence","Auth","Persistence","LOCAL","catch","error","errorMessage","message","console","push","signInWithEmailAndPassword","then","passwordDupe","createResponse","DidCreate","passwordHash","length","createUserWithEmailAndPassword","fulfilledValue","log","rejectedValue","Promise","resolve","reject","timeoutWaiting","setTimeout","user","clearTimeout","Authorized","_instance","MaxPasswordLength","PartType","PlayerCharacterData","name","copper","items","charLayout","borderColor","Name","Copper","Items","CharLayout","BorderColor","map","item","JSON","stringify","itemJson","parse","filter","CharImageLayout","partMap","bodyType","_imageSelection","Map","_bodyType","objString","obj","imageSelection","partType","image","set","images","PartOrder","forEach","part","EnlistImageIfExists","objectToStringify","Array","from","has","get","BackAccessory","Body","Bottoms","Shoes","LowerArmor","Tops","UpperArmor","MidAccessory","ArmArmor","HandWear","Hair","FacialWear","HeadWear","Pets","Weapons","Eyes","PlayerInventoryService","characterData","GetInstance","GetUid","firestore","collection","collection_userWritable","doc","document_playerInventory","withConverter","PlayerCharacterDataConverter","reason","charDataDocument","toFirestore","update","playerName","response","playerDataRef","docSnapshot","exists","data","limit","empty","docs","allCharData","charData","newCharData","charName","localStorage","setItem","storage_currentCharacter","getItem","GetCurrentCharacterName","FetchCharacterData","playerCharacterData","GetItemsAsStringArray","GetJsonString","fromFirestore","snapshot","options","snapshotData","playerCopper","playerItemData","playerCharData","playerBorder","GetLayoutFromString","playerItems","GetStringArrayAsItems","CharacterStateManager","_observers","_currentCharacter","observer","find","obs","existingObserver","findIndex","splice","CheckForAccess","GetDefaultCharacter","NotifyObservers","ChangeStaticCharacterData","UpdateCharacterData","LoginPage","props","currentUsername","currentPassword","currentPassDupe","loginState","CheckingCredentials","CheckForLogin","state","pageState","errorMessages","className","toString","getErrorMessages","GetInternalRenderBits","Login","LoggedIn","onLogin","setState","Username","onClick","submitLogout","CreateAnAccount","action","method","onSubmit","submitCreateAccount","type","onChange","handleUsernameInput","handlePasswordInput","handlePassDupeInput","style","display","value","submitBackToLogin","submitLogin","submitGoToCreateAccount","e","event","preventDefault","loginPromise","loggedIn","Logout","CreateAccount","onResolve","onReject","input","target","React","Component","ProtectedRoute","routeStatus","GetComponentToRender","granted","path","children","to","PartButton","partSelectionCallback","imageSource","src","width","BodyType","PartTypeSelector","Dropdown","Toggle","id","Menu","GetPartTypes","Object","values","pt","Item","SelectionCallback","BodyDescription","PartBodySelector","GetBodyTypes","bt","PartSelector","bodyTypeSelectionCallback","partTypeSelectionCallback","GetPartButtons","partOptions","po","CharacterImageMap","charSize","CharImageMap","c","CompareParamsToStructItem","flatMap","csi","Images","structItem","doesMatch","validBodyDescriptors","BodyTypeMap","Size","some","vbt","AverageSizedFeminineDefaults","AverageSizedMasculineDefaults","ReptilianFeminineDefaults","ReptilianMasculineDefaults","AverageSizedFeminine","HumanoidFemale","HumanoidAndrogynous","Female","Androgynous","AverageSizedMasculine","HumanoidMale","Male","ReptilianFeminine","ReptilianFemale","ReptilianAndrogynous","ReptilianMasculine","ReptilianMale","CharacterShadowSource","DefaultBodyParts","CharacterImageCanvas","showOnlySpinner","showLoadingSpinner","Spinner","animation","role","visibility","height","canvasHeight","charScaleFactor","canvasWidth","ref","refs","characterEffectsCanvas","toDataURL","charStagingCanvas","characterStagingCanvas","stagingCanvasContext","getContext","charCanvas","characterCanvas","charCanvasContext","effectsCanvasContext","imageSmoothingEnabled","DrawCharacterAndBorder","LoadCharacterImages","DrawCharacterBorder","DrawCharacterWithEffects","imagesToDraw","imagesToRender","loadedImagesPromises","img","index","imageElement","Image","onload","all","clearRect","itd","drawImage","charPartOffset","canvasContext","charImgSrc","char","charImg","i","borderCoordinates","thicknessScale","xCoord","yCoord","globalCompositeOperation","fillStyle","fillRect","borderCanvas","effectsCanvas","shadowImgSrc","shadow","shadowImg","charBorderImgSrc","border","charBorderImg","shadowOffset","CharacterSize","CharacterDrawingArea","downloadUrl","onChangeComplete","handleColorChange","color","colors","outlineColorOptions","downloadCallback","fetchDownloadUrl","borderCallback","hex","charImageCanvas","GetDownloadUrl","SourceType","ItemType","CharacterImage","Average","charImageLayout","checkingForCharacterImage","borderStyle","CheckForCharacterImage","imgSource","charImgLayout","SetPartImage","GetCurrentStaticCharacterData","UploadCharacterData","downloadSource","link","document","createElement","download","href","click","imagePaths","GetCharacterImagePaths","charImages","GetImages","handleCanvasDownload","handleBorderSelection","handlePartSelection","handleBodyTypeChange","handlePartTypeChange","key","title","description","details","iconSource","source","Homebrew","itemCost","requiresAttunement","modifications","Wondrous","paragraphMargins","titleMargins","padding","ItemWeapon","Weapon","shortRange","longRange","properties","attacks","paddingTop","GetAttackDetails","GetProperties","attackDetails","entries","element","damageRolls","rolls","roll","damageType","toLowerCase","diceCount","diceSize","modifier","fontWeight","propertyDetails","property","json","assign","IItemIsItemWeapon","isType","ItemPotion","Potion","hasWithdrawalEffect","GetWithdrawalEffectClause","IItemIsItemPotion","ItemArmor","Armor","armorBonus","addDex","stealthDisadvantage","WeaponProperties","DamageType","ItemWondrous","RollType","ItemSource","listToSearch","constructedItem","ItemMap_Weapons","ItemMap_Armor","ItemMap_Potions","ItemMap_Wondrous","currentItem","ConvertJsonToItem","keywords","masterList","matchingItems","nonEmptyKeywords","k","IsMatch","trim","concat","every","keyword","ContainsKeyword","f","converted","m","GetEqualityString","fromJson","IItemIsItemArmor","IItemIsItemWondrous","upperKeyword","toLocaleUpperCase","includes","p","phrase","regex","isMatch","Official","Light","Bludgeoning","Finesse","Thrown","Piercing","TwoHanded","Slashing","Versatile","Poison","Ammunition","Loading","Heavy","Reach","LoadingPlaceholder","placeholderSpinner","showSpinner","StylizedModal","Modal","show","onHide","centered","onEntering","onEnterModal","Header","Title","isLoading","Footer","ItemDetailsModal","showAlert","hideModal","itemDetails","alt","getSourceText","getTypeDisplay","RenderItemDescription","DTwenty","dieFace","version","xmlns","fill","dieColor","d","AttackRollModal","damageRoll","dieFaces","rollType","Regular","isRolling","finalDieValue","roll1Audio","volume","roll20Audio","rollDieAudio","rollResultAudio","rollStopAudio","attackName","GetDiceDisplay","GetTotalRollTextDisplay","GetDamageRollDisplay","disabled","HandleRollDie","Disadvantage","Advantage","randomLimit","Math","ceil","random","randomIndex","dieIndex","finalValue","rollTimer","extraDieRolls","GetRandomRollSequence","rollArray","numbersToShow","framesPerNumber","randomNumberCount","randomD20Numbers","nextRandomNumber","frameIndex","dieCount","GetRandomNumber","randomNumberIndex","rollFrames","PopulateRollNumbers","longestDieArray","play","rollIndex","currentRolls","indexToGet","min","FinalizeDieRoll","dieFrameLength","attack","rolledNumbers","RollAttackDice","diceValues","finalDie","slice","sort","a","b","reverse","suspenseLength","RollDamageDice","finalDieText","rollStatement","critModifier","diceRollsMessage","join","rollModifierMessage","damageMessage","Audio","CardIcon","OverlayTrigger","placement","delay","hide","overlay","Tooltip","tooltipTitle","tooltipText","AttackButton","attackIndicators","indicators","callbackFunction","cardIconSize","left","AddButton","PurchaseButton","canPurchase","background","cursor","GetCustomButtonProperties","GetPurchaseStateText","boxShadow","RemoveButton","CardInteractions","ItemCard","cardWidth","cardHeight","cardDefaultMargin","cardRatio","itemAreaDefaultOffset","itemAreaDefaultSize","titleDefaultTopOffset","titleDefaultFontSize","titleWidth","titleDefaultLeftOffset","descAreaDefaultOffset","descAreaDefaultSize","attackIconDefaultSize","iconDefaultSize","iconDefaultLeftOffset","iconDefaultTopOffset","coinDefaultSize","coinDefaultLeftOffset","coinDefaultTopOffset","titleFontSize","buttons","cardInteractions","interaction","onAttackButton","attackButtons","onPurchaseButton","purchaseButton","onRemoveButton","removeButton","onAddButton","addButton","icons","iconDimensions","LoadCard","imagesToLoad","borderImage","GetCardBackSource","iconImage","resolved","DrawTitleText","titleText","testDiv","innerText","cardDiv","card","insertAdjacentElement","textWidth","offsetWidth","removeChild","fontSize","fontRatio","newFontSize","margin","Button","variant","onItemClick","top","maxWidth","GetCardIcons","maxHeight","minHeight","GetCardButtons","InventoryTab","itemCards","itemClick","attackClick","Use","Inventory","showItemDetails","focusedItem","showAttackWindow","activeTab","UpdateItems","newItems","foundItem","GetItem","attackRolls","itemType","filteredItems","Tab","eventKey","ShowItemDetails","ShowAttackWindow","HideItemDetails","HideAttackWindow","Tabs","activeKey","onSelect","HandleTabSelection","GetInventoryTabs","CurrentCharacterStatus","currentCharacterData","CharacterSelectionButton","characterSelectedCallback","NewCharacterButton","CharacterSelector","showNoCharactersMessage","allCharacterData","characterButtons","newCharacterButtonCallback","LoadingState","NewCharacterForm","currentNewCharName","currentBodyType","isCreating","inputIsValid","validationErrors","validateInput","inputValid","existingCharacterNames","existingName","startingCharBits","charDefaults","CreateCharacterData","onFormSubmission","formBodyOptions","creatingMessage","onHideModal","errormessage","handleCreateCharacter","handleCharNameInput","CharacterManager","allCharactersData","showNewCharForm","allCharacterNames","acn","handleHideModal","handleSubmitNewCharForm","handleNewCharButtonClick","handleCharacterSelected","SetCurrentCharacter","FetchAllCharacters","currentCharacter","characterName","MoneyConverter","_platinum","_gold","_silver","_copper","floor","MoneyDisplay","moneyCount","Platinum","Gold","Silver","MoneyAdjustModal","copperAdjustment","adjustedCopper","moneyAdjustCallback","inputAsNumber","Number","NaN","showAsProcessing","HandleCopperSubmit","max","HandleCopperInput","CharacterInfoContainer","defaultCharData","showMoneyAdjustModal","showMoneyAdjustModalProcessing","loadingState","AddObserver","characterStateManager_NotifyObservers","UpdateCharDisplay","prevProps","NoCharacters","GetContextualContent","Loaded","GetLoadedContent","GetNoCharsContent","Anonymous","GetAnonContent","HandleHideMoneyAdjustModal","HandleCopperAdjustCallback","HandleMoneyAdjustButtonClick","userHasAccess","staticCharData","newCopperTotal","LandingSpace","Navbar","expand","bg","Brand","aria-controls","Collapse","Nav","defaultActiveKey","Link","exact","HandleLoginStateChange","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ba4428e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum AuthState\r\n{\r\n    Authorized = \"Authorized\",\r\n    Unauthorized = \"Unauthorized\",\r\n    Checking = \"Checking\"\r\n}\r\n","import * as BCrypt from 'bcryptjs';\r\nimport firebase from 'firebase';\r\nimport { CreateUserResponse } from '../Types/CreateUserResponse';\r\nimport { LoginResponse } from '../Types/LoginResponse';\r\nimport { AuthState } from '../Enums/AuthState';\r\n\r\n/**\r\n * @description A class used for authorizing user credentials and fetching user data.\r\n */\r\nexport class UserDataAuth {\r\n    /**\r\n     * @description Describes the singleton instance for this class.\r\n     */\r\n    private static _instance: UserDataAuth;\r\n\r\n    /**\r\n     * @description Describes the current authorization state for user authorization.\r\n     */\r\n    private _authState: AuthState;\r\n\r\n    /**\r\n     * @description A salt used for BCrypt encryption whenever evaluating user passwords.\r\n     */\r\n    private salt: string;\r\n\r\n    /**\r\n     * @description The user's username that is being stored after authorizing user credentials.\r\n     */\r\n    private _username: string = \"\";\r\n\r\n    /**\r\n     * @description The maximum length of allowed passwords.\r\n     */\r\n    public static readonly MaxPasswordLength = 60;\r\n\r\n    /**\r\n     * @description Gets the username for the current logged-in user. This is not the name of the character,\r\n     * but instead the e-mail address associated with this user's account.\r\n     */\r\n    public get Username(): string {\r\n        return this._username;\r\n    }\r\n\r\n    /**\r\n     * @description Gets the UID for the current user. This is the user's identification number. This is used\r\n     * to index a large amount of user storage.\r\n     */\r\n    public GetUid(): string | undefined {\r\n        let uid = firebase.auth().currentUser?.uid;\r\n        if (!uid) {\r\n            uid = undefined;\r\n        }\r\n        return uid;\r\n    }\r\n\r\n    /**\r\n     * @description Logs out from any current user instances.\r\n     */\r\n    public Logout(): void {\r\n        this._authState = AuthState.Unauthorized;\r\n        firebase.auth().signOut();\r\n    }\r\n\r\n    /**\r\n     * @description Logs into a user instance using an email-password combination.\r\n     * @param email The email of the user to login.\r\n     * @param password The password of the user to login.\r\n     */\r\n    public async Login(email: string, password: string): Promise<LoginResponse> {\r\n        let loginResponse: LoginResponse = {\r\n            DidLogin: false,\r\n            Errors: []\r\n        };\r\n\r\n        await firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\r\n            .catch(function (error) {\r\n                let errorMessage = error.message;\r\n                console.error(errorMessage);\r\n                loginResponse.Errors.push(errorMessage);\r\n            });\r\n\r\n        await firebase.auth().signInWithEmailAndPassword(email, password)\r\n            .then(() =>\r\n                loginResponse.DidLogin = true\r\n            )\r\n            .catch((error) => {\r\n                let errorMessage = error.message;\r\n                console.error(errorMessage);\r\n                loginResponse.Errors.push(errorMessage);\r\n            });\r\n\r\n        return loginResponse;\r\n    }\r\n\r\n    /**\r\n     * @description Creates a new user asynchronously.\r\n     * @param email The email of the new user to create.\r\n     * @param password The password for the new user.\r\n     * @param passwordDupe A duplicate of the password that the user has provided.\r\n     */\r\n    public async CreateAccount(email: string, password: string, passwordDupe: string): Promise<CreateUserResponse> {\r\n        let createResponse: CreateUserResponse = {\r\n            DidCreate: false,\r\n            Errors: []\r\n        };\r\n\r\n        // This may be a little overkill, but don't compare plaintext passwords, use something more robust\r\n        // like BCrypt to compare.\r\n        let passwordHash: string = BCrypt.hashSync(password, this.salt);\r\n        let passwordsMatch: boolean = BCrypt.compareSync(passwordDupe, passwordHash);\r\n\r\n        // Validate that the passwords match.\r\n        if (!passwordsMatch) {\r\n            createResponse.Errors.push(\"Your passwords did not match.\");\r\n        }\r\n\r\n        if (password.length < 6) {\r\n            createResponse.Errors.push(\"Passwords must be at least 6 characters long.\");\r\n        }\r\n\r\n        if (createResponse.Errors.length <= 0) {\r\n            await firebase.auth().createUserWithEmailAndPassword(email, password).then(\r\n                fulfilledValue => {\r\n                    createResponse.DidCreate = true;\r\n                    console.log(fulfilledValue);\r\n                }\r\n                , rejectedValue => {\r\n                    console.error(rejectedValue);\r\n                    createResponse.Errors.push(rejectedValue.message);\r\n                });\r\n        }\r\n\r\n        if (!createResponse.DidCreate) {\r\n            createResponse.Errors.push(\"There was a problem when creating this account. Please try again.\");\r\n        }\r\n\r\n        return createResponse;\r\n    }\r\n\r\n    /**\r\n     * @description Checks for access being granted to the user.\r\n     */\r\n    public async CheckForAccess(): Promise<boolean> {\r\n        if (this._authState == AuthState.Checking) {\r\n            await new Promise<void>((resolve, reject) => {\r\n                // Reject the promise if we wait > X seconds before getting a response.\r\n                let timeoutWaiting = setTimeout(() => reject(), 10000);\r\n\r\n                firebase.auth().onAuthStateChanged((user) => {\r\n                    // If we got an answer, don't reject.\r\n                    window.clearTimeout(timeoutWaiting);\r\n                    resolve();\r\n                });\r\n            });\r\n        }\r\n\r\n        return this._authState === AuthState.Authorized;\r\n    }\r\n\r\n    /**\r\n     * @description Gets the singleton instance of this object.\r\n     */\r\n    public static GetInstance(): UserDataAuth {\r\n        if (!UserDataAuth._instance) {\r\n            UserDataAuth._instance = new UserDataAuth();\r\n        }\r\n\r\n        return this._instance;\r\n    }\r\n\r\n    /**\r\n     * @description Creates a new instance of this object.\r\n     */\r\n    private constructor() {\r\n        this._authState = AuthState.Checking;\r\n        this.salt = BCrypt.genSaltSync();\r\n\r\n        // Your web app's Firebase configuration\r\n        let firebaseConfig = {\r\n            apiKey: \"AIzaSyD-s5zfMiZavJc8J0qsCVIpzSysbaRG7kU\",\r\n            authDomain: \"test-project-a4c30.firebaseapp.com\",\r\n            databaseURL: \"https://test-project-a4c30.firebaseio.com\",\r\n            projectId: \"test-project-a4c30\",\r\n            storageBucket: \"test-project-a4c30.appspot.com\",\r\n            messagingSenderId: \"553146248685\",\r\n            appId: \"1:553146248685:web:b24bdb19f4a400f3550be4\",\r\n            measurementId: \"G-Y6PMKS1PHP\"\r\n        };\r\n\r\n        // Initialize Firebase\r\n        firebase.initializeApp(firebaseConfig);\r\n        firebase.analytics()\r\n\r\n        // Add a listener for auth state changing.\r\n        firebase.auth().onAuthStateChanged(this.HandleAuthStateChanged.bind(this));\r\n    }\r\n\r\n\r\n    /**\r\n     * @description Handles the user's authorization state changing.\r\n     * @param user The user that was logged in, or null if the user was logged out.\r\n     */\r\n    private HandleAuthStateChanged(user: firebase.User | null): void {\r\n        if (user) {\r\n            this._authState = AuthState.Authorized;\r\n            console.log(\"User \" + user.uid + \" has logged in.\")\r\n\r\n            let email = firebase.auth().currentUser?.email;\r\n            if (email && email !== undefined) {\r\n                this._username = email;\r\n            }\r\n        }\r\n        else {\r\n            // This means that either the auth has initialized, or that someone has logged out.\r\n            this._authState = AuthState.Unauthorized;\r\n            console.log(\"User has logged out.\")\r\n        }\r\n    }\r\n}\r\n","export enum LoginState {\r\n    CheckingCredentials = \"Checking Credentials\",\r\n    Login = \"Login\",\r\n    LoggingIn = \"Logging In\",\r\n    LoggedIn = \"Logged In\",\r\n    CreateAnAccount = \"Create An Account\"\r\n}\r\n","import { IItemKey } from \"../../ItemData/Interfaces/IItemKey\";\r\nimport { CharImageLayout } from '../../CharacterImage/Classes/CharImageLayout';\r\n\r\nexport class PlayerCharacterData {\r\n    public Name: string;\r\n    public Copper: number;\r\n    public Items: IItemKey[];\r\n    public CharLayout: CharImageLayout;\r\n    public BorderColor: string;\r\n\r\n    public constructor(name: string, copper: number, items: IItemKey[], charLayout: CharImageLayout, borderColor: string) {\r\n        this.Name = name;\r\n        this.Copper = copper;\r\n        this.Items = items;\r\n        this.CharLayout = charLayout;\r\n        this.BorderColor = borderColor;\r\n    }\r\n\r\n    public GetItemsAsStringArray(): string[] {\r\n        return this.Items.map(item => JSON.stringify(item));\r\n    }\r\n\r\n    public static GetStringArrayAsItems(itemJson: string[]): IItemKey[] {\r\n        let items: IItemKey[] = itemJson\r\n            .map(itemJson => JSON.parse(itemJson) as IItemKey | undefined)\r\n            .filter(item => item !== undefined) as IItemKey[];\r\n\r\n        return items;\r\n    }\r\n}\r\n","export enum PartType\r\n{\r\n    BackAccessory = 'Back Accessory',\r\n    Body = 'Body',\r\n    Bottoms = 'Bottoms',\r\n    Shoes = 'Shoes',\r\n    LowerArmor = 'Lower Armor',\r\n    Tops = 'Tops',\r\n    UpperArmor = 'Upper Armor',\r\n    MidAccessory = 'Mid Accessory',\r\n    ArmArmor = 'Arm Armor',\r\n    HandWear = 'Hand Wear',\r\n    Hair = 'Hair',\r\n    FacialWear = 'Facial Wear',\r\n    HeadWear = 'Head Wear',\r\n    Pets = 'Pets',\r\n    Weapons = 'Weapons',\r\n    Eyes = 'Eyes'\r\n}","import { PartType } from '../Enums/PartType';\r\nimport { BodyType } from '../Enums/BodyType';\r\n\r\ntype CharImageObject = {\r\n    imageSelection: [PartType, string][],\r\n    bodyType: BodyType\r\n}\r\n\r\n/**\r\n * A structure used to gather information about a character visually, then a means to fetch that character\r\n * data as an organized list of images.\r\n */\r\nexport class CharImageLayout {\r\n    public static GetLayoutFromString(objString: string) {\r\n        let obj: CharImageObject = JSON.parse(objString) as CharImageObject;\r\n        let partMap: Map<PartType, string> = new Map(obj.imageSelection);\r\n        let charLayout: CharImageLayout = new CharImageLayout(partMap, obj.bodyType);\r\n\r\n        return charLayout;\r\n    }\r\n\r\n    /**\r\n     * @description A list of all parts that are available as options for the user to select. This also \r\n     * determines the order in which parts will be rendered, from back-to-front, read top-to-bottom.\r\n     */\r\n    public static readonly PartOrder: PartType[] = [\r\n        PartType.BackAccessory,\r\n        PartType.Body,\r\n        PartType.Bottoms,\r\n        PartType.Shoes,\r\n        PartType.LowerArmor,\r\n        PartType.Tops,\r\n        PartType.UpperArmor,\r\n        PartType.MidAccessory,\r\n        PartType.ArmArmor,\r\n        PartType.HandWear,\r\n        PartType.Hair,\r\n        PartType.FacialWear,\r\n        PartType.HeadWear,\r\n        PartType.Pets,\r\n        PartType.Weapons,\r\n        PartType.Eyes\r\n    ];\r\n\r\n    private _imageSelection: Map<PartType, string> = new Map();\r\n    private _bodyType: BodyType;\r\n\r\n    public get ImageSelection(): Map<PartType, string> {\r\n        return this._imageSelection;\r\n    }\r\n\r\n    public get BodyType(): BodyType {\r\n        return this._bodyType;\r\n    }\r\n\r\n    /**\r\n     * @description Gets a new instance of this object.\r\n     * @param partMap A map of part types to their respective strings. This may be an empty list.\r\n     */\r\n    public constructor(partMap: Map<PartType, string>, bodyType: BodyType) {\r\n        this._bodyType = bodyType;\r\n        this._imageSelection = partMap;\r\n    }\r\n\r\n    /**\r\n     * @description Sets the part type to the provided image.\r\n     * @param partType The part type to set.\r\n     * @param image The image source to set.\r\n     */\r\n    public SetPartImage(partType: PartType, image: string): void {\r\n        this._imageSelection.set(partType, image);\r\n    }\r\n\r\n    /**\r\n     * @description Resets this image's parts to an empty list.\r\n     */\r\n    public ResetImage(): void {\r\n        this._imageSelection = new Map();\r\n    }\r\n\r\n    /**\r\n     * @description Get a list of image sources, in-order.\r\n     */\r\n    public GetImages(): string[] {\r\n        let images: string[] = [];\r\n        \r\n        CharImageLayout.PartOrder.forEach(part => {\r\n            this.EnlistImageIfExists(images, part);\r\n        });\r\n\r\n        return images;\r\n    }\r\n\r\n    public GetJsonString(): string {\r\n        let images: [PartType, string][] = Array.from(this._imageSelection);\r\n        let objectToStringify: CharImageObject = {\r\n            imageSelection: images,\r\n            bodyType: this._bodyType\r\n        }\r\n\r\n        let objString: string = JSON.stringify(objectToStringify);\r\n        return objString;\r\n    }\r\n\r\n    /**\r\n     * @description Adds the specified image by-part-type to the array if it exists in the @see ImageSelection\r\n     * map.\r\n     * @param images An output list of images, passed by-reference. This should be empty when first called.\r\n     * @param partType The type of part to check-for and add to the list if it does.\r\n     */\r\n    private EnlistImageIfExists(images: string[], partType: PartType) {\r\n        if (this._imageSelection.has(partType)) {\r\n            let image: string\r\n            image = this._imageSelection.get(partType) as string;\r\n            images.push(image);\r\n        }\r\n    }\r\n}\r\n","import { UserDataAuth } from './UserDataAuth';\r\nimport { firestore } from 'firebase';\r\nimport { PlayerCharacterData } from '../Types/PlayerCharacterData';\r\nimport { IItemKey } from '../../ItemData/Interfaces/IItemKey';\r\nimport { CharImageLayout } from '../../CharacterImage/Classes/CharImageLayout';\r\n\r\nexport class PlayerInventoryService {\r\n    private static readonly collection_userWritable: string = \"userWritable\";\r\n    private static readonly document_playerInventory: string = \"playerInventory\";\r\n    private static readonly storage_currentCharacter: string = \"currentCharacter\";\r\n\r\n    private static PlayerCharacterDataConverter: firestore.FirestoreDataConverter<PlayerCharacterData> = {\r\n        toFirestore: (playerCharacterData: PlayerCharacterData): firestore.DocumentData => {\r\n            // https://stackoverflow.com/questions/29085197/how-do-you-json-stringify-an-es6-map\r\n\r\n            // let images: [PartType, string][] = Array.from(playerCharacterData.Images.entries());\r\n            // let imagesStr: string = JSON.stringify(images);\r\n\r\n            return {\r\n                name: playerCharacterData.Name,\r\n                copper: playerCharacterData.Copper,\r\n                items: playerCharacterData.GetItemsAsStringArray(),\r\n                charData: playerCharacterData.CharLayout.GetJsonString(),\r\n                borderColor: playerCharacterData.BorderColor\r\n            }\r\n        },\r\n        fromFirestore: (snapshot, options): PlayerCharacterData => {\r\n            let snapshotData = snapshot.data(options);\r\n\r\n            let playerName: string = snapshotData.name;\r\n            let playerCopper: number = snapshotData.copper;\r\n            let playerItemData: string[] = snapshotData.items;\r\n            let playerCharData: string = snapshotData.charData;\r\n            let playerBorder: string = snapshotData.borderColor;\r\n\r\n            let charData: CharImageLayout = CharImageLayout.GetLayoutFromString(playerCharData);\r\n            let playerItems: IItemKey[] = PlayerCharacterData.GetStringArrayAsItems(playerItemData);\r\n\r\n            let playerData: PlayerCharacterData = new PlayerCharacterData(\r\n                playerName,\r\n                playerCopper,\r\n                playerItems,\r\n                charData,\r\n                playerBorder);\r\n\r\n            return playerData;\r\n        }\r\n    }\r\n\r\n    public static async CreateCharacterData(characterData: PlayerCharacterData): Promise<void> {\r\n        let uid: string | undefined = UserDataAuth.GetInstance().GetUid();\r\n\r\n        if (uid !== undefined) {\r\n            await firestore()\r\n                .collection(this.collection_userWritable)\r\n                .doc(this.document_playerInventory)\r\n                .collection(uid)\r\n                .doc(characterData.Name)\r\n                .withConverter(PlayerInventoryService.PlayerCharacterDataConverter)\r\n                .set(characterData)\r\n                .catch(reason => {\r\n                    console.error(reason);\r\n                });\r\n        }\r\n    }\r\n\r\n    public static async UpdateCharacterData(characterData: PlayerCharacterData): Promise<void> {\r\n        let uid: string | undefined = UserDataAuth.GetInstance().GetUid();\r\n\r\n        // I'm not certain why, but the 'withConverter' option doesn't appear to work the same for .update as\r\n        // it does for .set. Just use the converter in a brute-force method instead since this seems to work.\r\n        let charDataDocument = PlayerInventoryService.PlayerCharacterDataConverter.toFirestore(characterData);\r\n        \r\n        if (uid !== undefined) {\r\n            await firestore()\r\n                .collection(this.collection_userWritable)\r\n                .doc(this.document_playerInventory)\r\n                .collection(uid)\r\n                .doc(characterData.Name)\r\n                .update(charDataDocument)\r\n                .catch(reason => {\r\n                    console.error(reason);\r\n                });\r\n        }\r\n    }\r\n\r\n    public static async FetchCharacterData(playerName: string): Promise<PlayerCharacterData | undefined> {\r\n        let response: PlayerCharacterData | undefined = undefined;\r\n        let uid: string | undefined = UserDataAuth.GetInstance().GetUid();\r\n\r\n        if (uid !== undefined) {\r\n            let playerDataRef = firestore()\r\n                .collection(this.collection_userWritable)\r\n                .doc(this.document_playerInventory)\r\n                .collection(uid)\r\n                .doc(playerName);\r\n\r\n            await playerDataRef\r\n                .withConverter(PlayerInventoryService.PlayerCharacterDataConverter)\r\n                .get()\r\n                .then(docSnapshot => {\r\n                    if (docSnapshot.exists) {\r\n                        response = docSnapshot.data();\r\n                    }\r\n                    else {\r\n                        console.error(`Could not find character document for ${playerName}.`);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.error(error);\r\n                });\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    public static async GetDefaultCharacter(): Promise<PlayerCharacterData | undefined> {\r\n        let response: PlayerCharacterData | undefined = undefined;\r\n        let uid: string | undefined = UserDataAuth.GetInstance().GetUid();\r\n\r\n        if (uid !== undefined) {\r\n            let playerDataRef = firestore()\r\n                .collection(this.collection_userWritable)\r\n                .doc(this.document_playerInventory)\r\n                .collection(uid)\r\n                .limit(1);\r\n\r\n            await playerDataRef\r\n                .withConverter(PlayerInventoryService.PlayerCharacterDataConverter)\r\n                .get()\r\n                .then(docSnapshot => {\r\n                    if (!docSnapshot.empty) {\r\n                        response = docSnapshot.docs[0].data();\r\n                    }\r\n                    else {\r\n                        console.error(`Could not find a default character.`);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.error(error);\r\n                });\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    public static async FetchAllCharacters(): Promise<PlayerCharacterData[]> {\r\n        let uid: string | undefined = UserDataAuth.GetInstance().GetUid();\r\n        let allCharData: PlayerCharacterData[] = [];\r\n\r\n        if (uid !== undefined) {\r\n            let playerDataRef = firestore()\r\n                .collection(this.collection_userWritable)\r\n                .doc(this.document_playerInventory)\r\n                .collection(uid);\r\n\r\n            await playerDataRef\r\n                .withConverter(PlayerInventoryService.PlayerCharacterDataConverter)\r\n                .get()\r\n                .then(docSnapshot => {\r\n                    // Calling .data() doesn't cost anything extra in terms of database reads, so go ahead and\r\n                    // get the list of characters as the full objects regardless.\r\n                    docSnapshot.forEach(charData => {\r\n                        let newCharData = charData.data();\r\n                        allCharData.push(newCharData);\r\n                    });\r\n                })\r\n                .catch(reason => {\r\n                    console.error(reason);\r\n                });\r\n        }\r\n\r\n        return allCharData;\r\n    }\r\n\r\n    public static SetCurrentCharacter(charName: string) {\r\n        localStorage.setItem(PlayerInventoryService.storage_currentCharacter, charName);\r\n    }\r\n\r\n    public static GetCurrentCharacterName(): string | null {\r\n        return localStorage.getItem(PlayerInventoryService.storage_currentCharacter);\r\n    }\r\n\r\n    public static async GetCurrentCharacter(): Promise<PlayerCharacterData | undefined> {\r\n        let charName: string | null = PlayerInventoryService.GetCurrentCharacterName();\r\n\r\n        if (!charName) {\r\n            return undefined;\r\n        }\r\n\r\n        return await PlayerInventoryService.FetchCharacterData(charName as string);\r\n    }\r\n}\r\n","import { PlayerInventoryService } from './PlayerInventoryService';\r\nimport { PlayerCharacterData } from '../Types/PlayerCharacterData';\r\nimport { UserDataAuth } from './UserDataAuth';\r\n\r\nexport type CharacterStateObserver = (charData: PlayerCharacterData | undefined) => void;\r\n\r\nexport class CharacterStateManager {\r\n    private _observers: CharacterStateObserver[] = [];\r\n\r\n    private static _instance: CharacterStateManager;\r\n\r\n    public static GetInstance() {\r\n        if (!this._instance) {\r\n            this._instance = new CharacterStateManager();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    public AddObserver(observer: CharacterStateObserver) {\r\n        let existingObserver: CharacterStateObserver | undefined = this._observers.find(obs => obs === observer);\r\n\r\n        if (existingObserver === undefined) {\r\n            this._observers.push(observer);\r\n        }\r\n    }\r\n\r\n    public RemoveObserver(observer: CharacterStateObserver) {\r\n        let existingObserver: number | undefined = this._observers.findIndex(obs => obs === observer);\r\n        \r\n        if (existingObserver === undefined) {\r\n            this._observers.splice(existingObserver, 1);\r\n        }\r\n    }\r\n\r\n    private NotifyObservers(): void {\r\n        this._observers.forEach(obs => obs(this._currentCharacter))\r\n    }\r\n\r\n    public async GetCurrentStaticCharacterData(): Promise<PlayerCharacterData | undefined> {\r\n        let accessGranted: boolean = await UserDataAuth.GetInstance().CheckForAccess();\r\n\r\n        if (accessGranted) {\r\n            // First, verify that the current character has been loaded. If it hasn't, load up the first\r\n            // applicable character.\r\n            if (this._currentCharacter === undefined) {\r\n                let playerName: string | null = PlayerInventoryService.GetCurrentCharacterName();\r\n\r\n                // If we have a player name in local storage, try loading that first.\r\n                if (playerName) {\r\n                    this._currentCharacter = await PlayerInventoryService.FetchCharacterData(playerName);\r\n                }\r\n                else {\r\n                    this._currentCharacter = await PlayerInventoryService.GetDefaultCharacter();\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._currentCharacter;\r\n    }\r\n\r\n    /**\r\n     * @description Called in order to update the local static object that tracks the character's state.\r\n     * @param charData \r\n     */\r\n    public async ChangeStaticCharacterData(charData: PlayerCharacterData | undefined) {\r\n        this._currentCharacter = charData;\r\n        this.NotifyObservers();\r\n    }\r\n\r\n    /**\r\n     * @description Called in order to modify the current character data, and submit that data to the server.\r\n     * @param charData \r\n     */\r\n    public async UploadCharacterData(charData: PlayerCharacterData) {\r\n        let accessGranted: boolean = await UserDataAuth.GetInstance().CheckForAccess();\r\n\r\n        if (accessGranted) {\r\n            this.ChangeStaticCharacterData(charData);\r\n            PlayerInventoryService.UpdateCharacterData(charData);\r\n        }\r\n    }\r\n\r\n    private _currentCharacter: PlayerCharacterData | undefined = undefined;\r\n\r\n    private constructor() {}\r\n}\r\n","import React, { FormEvent, ChangeEvent } from 'react';\r\nimport '../LoginPage.css'\r\nimport { UserDataAuth } from '../../FirebaseAuth/Classes/UserDataAuth';\r\nimport { CreateUserResponse } from '../../FirebaseAuth/Types/CreateUserResponse';\r\nimport { LoginResponse } from '../../FirebaseAuth/Types/LoginResponse';\r\nimport { LoginState } from '../Enums/LoginState';\r\nimport { CharacterStateManager } from '../../FirebaseAuth/Classes/CharacterStateManager';\r\n\r\n/**\r\n * @description A series of properties to use to render this component.\r\n */\r\ninterface ILoginPageProps {\r\n    onLogin: (loginState: LoginState) => void;\r\n};\r\n\r\n/**\r\n * @description An object used to maintain the internal state of this object.\r\n * @param pageState A stateful viariable used to keep track of what to display/provide as options.\r\n * @param errorMessages A set of error messages to display to the user.\r\n */\r\ninterface ILoginPageState {\r\n    pageState: LoginState;\r\n    errorMessages: string[];\r\n}\r\n\r\n/**\r\n * @description The login and account-creation form for this site.\r\n */\r\nexport class LoginPage extends React.Component<ILoginPageProps, ILoginPageState> {\r\n    private currentUsername: string;\r\n    private currentPassword: string;\r\n    private currentPassDupe: string;\r\n\r\n    /**\r\n     * Creates a new instance of this object.\r\n     * @param props The series of properties passed in as input for this component.\r\n     */\r\n    public constructor(props: ILoginPageProps) {\r\n        super(props);\r\n\r\n        this.currentUsername = \"\";\r\n        this.currentPassword = \"\";\r\n        this.currentPassDupe = \"\";\r\n\r\n        let loginState: LoginState = LoginState.CheckingCredentials;\r\n        this.CheckForLogin();\r\n\r\n        this.state = {\r\n            pageState: loginState,\r\n            errorMessages: []\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Fired immediately after this component has mounted. This is used to update the component\r\n     * to reflect whether the user has logged in using stored credentials.\r\n     */\r\n    public componentDidMount() {\r\n        this.CheckForLogin();\r\n    }\r\n\r\n    /**\r\n     * @description Renders thi object.\r\n     */\r\n    public render() {\r\n        return (\r\n            <div className=\"login-container\">\r\n                <div className=\"login-dialog\">\r\n                    <h2 className=\"login-header\">\r\n                        {this.state.pageState.toString()}\r\n                    </h2>\r\n                    <div className=\"login-error-messages\">\r\n                        {this.getErrorMessages()}\r\n                    </div>\r\n                    {this.GetInternalRenderBits()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private async CheckForLogin() {\r\n        let loginState: LoginState = LoginState.Login;\r\n\r\n        try {\r\n            let accessGranted: boolean = await UserDataAuth.GetInstance().CheckForAccess();\r\n            if (accessGranted) {\r\n                loginState = LoginState.LoggedIn;\r\n            }\r\n        }\r\n        catch(error) {\r\n            console.error(\"Rejected login: \" + error);\r\n        }\r\n\r\n        this.props.onLogin(loginState);\r\n        this.setState({\r\n            pageState: loginState\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Renders the internal bits that change depending on the state of this component.\r\n     */\r\n    private GetInternalRenderBits(): JSX.Element {\r\n        switch (this.state.pageState) {\r\n            case LoginState.LoggedIn: {\r\n                return (\r\n                    <div>\r\n                        <h3>You are logged in as {UserDataAuth.GetInstance().Username}</h3>\r\n                        <br /><br />\r\n                        <div className=\"login-button-container\">\r\n                            <button className=\"login-button\" onClick={this.submitLogout.bind(this)}>\r\n                                Log Out\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            case LoginState.CreateAnAccount: {\r\n                return (\r\n                    <div>\r\n                        <form className=\"login-form\" action=\"/\" method=\"POST\" onSubmit={this.submitCreateAccount.bind(this)}>\r\n                            <br /> <br />\r\n                            <span>Email:</span>\r\n                            <br />\r\n                            <input type=\"text\" name=\"email\" onChange={this.handleUsernameInput.bind(this)} />\r\n                            <br /> <br />\r\n                            <span>Password:</span>\r\n                            <br />\r\n                            <input type=\"password\" name=\"password\" onChange={this.handlePasswordInput.bind(this)} />\r\n                            <br /> <br />\r\n                            <span>Password (Again!):</span>\r\n                            <br />\r\n                            <input type=\"password\" name=\"passwordDupe\" onChange={this.handlePassDupeInput.bind(this)} />\r\n                            <br /> <br />\r\n                            <input\r\n                                className=\"login-button\"\r\n                                type=\"submit\"\r\n                                style={{ display: \"initial\" }}\r\n                                value=\"Create Account\" />\r\n                        </form>\r\n                        <div className=\"login-button-container\">\r\n                            <button\r\n                                className=\"login-button\"\r\n                                onClick={this.submitBackToLogin.bind(this)}>\r\n                                Back To Login\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            case LoginState.CheckingCredentials: {\r\n                return (\r\n                    <div>\r\n                        <h2>Checking login credentials . . . </h2>\r\n                    </div>\r\n                )\r\n            }\r\n            case LoginState.Login:\r\n            default: {\r\n                return (\r\n                    <div>\r\n                        <form className=\"login-form\" action=\"/\" method=\"POST\" onSubmit={this.submitLogin.bind(this)}>\r\n                            <br /> <br />\r\n                            <span>Email:</span>\r\n                            <br />\r\n                            <input type=\"text\" name=\"email\" onChange={this.handleUsernameInput.bind(this)} />\r\n                            <br /> <br />\r\n                            <span>Password:</span>\r\n                            <br />\r\n                            <input type=\"password\" name=\"password\" onChange={this.handlePasswordInput.bind(this)} />\r\n                            <br /> <br />\r\n                            <input\r\n                                className=\"login-button\"\r\n                                style={{ display: \"initial\" }}\r\n                                type=\"submit\"\r\n                                value=\"Log In\" />\r\n                        </form>\r\n                        <div className=\"login-button-container\">\r\n                            <button\r\n                                className=\"login-button\"\r\n                                onClick={this.submitGoToCreateAccount.bind(this)}>\r\n                                Create An Account\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Gets a series of error messages to render from the current state.\r\n     */\r\n    private getErrorMessages(): JSX.Element[] {\r\n        return (\r\n            this.state.errorMessages.map(e => {\r\n                return (\r\n                    <p>{e}</p>\r\n                )\r\n            })\r\n        )\r\n    }\r\n\r\n    /**\r\n     * @description Handles the click event for the 'submit' button when the user is logging in.\r\n     * @param event The event to handle when the user presses, \"Login\".\r\n     */\r\n    private submitLogin(event: FormEvent<HTMLFormElement>) {\r\n        // By default, this causes the page to refresh which we DO NOT WANT. This happens because the provided\r\n        // form looks to browsers like a standard login form.\r\n        event.preventDefault();\r\n\r\n        // Attempt to log in using UserDataAuth.\r\n        let loginPromise: Promise<LoginResponse> = UserDataAuth.GetInstance().Login(this.currentUsername, this.currentPassword);\r\n\r\n        this.setState({\r\n            pageState: LoginState.CheckingCredentials\r\n        });\r\n\r\n        loginPromise.then(\r\n            loggedIn => {\r\n                if (loggedIn.DidLogin) {\r\n                    this.props.onLogin(LoginState.LoggedIn);\r\n                    this.setState({\r\n                        pageState: LoginState.LoggedIn\r\n                    });\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        errorMessages: [\"That username and password was not valid. Please try again.\"]\r\n                    });\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    /**\r\n     * @description Handles when the user selects the \"Logout\" button.\r\n     */\r\n    private submitLogout() {\r\n        // Logout from the user data auth.\r\n        UserDataAuth.GetInstance().Logout();\r\n        this.props.onLogin(LoginState.Login);\r\n\r\n        // Set page state to LoggingOut, which should redirect to the home page.\r\n        this.setState({\r\n            pageState: LoginState.Login\r\n        });\r\n\r\n        CharacterStateManager.GetInstance().ChangeStaticCharacterData(undefined);\r\n    }\r\n\r\n    /**\r\n     * @description Handles when the user selects the \"Create an account\" button.\r\n     * @param event The event arguments provided when a user creates an account.\r\n     */\r\n    private submitCreateAccount(event: FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n\r\n        let response: Promise<CreateUserResponse> = UserDataAuth.GetInstance().CreateAccount(\r\n            this.currentUsername,\r\n            this.currentPassword,\r\n            this.currentPassDupe);\r\n\r\n        response.then(\r\n            onResolve => {\r\n                // Always set the error list to whatever we got. This way it clears when we have no errors.\r\n                this.setState({\r\n                    errorMessages: onResolve.Errors\r\n                });\r\n\r\n                if (onResolve.DidCreate) {\r\n                    this.props.onLogin(LoginState.Login);\r\n                    this.setState({\r\n                        pageState: LoginState.LoggedIn\r\n                    });\r\n                }\r\n            }, onReject => {\r\n                console.error(\"Failed to create a user account.\" + onReject);\r\n            }\r\n        )\r\n    }\r\n\r\n    /**\r\n     * @description Handles the click event when a user goes to the 'Create An Account' button.\r\n     */\r\n    private submitGoToCreateAccount() {\r\n        this.setState({\r\n            pageState: LoginState.CreateAnAccount\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Handles when a user selects the \"Back To Login\" button.\r\n     */\r\n    private submitBackToLogin() {\r\n        this.setState({\r\n            pageState: LoginState.Login\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Handles when the user types/provides input into the username field.\r\n     * @param event The event arguments provided when the user is changing the username field.\r\n     */\r\n    private handleUsernameInput(event: ChangeEvent<HTMLInputElement>) {\r\n        let input = event.target?.value;\r\n        if (input !== null) {\r\n            this.currentUsername = input;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Handles when the user types/provides input into the password field.\r\n     * @param event The event arguments provided when the user is changing the field.\r\n     */\r\n    private handlePasswordInput(event: ChangeEvent<HTMLInputElement>) {\r\n        let input = event.target?.value;\r\n        if (input !== null) {\r\n            this.currentPassword = input;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Handles when the user types/provides input into the password verification field.\r\n     * @param event The event arguments provided when the user is changing the field.\r\n     */\r\n    private handlePassDupeInput(event: ChangeEvent<HTMLInputElement>) {\r\n        let input = event.target?.value;\r\n        if (input !== null) {\r\n            this.currentPassDupe = input;\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { UserDataAuth } from '../../FirebaseAuth/Classes/UserDataAuth';\r\n\r\nexport interface IProtectedRouteState {\r\n    routeStatus: TRouteCheckStatus;\r\n}\r\n\r\nexport interface IProtectedRouteProps {\r\n    children: JSX.Element,\r\n    path: string\r\n}\r\n\r\ntype TRouteCheckStatus = \"Granted\" | \"Redirect\" | \"Checking\"\r\n\r\n// https://reacttraining.com/react-router/web/example/auth-workflow\r\n// https://tylermcginnis.com/react-router-protected-routes-authentication/\r\nexport class ProtectedRoute extends React.Component<IProtectedRouteProps, IProtectedRouteState> {\r\n    public constructor(props: IProtectedRouteProps) {\r\n        super(props);\r\n        this.state = {\r\n            routeStatus: \"Checking\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.GetComponentToRender();\r\n    }\r\n\r\n    private GetComponentToRender(): void {\r\n        UserDataAuth.GetInstance().CheckForAccess().then(granted => {\r\n            if (granted) {\r\n                this.setState({\r\n                    routeStatus: \"Granted\"\r\n                });\r\n            }\r\n            else {\r\n                this.setState({\r\n                    routeStatus: \"Redirect\"\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n    public render() {\r\n        switch(this.state.routeStatus) {\r\n            case \"Granted\": {\r\n                return (\r\n                    <Route path={this.props.path} children={this.props.children} />\r\n                );\r\n            }\r\n            case \"Redirect\": {\r\n                return (\r\n                    <Redirect to='/login' />\r\n                );\r\n            }\r\n            case \"Checking\":\r\n            default: {\r\n                return (\r\n                    <div>\r\n                        <h2>Checking user authorization . . .</h2>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { PartSelectionCallback } from '../Types/PartSelectionCallback';\r\nimport { PartType } from '../Enums/PartType';\r\n\r\n/**\r\n * @description The properties for this component.\r\n * @param partType The type of part that is represented by this button.\r\n * @param imageSource The source for the iamge that is represented by this button.\r\n * @param partSelectionCallback The callback when this button is clicked.\r\n */\r\nexport interface IPartButtonProps {\r\n    partType: PartType;\r\n    imageSource: string;\r\n    partSelectionCallback: PartSelectionCallback;\r\n};\r\n\r\n/**\r\n * A constant that represents the size of the button/image that is represented here.\r\n */\r\nconst imgSize: string = \"128px\";\r\n\r\n/**\r\n * A component used to represent an individual option for a character part.\r\n * @param props \r\n */\r\nexport function PartButton(props: IPartButtonProps) {\r\n    return (\r\n        <button\r\n            className=\"part-button\"\r\n            onClick={() => props.partSelectionCallback(props.partType, props.imageSource)}>\r\n            <img\r\n                className=\"part-button-image\"\r\n                src={props.imageSource}\r\n                width={imgSize}\r\n            />\r\n        </button>\r\n    )\r\n}\r\n","export enum BodyType {\r\n    AverageSizedFeminine = \"Average-Sized Feminine\",\r\n    AverageSizedMasculine = \"Average-Sized Masculine\",\r\n    ReptilianFeminine = \"Reptilian Feminine\",\r\n    ReptilianMasculine = \"Reptilian Masculine\",\r\n}","import React from 'react';\r\nimport { PartType } from '../Enums/PartType';\r\nimport { PartTypeSelectionCallback } from '../Types/PartTypeSelectionCallback';\r\nimport { Dropdown } from 'react-bootstrap';\r\n\r\n/**\r\n * @description The properties provided to this component.\r\n * @param SelectionCallback The function to be called when a part type is selected from the dropdown.\r\n */\r\nexport interface IPartTypeSelectorProps {\r\n    SelectionCallback: PartTypeSelectionCallback;\r\n};\r\n\r\n/**\r\n * @description The state maintained by this component.\r\n */\r\nexport interface IPartTypeSelectorState {\r\n};\r\n\r\n/**\r\n * @description The part-type selector. This lets the character creator switch between part types.\r\n */\r\nexport class PartTypeSelector extends React.Component<IPartTypeSelectorProps, IPartTypeSelectorState> {\r\n    /**\r\n     * @description Creates a new isntance of this component.\r\n     * @param props The provided properties for this class.\r\n     */\r\n    constructor(props: IPartTypeSelectorProps) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n    /**\r\n     * @description Renders this component.\r\n     */\r\n    public render() {\r\n        return (\r\n            <Dropdown\r\n                className=\"part-type-selector\">\r\n                <Dropdown.Toggle id=\"part-dropdown\">\r\n                    Part Type Selection\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                    {this.GetPartTypes()}\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    private GetPartTypes(): JSX.Element[] {\r\n        return Object.values(PartType).map(pt => {\r\n            let itemClickCallback = () => {this.props.SelectionCallback(pt)};\r\n\r\n            return (\r\n                <Dropdown.Item\r\n                    onClick={itemClickCallback.bind(this)}>\r\n                    {pt.toString()}\r\n                </Dropdown.Item>\r\n            )\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Dropdown } from 'react-bootstrap';\r\nimport { BodyType } from '../Enums/BodyType';\r\nimport { BodyTypeSelectionCallback } from '../Types/BodyTypeSelectionCallback';\r\n\r\n/**\r\n * @description The properties provided to this component.\r\n * @param SelectionCallback The function to be called when a body type is selected from the dropdown.\r\n */\r\nexport interface IPartBodySelectorProps {\r\n    SelectionCallback: BodyTypeSelectionCallback;\r\n}\r\n\r\n/**\r\n * @description The state maintained by this component.\r\n */\r\nexport interface IPartBodySelectorState {\r\n}\r\n\r\n/**\r\n * @description The body-type selector. This lets the character creator switch between body types.\r\n */\r\nexport class PartBodySelector extends React.Component<IPartBodySelectorProps, IPartBodySelectorState> {\r\n    /**\r\n     * @description Creates a new isntance of this component.\r\n     * @param props The provided properties for this class.\r\n     */\r\n    constructor(props: IPartBodySelectorProps) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Renders this component.\r\n     */\r\n    public render() {\r\n        return (\r\n            <Dropdown>\r\n                <Dropdown.Toggle id=\"body-dropdown\">\r\n                    Body Type Selection\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                    {this.GetBodyTypes()}\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    private GetBodyTypes(): JSX.Element[] {\r\n        return Object.values(BodyType).map(bt => {\r\n            let itemClickCallback = () => {this.props.SelectionCallback(bt)};\r\n\r\n            return (\r\n                <Dropdown.Item\r\n                    onClick={itemClickCallback.bind(this)}>\r\n                    {bt.toString()}\r\n                </Dropdown.Item>\r\n            )\r\n        })\r\n    }\r\n}\r\n","export enum BodyDescription\r\n{\r\n    Androgynous = 'Androgynous',\r\n    Female = 'Female',\r\n    Male = 'Male',\r\n\r\n    HumanoidAndrogynous = 'Humanoid_Androgynous',\r\n    HumanoidFemale = 'Humanoid_Female',\r\n    HumanoidMale = 'Humanoid_Male',\r\n\r\n    ReptilianAndrogynous = 'Reptilian_Androgynous',\r\n    ReptilianFemale = 'Reptilian_Female',\r\n    ReptilianMale = 'Reptilian_Male',\r\n}","import React from 'react';\r\n\r\nimport { PartButton } from './PartButton';\r\nimport { PartTypeSelector } from './PartTypeSelector';\r\nimport { PartBodySelector } from './PartBodySelector';\r\n\r\nimport { PartType } from '../Enums/PartType';\r\nimport { PartTypeSelectionCallback } from '../Types/PartTypeSelectionCallback';\r\nimport { BodyTypeSelectionCallback } from '../Types/BodyTypeSelectionCallback';\r\nimport { PartSelectionCallback } from '../Types/PartSelectionCallback';\r\n\r\n/**\r\n * @description The properties provided to this component.\r\n * @param partType The part type whose buttons are displayed in in this component at present.\r\n * @param partOptions The list of image sources that are displayed as options.\r\n * @param partTypeSelectionCallback A callback when a part type has been selected.\r\n * @param bodyTypeSelectionCallback A callback when a body type has been selected.\r\n * @param partSelectionCallback A callback when the type of part represented as an option changes.\r\n */\r\nexport interface IPartSelectorProps {\r\n    partType: PartType;\r\n    partOptions: string[];\r\n    partTypeSelectionCallback: PartTypeSelectionCallback;\r\n    bodyTypeSelectionCallback: BodyTypeSelectionCallback;\r\n    partSelectionCallback: PartSelectionCallback;\r\n};\r\n\r\n/**\r\n * @description The state maintained by this component.\r\n */\r\nexport interface IPartSelectorState {\r\n};\r\n\r\n/**\r\n * @description The part selector for the character creator. This provides compnonents to switch body types,\r\n * part types, and parts.\r\n */\r\nexport class PartSelector extends React.Component<IPartSelectorProps, IPartSelectorState> {\r\n    /**\r\n     * @description Creates a new isntance of this component.\r\n     * @param props The provided properties for this class.\r\n     */\r\n    constructor(props: IPartSelectorProps) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n    /**\r\n     * @description Renders this component.\r\n     */\r\n    public render() {\r\n        return (\r\n            <div className=\"part-selector\">\r\n                <div className=\"part-character-selectors\">\r\n                    <PartBodySelector\r\n                        SelectionCallback={this.props.bodyTypeSelectionCallback}\r\n                    />\r\n                    <PartTypeSelector\r\n                        SelectionCallback={this.props.partTypeSelectionCallback}\r\n                    />\r\n                </div>\r\n                <div className=\"part-selector-buttons\">\r\n                    {this.GetPartButtons()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private GetPartButtons(): JSX.Element[] {\r\n        return this.props.partOptions.map(po => \r\n            <PartButton\r\n                partType={this.props.partType}\r\n                imageSource={po}\r\n                partSelectionCallback={this.props.partSelectionCallback}\r\n            />\r\n        );\r\n    }\r\n}\r\n","import CharImageMap from './CharImageStruct.json';\r\nimport { CharacterSize } from '../Enums/CharacterSize';\r\nimport { BodyType } from '../Enums/BodyType';\r\nimport { PartType } from '../Enums/PartType';\r\nimport { CharImageStructItem } from '../Types/CharImageStructItem';\r\nimport { BodyDescription } from '../Enums/BodyDescription';\r\nimport { CharImageLayout } from './CharImageLayout';\r\n\r\n/**\r\n * @description A singleton-like class used to reference constants in the character parts, body types, etc.\r\n */\r\nexport class CharacterImageMap\r\n{\r\n    /**\r\n     * @description The default images to display when a user selects the \"Average-Sized Feminine\" body type.\r\n     */\r\n    private static AverageSizedFeminineDefaults: Map<PartType, string> = new Map<PartType, string>([\r\n        [\r\n            PartType.Eyes,\r\n            \"./images/Character_Image_Defaults/Average-Sized Feminine/Eyes.png\"\r\n        ],\r\n        [\r\n            PartType.Body,\r\n            \"./images/Character_Image_Defaults/Average-Sized Feminine/Body.png\"\r\n        ]\r\n    ]);\r\n\r\n    /**\r\n     * @description The default images to display when a user selects the \"Average-Sized Masculine\" body type.\r\n     */\r\n    private static AverageSizedMasculineDefaults: Map<PartType, string> = new Map<PartType, string>([\r\n        [\r\n            PartType.Eyes,\r\n            \"./images/Character_Image_Defaults/Average-Sized Masculine/Eyes.png\"\r\n        ],\r\n        [\r\n            PartType.Body,\r\n            \"./images/Character_Image_Defaults/Average-Sized Masculine/Body.png\"\r\n        ]\r\n    ]);\r\n    \r\n    /**\r\n     * @description The default images to display when a user selects the \"Reptilian Feminine\" body type.\r\n     */\r\n    private static ReptilianFeminineDefaults: Map<PartType, string> = new Map<PartType, string>([\r\n        [\r\n            PartType.Eyes,\r\n            \"./images/Character_Image_Defaults/Reptilian Feminine/Eyes.png\"\r\n        ],\r\n        [\r\n            PartType.Body,\r\n            \"./images/Character_Image_Defaults/Reptilian Feminine/Body.png\"\r\n        ]\r\n    ]);\r\n\r\n    /**\r\n     * @description The default images to display when a user selects the \"Reptilian Masculine\" body type.\r\n     */\r\n    private static ReptilianMasculineDefaults: Map<PartType, string> = new Map<PartType, string>([\r\n        [\r\n            PartType.Eyes,\r\n            \"./images/Character_Image_Defaults/Reptilian Masculine/Eyes.png\"\r\n        ],\r\n        [\r\n            PartType.Body,\r\n            \"./images/Character_Image_Defaults/Reptilian Masculine/Body.png\"\r\n        ]\r\n    ]);\r\n\r\n    /**\r\n     * @description A map of body types to their respective valid part-type categories. For example, the\r\n     * \"average-sized feminine\" body type can use parts from the, \"humanoid female\", \"humanoid androgynous\",\r\n     * \"female\", and \"androgynous\" categories.\r\n     */\r\n    private static BodyTypeMap: Map<BodyType, BodyDescription[]> = new Map<BodyType, BodyDescription[]>(\r\n        [\r\n            [\r\n                BodyType.AverageSizedFeminine,\r\n                [\r\n                    BodyDescription.HumanoidFemale,\r\n                    BodyDescription.HumanoidAndrogynous,\r\n                    BodyDescription.Female,\r\n                    BodyDescription.Androgynous,\r\n                ]\r\n            ],\r\n            [\r\n                BodyType.AverageSizedMasculine,\r\n                [\r\n                    BodyDescription.HumanoidMale,\r\n                    BodyDescription.HumanoidAndrogynous,\r\n                    BodyDescription.Male,\r\n                    BodyDescription.Androgynous,\r\n                ]\r\n            ],\r\n            [\r\n                BodyType.ReptilianFeminine,\r\n                [\r\n                    BodyDescription.ReptilianFemale,\r\n                    BodyDescription.ReptilianAndrogynous,\r\n                    BodyDescription.Female,\r\n                    BodyDescription.Androgynous,\r\n                ]\r\n            ],\r\n            [\r\n                BodyType.ReptilianMasculine,\r\n                [\r\n                    BodyDescription.ReptilianMale,\r\n                    BodyDescription.ReptilianAndrogynous,\r\n                    BodyDescription.Male,\r\n                    BodyDescription.Androgynous,\r\n                ]\r\n            ],\r\n        ]\r\n    );\r\n\r\n    /**\r\n     * @description The image source for the shadow for the character.\r\n     */\r\n    public static CharacterShadowSource: string = \"./images/Character_Image_Details/CharacterShadow.png\"\r\n\r\n    /**\r\n     * @description Gets the list of valid character images for a given series of body type categories.\r\n     * @param charSize The size of the character to get images for.\r\n     * @param bodyType The type of body to get the images for.\r\n     * @param partType The part type to get images for.\r\n     */\r\n    public static GetCharacterImagePaths(charSize: CharacterSize, bodyType: BodyType, partType: PartType): string[]\r\n    {\r\n        let charStructItems: CharImageStructItem[] =  CharImageMap.filter(c =>\r\n            CharacterImageMap.CompareParamsToStructItem(c, charSize, bodyType, partType));\r\n\r\n        let charImages: string[] = charStructItems.flatMap(csi => csi.Images);\r\n\r\n        return charImages;\r\n    }\r\n\r\n    /**\r\n     * @description A map of body types to their respective default images. Note that this is merely a wrapper\r\n     * to an internal list, this is just to reduce visual noise.\r\n     */\r\n    public static DefaultBodyParts: Map<BodyType, CharImageLayout> = new Map<BodyType, CharImageLayout>(\r\n        [\r\n            [\r\n                BodyType.AverageSizedFeminine,\r\n                new CharImageLayout(CharacterImageMap.AverageSizedFeminineDefaults, BodyType.AverageSizedFeminine)\r\n            ],\r\n            [\r\n                BodyType.AverageSizedMasculine,\r\n                new CharImageLayout(CharacterImageMap.AverageSizedMasculineDefaults, BodyType.AverageSizedMasculine)\r\n            ],\r\n            [\r\n                BodyType.ReptilianFeminine,\r\n                new CharImageLayout(CharacterImageMap.ReptilianFeminineDefaults, BodyType.ReptilianFeminine)\r\n            ],\r\n            [\r\n                BodyType.ReptilianMasculine,\r\n                new CharImageLayout(CharacterImageMap.ReptilianMasculineDefaults, BodyType.ReptilianMasculine)\r\n            ],\r\n        ]\r\n    );\r\n\r\n    /**\r\n     * @description Compares the body-type selection options to the character map struct, picking out items\r\n     * that have a valid match.\r\n     * @param structItem The struct item part to evaluate.\r\n     * @param charSize The size of the character to get images for.\r\n     * @param bodyType The type of body to get the images for.\r\n     * @param partType The part type to get images for.\r\n     */\r\n    private static CompareParamsToStructItem(structItem: CharImageStructItem, charSize: CharacterSize, bodyType: BodyType, partType: PartType): boolean {\r\n        let doesMatch: boolean = true;\r\n        let validBodyDescriptors: BodyDescription[] = [];\r\n\r\n        if (this.BodyTypeMap.has(bodyType)) {\r\n            validBodyDescriptors = this.BodyTypeMap.get(bodyType) as BodyDescription[];\r\n        }\r\n        else {\r\n            console.error(`Invalid body type: ${bodyType} attempted to be retrieved in character image map.`);\r\n        }\r\n        \r\n        doesMatch = doesMatch && structItem.PartType === partType.toString();\r\n        doesMatch = doesMatch && structItem.Size === charSize.toString();\r\n        doesMatch = doesMatch && validBodyDescriptors.some(vbt => vbt.toString() === structItem.BodyType)\r\n\r\n        return doesMatch;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { CharacterImageMap } from '../Classes/CharacterImageMap';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\n/**\r\n * @description The properties for this class.\r\n * @param imagesToRender A list of images that will be rendered in-order, in the drawing area. Note that the\r\n * order of this array determines how images will be drawn.\r\n * @param borderColor A css-tyle-string to be used to color the border for this character.\r\n */\r\nexport interface ICharacterImageCanvasProps {\r\n    showLoadingSpinner: boolean;\r\n    imagesToRender: string[];\r\n    borderColor: string;\r\n    charScaleFactor: number;\r\n};\r\n\r\n/**\r\n * @description The state maintained by this component.\r\n */\r\nexport interface ICharacterImageCanvasState {\r\n};\r\n\r\n/**\r\n * @description Used to display a character image and its associated border, specified by the properties.\r\n */\r\nexport class CharacterImageCanvas extends React.Component<ICharacterImageCanvasProps, ICharacterImageCanvasState> {\r\n    // private static canvasHeight: number = 512;\r\n    // private static canvasWidth:  number = 256;\r\n    private static canvasHeight: number = 128;\r\n    private static canvasWidth: number = 64;\r\n\r\n    // private static charScaleFactor: number = 4;\r\n    private static charPartOffset: number = 32;\r\n    private static shadowOffset: number = 90;\r\n\r\n    /**\r\n     * Note that the numbers stored here are effectively pairs of coordinates to offset the\r\n     * image stamping by, scaled by the desired thickness of the border.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Compositing\r\n     */\r\n    private static borderCoordinates: number[] =\r\n    [\r\n        -1, -1,\r\n         0, -1,\r\n         1, -1,\r\n        -1,  0,\r\n         1,  0,\r\n        -1,  1,\r\n         0,  1,\r\n         1,  1\r\n    ];\r\n\r\n    /**\r\n     * @description Creates a new isntance of this object.\r\n     * @param props The properties for this object.\r\n     */\r\n    public constructor(props: ICharacterImageCanvasProps) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Renders this object.\r\n     */\r\n    public render() {\r\n        let showOnlySpinner: boolean = this.props.showLoadingSpinner;\r\n\r\n        return (\r\n            <div className='character-canvas-container'>\r\n                <Spinner\r\n                    className=\"character-canvas-spinner\"\r\n                    animation=\"border\"\r\n                    role=\"character image status\"\r\n                    style={{ visibility: showOnlySpinner ? 'visible' : 'hidden'}}\r\n                />\r\n                <canvas\r\n                    height={CharacterImageCanvas.canvasHeight * this.props.charScaleFactor}\r\n                    width={CharacterImageCanvas.canvasWidth * this.props.charScaleFactor}\r\n                    id='character-staging-canvas'\r\n                    ref='characterStagingCanvas'\r\n                />\r\n                <canvas\r\n                    height={CharacterImageCanvas.canvasHeight * this.props.charScaleFactor}\r\n                    width={CharacterImageCanvas.canvasWidth * this.props.charScaleFactor}\r\n                    id='character-canvas'\r\n                    ref='characterCanvas'\r\n                />\r\n                <canvas\r\n                    height={CharacterImageCanvas.canvasHeight * this.props.charScaleFactor}\r\n                    width={CharacterImageCanvas.canvasWidth * this.props.charScaleFactor}\r\n                    id='character-effects-canvas'\r\n                    ref='characterEffectsCanvas'\r\n                    style={{ visibility: showOnlySpinner ? 'hidden' : 'visible' }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @description Gets the download url for this image. This can be used to get the image via a data url.\r\n     */\r\n    public GetDownloadUrl(): string {\r\n        let effectsCanvas: HTMLCanvasElement = this.refs.characterEffectsCanvas as HTMLCanvasElement;\r\n        let downloadUrl: string = effectsCanvas.toDataURL('image/png');\r\n\r\n        return downloadUrl;\r\n    }\r\n\r\n    /**\r\n     * @description Handles events when the component has mounted.\r\n     */\r\n    public componentDidMount() {\r\n        let charStagingCanvas: HTMLCanvasElement = this.refs.characterStagingCanvas as HTMLCanvasElement;\r\n        let stagingCanvasContext: CanvasRenderingContext2D = charStagingCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        let charCanvas: HTMLCanvasElement = this.refs.characterCanvas as HTMLCanvasElement;\r\n        let charCanvasContext: CanvasRenderingContext2D = charCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        let effectsCanvas: HTMLCanvasElement = this.refs.characterEffectsCanvas as HTMLCanvasElement;\r\n        let effectsCanvasContext: CanvasRenderingContext2D = effectsCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        // This is going around the css, but ideally we don't ever want this disply context to change. The\r\n        // sole point of this canvas element is to get a stapled-together version of our final character\r\n        // drawing.\r\n        charStagingCanvas.style.display = 'none';\r\n        charCanvas.style.display = 'none';\r\n\r\n        // This is all done with upsacled pixels, so absolutely no anti-aliasing.\r\n        stagingCanvasContext.imageSmoothingEnabled = false;\r\n        charCanvasContext.imageSmoothingEnabled = false;\r\n        effectsCanvasContext.imageSmoothingEnabled = false;\r\n\r\n        // Draw the character and the border after the component has mounted. This is so that we have at least\r\n        // some default character when we load the page.\r\n        this.DrawCharacterAndBorder();\r\n    }\r\n\r\n    /**\r\n     * @description Handles events when the component has updated.\r\n     */\r\n    public componentDidUpdate() {\r\n        this.DrawCharacterAndBorder();\r\n    }\r\n\r\n    /**\r\n     * @description Draws the character image along with a border for the character. Will clean the canvas on\r\n     * when called.\r\n     */\r\n    private async DrawCharacterAndBorder(): Promise<void> {\r\n        await this.LoadCharacterImages();\r\n        await this.DrawCharacterBorder();\r\n        await this.DrawCharacterWithEffects();\r\n    }\r\n\r\n    /**\r\n     * @description Loads all of the images used to draw a character.\r\n     */\r\n    private async LoadCharacterImages(): Promise<void> {\r\n        // Create an array of html image elements. This will be populated as images are loaded.\r\n        let imagesToDraw: HTMLImageElement[] = new Array(this.props.imagesToRender.length);\r\n\r\n        let loadedImagesPromises: Promise<void>[] = this.props.imagesToRender.map((img, index) => {\r\n            return new Promise<void>(resolve => {\r\n                let imageElement: HTMLImageElement = new Image();\r\n                imageElement.onload = () => resolve();\r\n                imageElement.src = img;\r\n                imagesToDraw[index] = imageElement;\r\n            });\r\n        });\r\n\r\n        await Promise.all(loadedImagesPromises);\r\n\r\n        let charStagingCanvas: HTMLCanvasElement = this.refs.characterStagingCanvas as HTMLCanvasElement;\r\n        let stagingCanvasContext: CanvasRenderingContext2D = charStagingCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        // First, wipe the canvas. This needs to be cleared every time we re-render and re-draw.\r\n        stagingCanvasContext.clearRect(0, 0, charStagingCanvas.width, charStagingCanvas.height);\r\n\r\n        // Now draw all of the individual character components layer-by-layer, from front to back.\r\n        imagesToDraw.forEach(itd => {\r\n            stagingCanvasContext.drawImage(\r\n                itd,\r\n                0,\r\n                CharacterImageCanvas.charPartOffset * this.props.charScaleFactor,\r\n                itd.width * this.props.charScaleFactor,\r\n                itd.height * this.props.charScaleFactor);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Draws the character image, along with a 1px border using the specified color.\r\n     * @remarks https://stackoverflow.com/questions/28207232/draw-border-around-nontransparent-part-of-image-on-canvas\r\n     * Something to note about this algorith; it can only draw borders of a thickness equal to the smallest\r\n     * outlying pixel. So, our resolution for pixels on this canvas is '4', which means that the thickness\r\n     * must be 4, or else we end up with weird stamping artifacts.\r\n     */\r\n    private async DrawCharacterBorder() {\r\n        let charStagingCanvas: HTMLCanvasElement = this.refs.characterStagingCanvas as HTMLCanvasElement;\r\n        let charCanvas: HTMLCanvasElement = this.refs.characterCanvas as HTMLCanvasElement;\r\n        let canvasContext: CanvasRenderingContext2D = charCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        // Get the character staging image. This is our character image that is drawn layer-by-layer. We\r\n        // 'stamp' this image 8 times in a circle to populate each pixel that we plan to use as a border.\r\n        let charImg: HTMLImageElement = await new Promise<HTMLImageElement>(resolve => {\r\n            let charImgSrc: string = charStagingCanvas.toDataURL('image/png');\r\n            let char: HTMLImageElement = new Image();\r\n            char.onload = () => resolve(char)\r\n            char.src = charImgSrc;\r\n        });\r\n\r\n        // First, wipe the canvas. This needs to be cleared every time we re-render and re-draw.\r\n        canvasContext.clearRect(0, 0, charCanvas.width, charCanvas.height);\r\n\r\n        for (let i: number = 0; i < CharacterImageCanvas.borderCoordinates.length; i += 2) {\r\n            let thicknessScale: number =  this.props.charScaleFactor;\r\n            let xCoord: number = CharacterImageCanvas.borderCoordinates[i];\r\n            let yCoord: number = CharacterImageCanvas.borderCoordinates[i + 1];\r\n\r\n            canvasContext.drawImage(charImg, xCoord * thicknessScale, yCoord * thicknessScale);\r\n        }\r\n\r\n        canvasContext.globalCompositeOperation = \"source-in\";\r\n        canvasContext.fillStyle = this.props.borderColor;\r\n        canvasContext.fillRect(0, 0, charCanvas.width, charCanvas.height);\r\n        canvasContext.globalCompositeOperation = \"source-over\";\r\n    }\r\n\r\n    /**\r\n     * @description Draws the character image, along with a 1px border using the specified color.\r\n     * @remarks https://stackoverflow.com/questions/28207232/draw-border-around-nontransparent-part-of-image-on-canvas\r\n     * Something to note about this algorith; it can only draw borders of a thickness equal to the smallest\r\n     * outlying pixel. So, our resolution for pixels on this canvas is '4', which means that the thickness\r\n     * must be 4, or else we end up with weird stamping artifacts.\r\n     */\r\n    private async DrawCharacterWithEffects() {\r\n        let charStagingCanvas: HTMLCanvasElement = this.refs.characterStagingCanvas as HTMLCanvasElement;\r\n        let borderCanvas: HTMLCanvasElement = this.refs.characterCanvas as HTMLCanvasElement;\r\n        let effectsCanvas: HTMLCanvasElement = this.refs.characterEffectsCanvas as HTMLCanvasElement;\r\n        let effectsCanvasContext: CanvasRenderingContext2D = effectsCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        let shadowImg: HTMLImageElement = await new Promise<HTMLImageElement>(resolve => {\r\n            let shadowImgSrc: string = CharacterImageMap.CharacterShadowSource;\r\n            let shadow: HTMLImageElement = new Image();\r\n            shadow.onload = () => resolve(shadow);\r\n            shadow.src = shadowImgSrc;\r\n        });\r\n\r\n        let charBorderImg: HTMLImageElement = await new Promise<HTMLImageElement>(resolve => {\r\n            let charBorderImgSrc: string = borderCanvas.toDataURL('image/png');\r\n            let border: HTMLImageElement = new Image();\r\n            border.onload = () => resolve(border);\r\n            border.src = charBorderImgSrc;\r\n        });\r\n\r\n        let charImg: HTMLImageElement = await new Promise<HTMLImageElement>(resolve => {\r\n            let charImgSrc: string = charStagingCanvas.toDataURL('image/png');\r\n            let char: HTMLImageElement = new Image();\r\n            char.onload = () => resolve(char);\r\n            char.src = charImgSrc;\r\n        });\r\n\r\n        // First, wipe the canvas. This needs to be cleared every time we re-render and re-draw.\r\n        effectsCanvasContext.clearRect(0, 0, effectsCanvas.width, effectsCanvas.height);\r\n\r\n        // Draw the shadow underneath a character's feet first. This puts it as far in the background as\r\n        // possible.\r\n        effectsCanvasContext.drawImage(\r\n            shadowImg,\r\n            0,\r\n            CharacterImageCanvas.shadowOffset * this.props.charScaleFactor,\r\n            shadowImg.width * this.props.charScaleFactor,\r\n            shadowImg.height * this.props.charScaleFactor\r\n            );\r\n\r\n        effectsCanvasContext.drawImage(charBorderImg, 0, 0);\r\n        effectsCanvasContext.drawImage(charImg, 0, 0);\r\n    }\r\n}\r\n","export enum CharacterSize\r\n{\r\n    Average = 'Size_Average'\r\n}","import React from 'react';\r\nimport { CharImageDownloadCallback } from '../Types/CharImageDownloadCallback';\r\nimport { BorderSelectionCallback } from '../Types/BorderSelectionCallback';\r\nimport { CharacterImageCanvas } from './CharacterImageCanvas';\r\nimport { ColorResult, CirclePicker } from 'react-color';\r\n\r\n/**\r\n * @description The properties for this class.\r\n * @param imagesToRender A list of images that will be rendered in-order, in the drawing area. Note that the\r\n * order of this array determines how images will be drawn.\r\n * @param downloadCallback A callback when the download button is clicked in this component.\r\n */\r\nexport interface ICharacterDrawingAreaProps {\r\n    showLoadingSpinner: boolean;\r\n    imagesToRender: string[];\r\n    downloadCallback: CharImageDownloadCallback;\r\n    borderCallback: BorderSelectionCallback;\r\n    borderColor: string;\r\n}\r\n\r\n/**\r\n * @description The state for this class.\r\n * @param borderColor A css-style-string used to color the border for the character. This will come from the\r\n * circle color picker.\r\n * @param downloadUrl A data url that will be used when providing the callback for the download button.\r\n */\r\nexport interface ICharacterDrawingAreaState {\r\n    downloadUrl: string;\r\n}\r\n\r\n/**\r\n * A high-level container for the character drawing area. Contains the border color controls, the download\r\n * button and the character canvas.\r\n */\r\nexport class CharacterDrawingArea extends React.Component<ICharacterDrawingAreaProps, ICharacterDrawingAreaState> {\r\n    private static outlineColorOptions =\r\n    [\r\n        '#131313',\r\n        '#ffffff',\r\n        '#c42430',\r\n        '#ffeb57',\r\n        '#5ac54f',\r\n        '#0cf1ff'\r\n    ];\r\n\r\n    /**\r\n     * @description Creates a new instance of this class.\r\n     * @param props The provided properties for this class.\r\n     */\r\n    public constructor(props: ICharacterDrawingAreaProps) {\r\n        super(props);\r\n        this.state = {\r\n            downloadUrl: \"\"\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Renders this component.\r\n     */\r\n    public render() {\r\n        return (\r\n            <div className=\"character-drawing-area\">\r\n                <CharacterImageCanvas\r\n                    charScaleFactor={4}\r\n                    showLoadingSpinner={this.props.showLoadingSpinner}\r\n                    ref=\"charImageCanvas\"\r\n                    imagesToRender={this.props.imagesToRender}\r\n                    borderColor={this.props.borderColor}\r\n                />\r\n                <span className=\"character-drawing-label\">\r\n                    Border Color\r\n                </span>\r\n                <CirclePicker\r\n                    onChangeComplete={this.handleColorChange.bind(this)}\r\n                    color={this.props.borderColor}\r\n                    colors={CharacterDrawingArea.outlineColorOptions}\r\n                />\r\n                <button className=\"character-image-download\"\r\n                    onClick={() => this.props.downloadCallback(this.fetchDownloadUrl())}>\r\n                    &gt;&gt;Download&lt;&lt;\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    private handleColorChange(color: ColorResult): void {\r\n        this.props.borderCallback(color.hex);\r\n    }\r\n\r\n    private fetchDownloadUrl(): string {\r\n        let charImgCanvas: CharacterImageCanvas = this.refs.charImageCanvas as CharacterImageCanvas;\r\n        let downloadUrl = charImgCanvas.GetDownloadUrl();\r\n\r\n        return downloadUrl;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport '../CharacterImage.css';\r\n\r\nimport { PartSelector } from './PartSelector';\r\nimport { CharacterDrawingArea } from './CharacterDrawingArea';\r\n\r\nimport { CharacterImageMap } from '../Classes/CharacterImageMap';\r\nimport { CharImageLayout } from '../Classes/CharImageLayout';\r\n\r\nimport { CharacterSize } from '../Enums/CharacterSize';\r\nimport { PartType } from '../Enums/PartType';\r\nimport { BodyType } from '../Enums/BodyType';\r\n\r\nimport { BodyTypeSelectionCallback } from '../Types/BodyTypeSelectionCallback';\r\nimport { PartTypeSelectionCallback } from '../Types/PartTypeSelectionCallback';\r\nimport { PartSelectionCallback } from '../Types/PartSelectionCallback';\r\nimport { CharImageDownloadCallback } from '../Types/CharImageDownloadCallback';\r\nimport { CharacterStateManager } from '../../FirebaseAuth/Classes/CharacterStateManager';\r\nimport { UserDataAuth } from '../../FirebaseAuth/Classes/UserDataAuth';\r\nimport { PlayerCharacterData } from '../../FirebaseAuth/Types/PlayerCharacterData';\r\n\r\n/**\r\n * @description\r\n * The interface for props passed to this object. This class in particular takes no props; it is effectively\r\n * the app itself.\r\n */\r\nexport interface ICharacterImageProps {\r\n};\r\n\r\n/**\r\n * @description\r\n * The interface for the internal state maintained by this object.\r\n * @param canvasImages The list of image sources, represented as strings, that will be rendered using the\r\n * Canvas class.\r\n * @param partLayers A list of image layers. This contains information about all of the possible layers that\r\n * can be drawn to the currently-selected body type. This contains information about what each layer is, how\r\n * that layer is drawn, and what the possible images are in that layer.\r\n */\r\nexport interface ICharacterImageState {\r\n    charSize: CharacterSize;\r\n    partType: PartType;\r\n    charImageLayout: CharImageLayout;\r\n    checkingForCharacterImage: boolean;\r\n    borderStyle: string;\r\n};\r\n\r\n/**\r\n * @description The main entry point for the character drawing application. Provides all of the buttons and\r\n * fun stuff needed to create a character image on a canvas element.\r\n */\r\nexport class CharacterImage extends React.Component<ICharacterImageProps, ICharacterImageState> {\r\n    private handlePartTypeChange(partType: PartType) {\r\n        this.setState({\r\n            partType: partType\r\n        });\r\n    }\r\n\r\n    private handleBodyTypeChange(bodyType: BodyType) {\r\n        let charImageLayout: CharImageLayout = new CharImageLayout(new Map<PartType, string>(), bodyType);\r\n\r\n        if (CharacterImageMap.DefaultBodyParts.has(bodyType)) {\r\n            charImageLayout = CharacterImageMap.DefaultBodyParts.get(bodyType) as CharImageLayout;\r\n        }\r\n\r\n        this.setState({\r\n            charImageLayout: charImageLayout\r\n        });\r\n    }\r\n\r\n    private handlePartSelection(partType: PartType, imgSource: string): void {\r\n        let charImgLayout = this.state.charImageLayout;\r\n        charImgLayout.SetPartImage(partType, imgSource);\r\n\r\n        this.setState({\r\n            charImageLayout: charImgLayout\r\n        });\r\n        \r\n        CharacterStateManager.GetInstance().GetCurrentStaticCharacterData()\r\n            .then(charData => {\r\n                if (charData !== undefined) {\r\n                    charData.CharLayout = this.state.charImageLayout;\r\n                    \r\n                    CharacterStateManager.GetInstance().UploadCharacterData(charData);\r\n                }\r\n            });\r\n    }\r\n\r\n    private handleBorderSelection(borderStyle: string): void {\r\n        this.setState({\r\n            borderStyle: borderStyle\r\n        });\r\n\r\n        CharacterStateManager.GetInstance().GetCurrentStaticCharacterData()\r\n            .then(charData => {\r\n                if (charData !== undefined) {\r\n                    charData.BorderColor = borderStyle;\r\n\r\n                    CharacterStateManager.GetInstance().UploadCharacterData(charData);\r\n                }\r\n            });\r\n    }\r\n\r\n    private handleCanvasDownload(downloadSource: string): void {\r\n        if (downloadSource === undefined || downloadSource === \"\") {\r\n            console.error(\"Character image was attempted to be downloaded with an empty, unset string.\");\r\n        }\r\n        else {\r\n            let link = document.createElement('a');\r\n\r\n            link.download = 'characterImage.png';\r\n            link.href = downloadSource;\r\n            link.click();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Creates a new instance of this component.\r\n     * @param props Higher-order properties passed in to this component.\r\n     */\r\n    public constructor(props: ICharacterImageProps) {\r\n        super(props);\r\n        this.state = {\r\n            charSize: CharacterSize.Average,\r\n            partType: PartType.Body,\r\n            charImageLayout: new CharImageLayout(new Map(), BodyType.AverageSizedFeminine),\r\n            checkingForCharacterImage: true,\r\n            borderStyle: \"#131313\"\r\n        }\r\n        this.CheckForCharacterImage();\r\n\r\n    }\r\n\r\n    private async CheckForCharacterImage() {\r\n        let charData: PlayerCharacterData | undefined = undefined;\r\n\r\n        // Check to see if we have some character data we can load for this person. If so, update the current\r\n        // layers so someone can modify their character!\r\n        let userHasAccount: boolean = await UserDataAuth.GetInstance().CheckForAccess();\r\n        if (userHasAccount) {\r\n            charData = await CharacterStateManager.GetInstance().GetCurrentStaticCharacterData();\r\n        }\r\n\r\n        if (charData !== undefined) {\r\n            console.log(charData);\r\n            this.setState({\r\n                charImageLayout: charData.CharLayout,\r\n                checkingForCharacterImage: false,\r\n                borderStyle: charData.BorderColor\r\n            });\r\n        }\r\n        else {\r\n            console.log(\"Could not load char data\");\r\n            this.setState({\r\n                charImageLayout: CharacterImageMap.DefaultBodyParts.get(BodyType.AverageSizedFeminine) as CharImageLayout,\r\n                checkingForCharacterImage: false\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description\r\n     * Renders a series of body selectors for the user to pick from. These body selectors will modify the list\r\n     * of available accessories (since a tiny hat looks silly on a giant person . . . or does it?). Needs to\r\n     * look at the BodyMap.tsx file to understand what will be populated.\r\n     */\r\n    public renderBodySelection() {\r\n        return (<div></div>);\r\n    }\r\n\r\n    /**\r\n     * @description Renders this component.\r\n     */\r\n    public render() {\r\n        let imagePaths = CharacterImageMap.GetCharacterImagePaths(\r\n            this.state.charSize,\r\n            this.state.charImageLayout.BodyType,\r\n            this.state.partType);\r\n        \r\n        let partTypeTabSelection: PartTypeSelectionCallback = (partType: PartType) => {\r\n            this.handlePartTypeChange(partType);\r\n        };\r\n\r\n        let bodyTypeTabSelection: BodyTypeSelectionCallback = (bodyType: BodyType) => {\r\n            this.handleBodyTypeChange(bodyType);\r\n        };\r\n\r\n        let partSelection: PartSelectionCallback = (partType: PartType, imgSource: string) => {\r\n            this.handlePartSelection(partType, imgSource);\r\n        };\r\n\r\n        let canvasDownload: CharImageDownloadCallback = (downloadSource: string) => {\r\n            this.handleCanvasDownload(downloadSource);\r\n        };\r\n\r\n        let charImages: string[] = this.state.charImageLayout.GetImages();\r\n        console.log(`Render called with images: ${charImages}`);\r\n\r\n        return (\r\n            <div className=\"character-image\">\r\n                <CharacterDrawingArea\r\n                    borderColor={this.state.borderStyle}\r\n                    showLoadingSpinner={this.state.checkingForCharacterImage}\r\n                    imagesToRender={charImages}\r\n                    downloadCallback={canvasDownload.bind(this)}\r\n                    borderCallback={this.handleBorderSelection.bind(this)}\r\n                />\r\n                <PartSelector\r\n                    partSelectionCallback={partSelection.bind(this)}\r\n                    bodyTypeSelectionCallback={bodyTypeTabSelection.bind(this)}\r\n                    partTypeSelectionCallback={partTypeTabSelection.bind(this)}\r\n                    partType={this.state.partType}\r\n                    partOptions={imagePaths}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export enum SourceType {\r\n    Official = \"Official\",\r\n    Homebrew = \"Homebrew\"\r\n}\r\n","export enum ItemType {\r\n    Weapon = \"Weapons\",\r\n    Armor = \"Armor\",\r\n    Potion = \"Potions\",\r\n    Wondrous = \"Wondrous Items\"\r\n}\r\n","import React from 'react';\r\nimport { IItem } from '../Interfaces/IItem';\r\nimport { IItemJson } from '../Interfaces/IItemJson';\r\nimport { SourceType } from '../Enums/SourceType';\r\nimport { ItemModifications } from '../Enums/ItemModifications';\r\nimport { ItemType } from '../Enums/ItemType';\r\n\r\nexport abstract class Item implements IItem {\r\n    RenderItemDescription(): JSX.Element {\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{\r\n                    }}>\r\n                    <h5 className=\"item-description-title\">Details</h5>\r\n                    <p style={{\r\n                        padding: `${this.paragraphMargins}`\r\n                    }}>\r\n                        {this.description} {this.details}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    GetEqualityString(): string {\r\n        return (JSON.stringify(this as IItemJson));\r\n    }\r\n    \r\n    key: string = \"\";\r\n    title: string = \"\";\r\n    description: string = \"\";\r\n    details: string = \"\";\r\n    iconSource: string = \"\";\r\n    source: SourceType = SourceType.Homebrew;\r\n    itemCost: number = 0;\r\n    requiresAttunement: boolean = false;\r\n    modifications: ItemModifications[] = [];\r\n    type: ItemType = ItemType.Wondrous;\r\n\r\n    protected readonly paragraphMargins: string = \"0 15px 0 15px\";\r\n    protected readonly titleMargins: string = \"15px 0 0 0\";\r\n}\r\n","import React from 'react';\r\nimport { IItemJson } from '../Interfaces/IItemJson';\r\nimport { SourceType } from \"../Enums/SourceType\";\r\nimport { ItemType } from \"../Enums/ItemType\";\r\nimport { WeaponProperties } from \"../Enums/WeaponProperties\";\r\nimport { Item } from './Item';\r\nimport { Attack } from './Attack';\r\n\r\nexport interface IItemWeaponJson extends IItemJson {\r\n    shortRange: number;\r\n    longRange: number;\r\n    properties: WeaponProperties[];\r\n\r\n    /**\r\n     * @description The mapping here is 1 attack to a series of dice rolls that represent that attack.\r\n     * The idea is that multiple damage types necessitate different rolls or modifiers. Each attack is\r\n     * indexed by a unique name.\r\n     */\r\n    attacks: { [index: string]: Attack[] };\r\n}\r\n\r\nexport class ItemWeapon extends Item implements IItemWeaponJson {\r\n    public readonly key: string = \"\";\r\n    public title: string = \"\";\r\n    public description: string = \"\";\r\n    public details: string = \"\";\r\n    public iconSource: string = \"\";\r\n    public source: SourceType = SourceType.Homebrew;\r\n    public itemCost: number = 0;\r\n    public requiresAttunement: boolean = false;\r\n    public readonly type: ItemType = ItemType.Weapon;\r\n    \r\n    public shortRange: number = 20;\r\n    public longRange: number = 60;\r\n    public properties: WeaponProperties[] = [];\r\n    \r\n    /**\r\n     * @description The mapping here is 1 attack to a series of dice rolls that represent that attack.\r\n     * The idea is that multiple damage types necessitate different rolls or modifiers. Each attack is\r\n     * indexed by a unique name.\r\n     */\r\n    public attacks: { [index: string]: Attack[] } = {};\r\n\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    // http://choly.ca/post/typescript-json/\r\n    static fromJson(json: IItemWeaponJson): ItemWeapon {\r\n        let item = new ItemWeapon();\r\n        return Object.assign(item, json, {\r\n        });\r\n    }\r\n\r\n    RenderItemDescription(): JSX.Element {\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{\r\n                    }}>\r\n                    <h5 className=\"item-description-title\">Details</h5>\r\n                    <p style ={{\r\n                        padding: `${this.paragraphMargins}`\r\n                    }}>\r\n                        {this.description} {this.details}\r\n                    </p>\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        paddingTop: `${this.titleMargins}`\r\n                    }}>\r\n                    <h5 className=\"item-description-title\">Attacks</h5>\r\n                    <p style={{\r\n                        padding: this.paragraphMargins\r\n                    }}>\r\n                        {this.GetAttackDetails()}\r\n                    </p>\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        paddingTop: `${this.titleMargins}`\r\n                    }}>\r\n                    <h5 className=\"item-description-title\">Properties</h5>\r\n                    <p style={{\r\n                        padding: this.paragraphMargins\r\n                    }}>\r\n                        {this.GetProperties()}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private GetAttackDetails(): JSX.Element {\r\n        let attackDetails: JSX.Element[] = Object.entries(this.attacks).map(element => {\r\n            let name: string = element[0];\r\n            let damageRolls: Attack[] = element[1];\r\n            let rolls: JSX.Element[] = [];\r\n            \r\n            damageRolls.forEach(roll => {\r\n                if (rolls.length > 0) {\r\n                    rolls.push(\r\n                        <span> and </span>\r\n                    );\r\n                }\r\n                rolls.push (\r\n                    <span className={`text-color-${roll.damageType.toLowerCase()}`}>\r\n                        <span>{`${roll.diceCount}d${roll.diceSize}${roll.modifier > 0 ? `+${roll.modifier}` : ''}`}</span>\r\n                        <span> {roll.damageType} damage</span>\r\n                    </span>\r\n                );\r\n            });\r\n\r\n            return (\r\n                <p>\r\n                    <span style={{ fontWeight: \"bolder\" }}>{name}: </span>{rolls}\r\n                </p>\r\n            );\r\n        })\r\n\r\n        return (\r\n            <div>\r\n                {attackDetails}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private GetProperties(): JSX.Element {\r\n        let propertyDetails: JSX.Element[] = this.properties.map(property => {\r\n            return (\r\n                <div>\r\n                    {property}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {propertyDetails}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport function IItemIsItemWeapon(item: IItemJson): item is ItemWeapon {\r\n    let isType: boolean = true;\r\n\r\n    isType = isType && (item as ItemWeapon).type === ItemType.Weapon;\r\n    isType = isType && (item as ItemWeapon).attacks !== undefined;\r\n\r\n    return isType;\r\n}\r\n","import React from 'react';\r\nimport { IItemJson } from '../Interfaces/IItemJson';\r\nimport { Item } from './Item';\r\nimport { SourceType } from \"../Enums/SourceType\";\r\nimport { ItemType } from \"../Enums/ItemType\";\r\n\r\nexport interface IItemPotionJson extends IItemJson {\r\n    hasWithdrawalEffect: boolean;\r\n}\r\n\r\nexport class ItemPotion extends Item implements IItemPotionJson {\r\n    public readonly key: string = \"\";\r\n    public title: string = \"\";\r\n    public description: string = \"\";\r\n    public details: string = \"\";\r\n    public iconSource: string = \"\";\r\n    public source: SourceType = SourceType.Homebrew;\r\n    public itemCost: number = 0;\r\n    public requiresAttunement: boolean = false;\r\n    public readonly type: ItemType = ItemType.Potion;\r\n\r\n    public hasWithdrawalEffect: boolean = false;\r\n    \r\n    static fromJson(json: IItemPotionJson): ItemPotion {\r\n        let item = new ItemPotion();\r\n        return Object.assign(item, json, {\r\n        });\r\n    }\r\n\r\n    RenderItemDescription(): JSX.Element {\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{\r\n                    }}>\r\n                    <h5 className=\"item-description-title\">Details</h5>\r\n                    <p style={{\r\n                        padding: `${this.paragraphMargins}`\r\n                    }}>\r\n                        {this.description} {this.details} {this.GetWithdrawalEffectClause()}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    GetWithdrawalEffectClause(): JSX.Element {\r\n        let clause: JSX.Element;\r\n        if (this.hasWithdrawalEffect) {\r\n            clause = (\r\n                <span>\r\n                    <span>Using this potion will result in a </span>\r\n                    <span className=\"text-color-withdrawal\">withdrawal effect</span>\r\n                    <span>.</span>\r\n                </span>\r\n            )\r\n        }\r\n        else {\r\n            clause = (\r\n                <span></span>\r\n            )\r\n        }\r\n\r\n        return clause;\r\n    }\r\n}\r\n\r\nexport function IItemIsItemPotion(item: IItemJson): item is ItemPotion {\r\n    let isType: boolean = true;\r\n\r\n    isType = isType && (item as ItemPotion).type === ItemType.Potion;\r\n\r\n    return isType;\r\n}\r\n","import { IItemJson } from '../Interfaces/IItemJson';\r\nimport { Item } from './Item';\r\nimport { SourceType } from \"../Enums/SourceType\";\r\nimport { ItemType } from \"../Enums/ItemType\";\r\n\r\nexport interface IItemArmorJson extends IItemJson {\r\n    armorBonus: number;\r\n    addDex: boolean;\r\n    stealthDisadvantage: boolean;\r\n}\r\n\r\nexport class ItemArmor extends Item implements IItemArmorJson {\r\n    public readonly key: string = \"\";\r\n    public title: string = \"\";\r\n    public description: string = \"\";\r\n    public details: string = \"\";\r\n    public iconSource: string = \"\";\r\n    public source: SourceType = SourceType.Homebrew;\r\n    public itemCost: number = 0;\r\n    public requiresAttunement: boolean = false;\r\n    public readonly type: ItemType = ItemType.Armor;\r\n\r\n    public armorBonus: number = 0;\r\n    public addDex: boolean = true;\r\n    public stealthDisadvantage: boolean = false;\r\n\r\n    static fromJson(json: IItemArmorJson): ItemArmor {\r\n        let item = new ItemArmor();\r\n        return Object.assign(item, json, {\r\n        });\r\n    }\r\n}\r\n\r\nexport function IItemIsItemArmor(item: IItemJson) : item is ItemArmor {\r\n    let isType: boolean = true;\r\n\r\n    isType = isType && (item as ItemArmor).type === ItemType.Armor;\r\n    isType = isType && (item as ItemArmor).addDex !== undefined;\r\n    isType = isType && (item as ItemArmor).stealthDisadvantage !== undefined;\r\n\r\n    return isType;\r\n}\r\n","import { IItemJson } from '../Interfaces/IItemJson';\r\nimport { Item } from './Item';\r\nimport { SourceType } from \"../Enums/SourceType\";\r\nimport { ItemType } from \"../Enums/ItemType\";\r\n\r\nexport interface IItemWondrousJson extends IItemJson {\r\n}\r\n\r\nexport class ItemWondrous extends Item implements IItemWondrousJson {\r\n    public readonly key: string = \"\";\r\n    public title: string = \"\";\r\n    public description: string = \"\";\r\n    public details: string = \"\";\r\n    public iconSource: string = \"\";\r\n    public source: SourceType = SourceType.Homebrew;\r\n    public itemCost: number = 0;\r\n    public requiresAttunement: boolean = false;\r\n    public readonly type: ItemType = ItemType.Wondrous;\r\n\r\n    static fromJson(json: IItemWondrousJson): ItemWondrous {\r\n        let item = new ItemWondrous();\r\n        return Object.assign(item, json, {\r\n        });\r\n    }\r\n}\r\n\r\nexport function IItemIsItemWondrous(item: IItemJson): item is ItemWondrous {\r\n    let isType: boolean = true;\r\n\r\n    isType = isType && (item as ItemWondrous).type === ItemType.Wondrous;\r\n\r\n    return isType;\r\n}\r\n","export enum WeaponProperties {\r\n    Ammunition = \"Ammunition\",\r\n    Finesse = \"Finesse\",\r\n    Heavy = \"Heavy\",\r\n    Improvised = \"Improvised\",\r\n    Light = \"Light\",\r\n    Loading = \"Loading\",\r\n    Reach = \"Reach\",\r\n    Silver = \"Silver\",\r\n    Special = \"Special\",\r\n    Thrown = \"Thrown\",\r\n    TwoHanded = \"Two-Handed\",\r\n    Versatile = \"Versatile\"\r\n}\r\n","export enum DamageType {\r\n  Acid = \"Acid\",\r\n  Bludgeoning = \"Bludgeoning\",\r\n  Cold = \"Cold\",\r\n  Fire = \"Fire\",\r\n  Force = \"Force\",\r\n  Lightning = \"Lightning\",\r\n  Necrotic = \"Necrotic\",\r\n  Piercing = \"Piercing\",\r\n  Poison = \"Poison\",\r\n  Psychic = \"Psychic\",\r\n  Radiant = \"Radiant\",\r\n  Slashing = \"Slashing\",\r\n  Thunder = \"Thunder\"\r\n}\r\n","import { ItemWeapon, IItemWeaponJson, IItemIsItemWeapon } from \"./ItemWeapon\";\r\nimport { ItemPotion, IItemPotionJson, IItemIsItemPotion } from './ItemPotion';\r\nimport { ItemArmor, IItemArmorJson, IItemIsItemArmor } from './ItemArmor';\r\nimport { ItemWondrous, IItemWondrousJson, IItemIsItemWondrous } from './ItemWondrous';\r\nimport { ItemType } from \"../Enums/ItemType\";\r\nimport { IItem } from \"../Interfaces/IItem\";\r\nimport { IItemJson } from \"../Interfaces/IItemJson\";\r\nimport { SourceType } from \"../Enums/SourceType\";\r\nimport { WeaponProperties } from \"../Enums/WeaponProperties\";\r\nimport { DamageType } from \"../Enums/DamageType\";\r\n\r\n/**\r\n * @description A class used to fetch items based on a specific index and call.\r\n * \r\n * In future, recall that this link explains how to self-initialize:\r\n * https://basarat.gitbooks.io/typescript/docs/tips/staticConstructor.html\r\n */\r\nexport class ItemSource {\r\n    /**\r\n     * @description Finds the item under the specified index, and returns that item. If the item cannot be\r\n     * found, returns undefined instead. This function returns undefined such that a caller can determine how\r\n     * to handle the missing element, rather than throw an exception.\r\n     * @param index The index to search for the item.\r\n     * @param type The type of item to search for.\r\n     */\r\n    public static GetItem(index: string, type: ItemType): IItem | undefined {\r\n        let item: IItemJson | undefined = undefined;\r\n        let listToSearch: IItemJson[] | undefined = undefined;\r\n        let constructedItem: IItem | undefined = undefined;\r\n\r\n        switch (type) {\r\n            case ItemType.Weapon:\r\n                listToSearch = ItemMap_Weapons;\r\n                break;\r\n            case \"Armor\":\r\n                listToSearch = ItemMap_Armor;\r\n                break;\r\n            case ItemType.Potion:\r\n                listToSearch = ItemMap_Potions;\r\n                break;\r\n            case ItemType.Wondrous:\r\n                listToSearch = ItemMap_Wondrous;\r\n                break;\r\n            default:\r\n                listToSearch = undefined;\r\n                break;\r\n        }\r\n        \r\n        if (listToSearch !== undefined) {\r\n            for (let i = 0; i < listToSearch.length; i++) {\r\n                let currentItem = listToSearch[i];\r\n                if (currentItem.key === index) {\r\n                    item = currentItem;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (item !== undefined) {\r\n            constructedItem = this.ConvertJsonToItem(item);\r\n        }\r\n\r\n        return constructedItem;\r\n    }\r\n\r\n    /**\r\n     * Searches the list of all available items for those that match a set of specific keywords. Enables\r\n     * search functionality through all known items.\r\n     * @param keywords The list of keywords to compare against all items.\r\n     */\r\n    public static SearchItems(keywords: string[]): IItem[] {\r\n        let masterList: IItemJson[] = [];\r\n        let matchingItems: IItem[] = [];\r\n\r\n        // Filter out all empty keywords.\r\n        let nonEmptyKeywords: string[] = keywords.filter(k => !this.IsMatch(k, /\\s+/) && k.length > 0);\r\n\r\n        // Trim off the whitespace for any keyword.\r\n        nonEmptyKeywords = nonEmptyKeywords.map(k => k.trim());\r\n\r\n        masterList = masterList.concat(ItemMap_Armor);\r\n        masterList = masterList.concat(ItemMap_Potions);\r\n        masterList = masterList.concat(ItemMap_Weapons);\r\n        masterList = masterList.concat(ItemMap_Wondrous);\r\n\r\n        let filteredItems = masterList.filter(item => nonEmptyKeywords.every(keyword => this.ContainsKeyword(keyword, item)))\r\n\r\n        // Verify that the item isn't already in the matching items list.\r\n        filteredItems.forEach(f => {\r\n            // Convert the item first. We need this to access the equality string.\r\n            let converted = this.ConvertJsonToItem(f);\r\n\r\n            // If the item can be converted, and the list of existing items does not already include this\r\n            // item, then add it.\r\n            if (converted !== undefined && !matchingItems.some(m => converted?.GetEqualityString() === m.GetEqualityString())) {\r\n                matchingItems.push(converted);\r\n            }\r\n        });\r\n\r\n        // If the list of keywords that was provided was empty, just return everything.\r\n        if (nonEmptyKeywords.length <= 0) {\r\n            masterList.forEach(m => {\r\n                let converted = this.ConvertJsonToItem(m);\r\n                if (converted !== undefined) {\r\n                    matchingItems.push(converted);\r\n                }\r\n            })\r\n        }\r\n\r\n        return matchingItems;\r\n    }\r\n\r\n    /**\r\n     * Converts a json-able item into an item.\r\n     * @param item The json item to be converted to an item.\r\n     */\r\n    private static ConvertJsonToItem(item: IItemJson): IItem | undefined {\r\n        let constructedItem: IItem | undefined = undefined;\r\n\r\n        if (IItemIsItemWeapon(item)) {\r\n            constructedItem = ItemWeapon.fromJson(item)\r\n        }\r\n        else if (IItemIsItemArmor(item)) {\r\n            constructedItem = ItemArmor.fromJson(item);\r\n        }\r\n        else if (IItemIsItemPotion(item)) {\r\n            constructedItem = ItemPotion.fromJson(item);\r\n        }\r\n        else if (IItemIsItemWondrous(item)) {\r\n            constructedItem = ItemWondrous.fromJson(item);\r\n        }\r\n\r\n        return constructedItem;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the keyword is contained in the specified item.\r\n     * @param keyword The keyword to evaluate. \r\n     * @param item The item to evaluate.\r\n     */\r\n    private static ContainsKeyword(keyword: string, item: IItemJson): boolean {\r\n        let upperKeyword = keyword.toLocaleUpperCase();\r\n        let doesMatch: boolean = false;\r\n        \r\n        doesMatch = doesMatch || item.key.toLocaleUpperCase().includes(upperKeyword);\r\n        doesMatch = doesMatch || item.type.toLocaleUpperCase().includes(upperKeyword);\r\n        doesMatch = doesMatch || item.title.toLocaleUpperCase().includes(upperKeyword);\r\n        doesMatch = doesMatch || item.description.toLocaleUpperCase().includes(upperKeyword);\r\n        doesMatch = doesMatch || item.details.toLocaleUpperCase().includes(upperKeyword);\r\n        \r\n        doesMatch = doesMatch || upperKeyword.includes(\"ATTUNEMENT\".toLocaleUpperCase()) && item.requiresAttunement;\r\n\r\n        if (IItemIsItemWeapon(item)) {\r\n            doesMatch = doesMatch || item.properties.some(p => p.toLocaleUpperCase().includes(upperKeyword))\r\n        }\r\n\r\n        return doesMatch;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the provided regex matches the provided keyword.\r\n     * @param phrase The keyword to match against.\r\n     * @param regex The regular expression to compare against.\r\n     */\r\n    private static IsMatch(phrase: string, regex: RegExp): boolean {\r\n        let isMatch: boolean = false;\r\n\r\n        let match: RegExpMatchArray | null = phrase.match(regex);\r\n        isMatch = isMatch || (match != null && match.length > 0);\r\n\r\n        return isMatch;\r\n    }\r\n}\r\n\r\n/**\r\n * The purpose of the following classes and constants is to act as a proxy for a server. This will likely all\r\n * go away if/when this software switches to use AWS or something similar.\r\n */\r\nconst ItemMap_Weapons: IItemWeaponJson[] =\r\n[\r\n    {\r\n        key: 'Club',\r\n        title: 'Club',\r\n        description: 'A stout bludgeoning weapon made of oak.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/club.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            WeaponProperties.Light\r\n        ],\r\n        itemCost: 1,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Whack\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 4,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Bludgeoning\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Dagger',\r\n        title: 'Dagger',\r\n        description: 'A small piercing weapon.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/dagger.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            WeaponProperties.Light,\r\n            WeaponProperties.Finesse,\r\n            WeaponProperties.Thrown\r\n        ],\r\n        itemCost: 2,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Stab\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 4,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Piercing\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Greatclub',\r\n        title: 'Greatclub',\r\n        description: 'A massive bludgeoning weapon.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/greatclub.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            WeaponProperties.TwoHanded\r\n        ],\r\n        itemCost: 1,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Smash\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 8,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Bludgeoning\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Handaxe',\r\n        title: 'Handaxe',\r\n        description: 'A small throwing axe.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/handaxe.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            WeaponProperties.Light,\r\n            WeaponProperties.Thrown\r\n        ],\r\n        itemCost: 5,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Hack\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 6,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Slashing\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Javelin',\r\n        title: 'Javelin',\r\n        description: 'A long, pointed, throwing weapon.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/javelin.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 30,\r\n        longRange: 120,\r\n        properties: [\r\n            WeaponProperties.Thrown\r\n        ],\r\n        itemCost: 5,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Poke\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 6,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Piercing\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'LightHammer',\r\n        title: 'Light Hammer',\r\n        description: 'A small bludgeoning weapon.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/light_hammer.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            WeaponProperties.Light,\r\n            WeaponProperties.Thrown\r\n        ],\r\n        itemCost: 2,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Smack\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 4,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Bludgeoning\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Mace',\r\n        title: 'Mace',\r\n        description: 'A bludgeoning weapon.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/mace.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n        ],\r\n        itemCost: 5,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Smash\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 6,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Bludgeoning\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Quarterstaff',\r\n        title: 'Quarterstaff',\r\n        description: 'A long, bludgeoning weapon made of oak.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/quarterstaff.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            WeaponProperties.Versatile\r\n        ],\r\n        itemCost: 1,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Whap (1h)\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 6,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Bludgeoning\r\n                    }\r\n                ],\r\n            \"Whap (2h)\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 8,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Bludgeoning\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Sickle',\r\n        title: 'Sickle',\r\n        description: 'A curved weapon made of steel.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/sickle.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            WeaponProperties.Light\r\n        ],\r\n        itemCost: 1,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Slash\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 4,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Slashing\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Spear',\r\n        title: 'Spear',\r\n        description: 'A long, pointed weapon.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/spear.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            WeaponProperties.Thrown,\r\n            WeaponProperties.Versatile\r\n        ],\r\n        itemCost: 1,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Stab (1h)\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 6,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Piercing\r\n                    }\r\n                ],\r\n            \"Stab (2h)\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 8,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Piercing\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Shortsword',\r\n        title: 'Shortsword',\r\n        description: 'A short, pointed weapon.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/shortsword.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            WeaponProperties.Finesse,\r\n            WeaponProperties.Light\r\n        ],\r\n        itemCost: 10,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Stab\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 6,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Piercing\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'SnakeStaff',\r\n        title: 'Snake Staff',\r\n        description: 'The staff is wrapped by the likeness of a clay snake.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/Cleric Staff Snake Green.png',\r\n        source: SourceType.Homebrew,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            WeaponProperties.TwoHanded\r\n        ],\r\n        itemCost: 100,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Curse\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 4,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Bludgeoning\r\n                    },\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 4,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Poison\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Darts',\r\n        title: 'Darts',\r\n        description: 'A small thrown weapon. 20 darts line a leather pouch.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/dart.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            WeaponProperties.Finesse,\r\n            WeaponProperties.Thrown\r\n        ],\r\n        itemCost: 1,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Throw\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 4,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Piercing\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'LightCrossbow',\r\n        title: 'Light Crossbow',\r\n        description: 'A light, mechanical device used for firing arrows across large distances.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/light_crossbow.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 80,\r\n        longRange: 230,\r\n        properties: [\r\n            WeaponProperties.Ammunition,\r\n            WeaponProperties.Loading,\r\n            WeaponProperties.TwoHanded\r\n        ],\r\n        itemCost: 25,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Fire\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 8,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Piercing\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Shortbow',\r\n        title: 'Shortbow',\r\n        description: 'A long, curved piece of wood held taut by a length of wire.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/shortbow.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 80,\r\n        longRange: 230,\r\n        properties: [\r\n            WeaponProperties.Ammunition,\r\n            WeaponProperties.TwoHanded\r\n        ],\r\n        itemCost: 25,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Fire\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 6,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Piercing\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Sling',\r\n        title: 'Sling',\r\n        description: 'A small pocket held by two lengths of rope. When spun quickly, it can hurl projectiles at lethal speed.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/sling.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 30,\r\n        longRange: 120,\r\n        properties: [\r\n            WeaponProperties.Ammunition\r\n        ],\r\n        itemCost: 1,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Throw\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 4,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Bludgeoning\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Battleaxe',\r\n        title: 'Battleaxe',\r\n        description: 'A large, double-bladed axe.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/battleaxe.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            WeaponProperties.Versatile\r\n        ],\r\n        itemCost: 1,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Slash (1h)\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 8,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Slashing\r\n                    }\r\n                ],\r\n            \"Slash (2h)\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 10,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Slashing\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Glaive',\r\n        title: 'Glaive',\r\n        description: 'A long polearm with a menacing length of steel at one end.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/glaive.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            WeaponProperties.Heavy,\r\n            WeaponProperties.Reach,\r\n            WeaponProperties.TwoHanded\r\n        ],\r\n        itemCost: 1,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Slash\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 10,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Slashing\r\n                    }\r\n                ]\r\n        }\r\n    },\r\n    {\r\n        key: 'Longsword',\r\n        title: 'Longsword',\r\n        description: 'A long . . . sword.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/longsword.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            WeaponProperties.Versatile\r\n        ],\r\n        itemCost: 15,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Slash (1h)\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 8,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Slashing\r\n                    }\r\n                ],\r\n            \"Slash (2h)\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 10,\r\n                        modifier: 0,\r\n                        damageType: DamageType.Slashing\r\n                    }\r\n                ]\r\n        },\r\n    },\r\n    {\r\n        key: 'BrutalLongsword',\r\n        title: 'Brutal Longsword',\r\n        description: 'A viciously long . . . sword.',\r\n        details: '',\r\n        iconSource: './images/Item_Shop/Items/Weapons/longsword.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        shortRange: 20,\r\n        longRange: 60,\r\n        properties: [\r\n            WeaponProperties.Versatile\r\n        ],\r\n        itemCost: 15,\r\n        type: ItemType.Weapon,\r\n        attacks: {\r\n            \"Slash (1h)\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 8,\r\n                        modifier: 1,\r\n                        damageType: DamageType.Slashing\r\n                    }\r\n                ],\r\n            \"Slash (2h)\":\r\n                [\r\n                    {\r\n                        diceCount: 1,\r\n                        diceSize: 10,\r\n                        modifier: 1,\r\n                        damageType: DamageType.Slashing\r\n                    }\r\n                ]\r\n        },\r\n    },\r\n]\r\n\r\nconst ItemMap_Potions: IItemPotionJson[] =\r\n[\r\n    {\r\n        key: 'SmallHealing',\r\n        title: 'Small Healing Potion',\r\n        description: 'A small healing potion.',\r\n        details: 'Heals 2d4+2 when consumed.',\r\n        iconSource: './images/Item_Shop/Items/Potions/LowHealthPotion.png',\r\n        source: SourceType.Official,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        hasWithdrawalEffect: false,\r\n        itemCost: 50,\r\n        type: ItemType.Potion,\r\n    },\r\n    {\r\n        key: 'SmallMana',\r\n        title: 'Small Mana Potion',\r\n        description: 'A small mana potion.',\r\n        details: 'Restores 1 level 1 spell slot when consumed.',\r\n        iconSource: './images/Item_Shop/Items/Potions/LowManaPotion.png',\r\n        source: SourceType.Homebrew,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        hasWithdrawalEffect: true,\r\n        itemCost: 100,\r\n        type: ItemType.Potion,\r\n    },\r\n    {\r\n        key: 'DarkContract',\r\n        title: 'Potion of the Dark Contract',\r\n        description: 'A dark, bubbling brew.',\r\n        details: 'Light that enters the bottle does not return. On consuming this potion, take 2d4 necrotic damage. Your next attack gains bonus damage equal to twice the necrotic damage that you have taken.',\r\n        iconSource: './images/Item_Shop/Items/Potions/DarkContractPotion.png',\r\n        source: SourceType.Homebrew,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        hasWithdrawalEffect: false,\r\n        itemCost: 100,\r\n        type: ItemType.Potion,\r\n    },\r\n    {\r\n        key: 'TiamatBrew',\r\n        title: \"Tiamat's Brew\",\r\n        description: 'A rainbow of shifting colors lives in this bottle.',\r\n        details: \"On consumption, cast the Dragon's Breath spell on self.\",\r\n        iconSource: './images/Item_Shop/Items/Potions/potion_tiamat.png',\r\n        source: SourceType.Homebrew,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        hasWithdrawalEffect: true,\r\n        itemCost: 100,\r\n        type: ItemType.Potion,\r\n    },\r\n    {\r\n        key: 'PoisonousMiasma',\r\n        title: 'Poisonous Miasma',\r\n        description: 'A swirling, toxic potion. The likeness of a long, green, clay snake is enveloped around the bottle.',\r\n        details: 'When used, causes a weapon to deal an additional 2 poison damage to attacks that deal slashing or piercing damage. The effect lasts 24 hours. Application takes 1 minute, and this item is consumed on use.',\r\n        iconSource: './images/Item_Shop/Items/Potions/poison.png',\r\n        source: SourceType.Homebrew,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        hasWithdrawalEffect: false,\r\n        itemCost: 100,\r\n        type: ItemType.Potion,\r\n    },\r\n    {\r\n        key: 'BurningMiasma',\r\n        title: 'Burning Miasma',\r\n        description: 'A swirling, heated potion. The likeness of a long, red, clay snake is enveloped around the bottle.',\r\n        details: 'When used, causes a weapon to deal an additional 2 fire damage to attacks that deal slashing or piercing damage. The effect lasts 24 hours. Application takes 1 minute, and this item is consumed on use.',\r\n        iconSource: './images/Item_Shop/Items/Potions/poison_burning.png',\r\n        source: SourceType.Homebrew,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        hasWithdrawalEffect: false,\r\n        itemCost: 100,\r\n        type: ItemType.Potion,\r\n    },\r\n    {\r\n        key: 'ElectricMiasma',\r\n        title: 'Electric Miasma',\r\n        description: 'A swirling, shocking potion. The likeness of a long, yellow, clay snake is enveloped around the bottle.',\r\n        details: 'When used, causes a weapon to deal an additional 2 lightning damage to attacks that deal slashing or piercing damage. The effect lasts 24 hours. Application takes 1 minute, and this item is consumed on use.',\r\n        iconSource: './images/Item_Shop/Items/Potions/poison_lightning.png',\r\n        source: SourceType.Homebrew,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        hasWithdrawalEffect: false,\r\n        itemCost: 100,\r\n        type: ItemType.Potion,\r\n    },\r\n    {\r\n        key: 'AngelicPotion',\r\n        title: 'Angelic Potion',\r\n        description: 'A large, winged potion. The bottle is miraculously light.',\r\n        details: 'Bubbles rise endlessly from the bottom of the glass. When consumed, heals 2d4+2 hitpoints and grants the user the ability to fly for the next 18 seconds (3 rounds of combat).',\r\n        iconSource: './images/Item_Shop/Items/Potions/AngelicPotion.png',\r\n        source: SourceType.Homebrew,\r\n        requiresAttunement: false,\r\n        modifications: [],\r\n        hasWithdrawalEffect: true,\r\n        itemCost: 250,\r\n        type: ItemType.Potion,\r\n    },\r\n]\r\n\r\nconst ItemMap_Armor: IItemArmorJson[] = [];\r\n\r\nconst ItemMap_Wondrous: IItemWondrousJson[] =\r\n[\r\n    {\r\n        key: 'FireyRing',\r\n        title: 'Firey Ring',\r\n        description: 'A golden ring with a ruby fastened to its exterior. The ring is warm to the touch.',\r\n        details: 'Grants the bearer access to the Fire Bolt cantrip. If the user has no spellcasting modifier, they may use their Wisdom modifier. Wearing more than one spell-ring at once will cause the user to take 1 level of exhaustion every 10 seconds.',\r\n        iconSource: './images/Item_Shop/Items/Rings/Ring Jewel Red.png',\r\n        source: SourceType.Homebrew,\r\n        requiresAttunement: true,\r\n        modifications: [],\r\n        itemCost: 100,\r\n        type: ItemType.Wondrous,\r\n    },\r\n    {\r\n        key: 'FrigidRing',\r\n        title: 'Frigid Ring',\r\n        description: 'A silver ring with a sapphire fastened to its exterior. The ring is cold to the touch.',\r\n        details: 'Grants the bearer access to the Ray of Frost cantrip. If the user has no spellcasting modifier, they may use their Wisdom modifier. Wearing more than one spell-ring at once will cause the user to take 1 level of exhaustion every 10 seconds.',\r\n        iconSource: './images/Item_Shop/Items/Rings/Ring Silver Jewel Green.png',\r\n        source: SourceType.Homebrew,\r\n        requiresAttunement: true,\r\n        modifications: [],\r\n        itemCost: 100,\r\n        type: ItemType.Wondrous,\r\n    },\r\n    {\r\n        key: 'FloralRing',\r\n        title: 'Ring of Floral Accomodation',\r\n        description: 'A silver ring with the likeness of a pink rose fastened to its exterior.',\r\n        details: 'When touched to any surface, that surface will sprout flowers at a rapid pace for the next 6 seconds.',\r\n        iconSource: './images/Item_Shop/Items/Rings/Ring Floral.png',\r\n        source: SourceType.Homebrew,\r\n        requiresAttunement: true,\r\n        modifications: [],\r\n        itemCost: 50,\r\n        type: ItemType.Wondrous,\r\n    },\r\n]\r\n","import React from 'react';\r\nimport { Attack } from '../Classes/Attack';\r\nimport { DamageType } from '../Enums/DamageType';\r\nimport { StylizedModal } from '../../Utilities/React/StylizedModal';\r\nimport { DTwenty } from './DTwenty';\r\n\r\ntype DamageRoll = {\r\n    damageType: DamageType;\r\n    rolledNumbers: number[];\r\n    modifier: number;\r\n}\r\n\r\nenum RollType {\r\n    Advantage,\r\n    Disadvantage,\r\n    Regular\r\n}\r\n\r\ninterface IAttackRollModalState {\r\n    /**\r\n     * The damage values that have been rolled from using this modal.\r\n     */\r\n    damageRoll: DamageRoll[];\r\n\r\n    /**\r\n     * The current die faces that are shown to the user. This will change rapidly while rolling.\r\n     */\r\n    dieFaces: number[];\r\n\r\n    /**\r\n     * The type of roll that is performed. This will be adv/disadv/etc.\r\n     */\r\n    rollType: RollType;\r\n\r\n    /**\r\n     * If true, the modal is currently rolling die. Prevents some components from rendering.\r\n     */\r\n    isRolling: boolean;\r\n\r\n    /**\r\n     * The final die value. This will be a single number, if one exists.\r\n     */\r\n    finalDieValue: number | undefined;\r\n}\r\n\r\ninterface IAttackRollModalProps {\r\n    /**\r\n     * If true, show this modal.\r\n     */\r\n    show: boolean;\r\n\r\n    /**\r\n     * The name of the attack to display in the title bar.\r\n     */\r\n    attackName: string;\r\n\r\n    /**\r\n     * A series of attack values to compute damage for.\r\n     */\r\n    attacks: Attack[];\r\n\r\n    /**\r\n     * A callback for when the user requests that this modal be closed.\r\n     */\r\n    onHide: () => void;\r\n}\r\n\r\n/**\r\n * A modal containing a dice rolling module. Computes random numbers for the attack as well as for the damage\r\n * of the provided item.\r\n */\r\nexport class AttackRollModal extends React.Component<IAttackRollModalProps, IAttackRollModalState> {\r\n    /**\r\n     * Generating a bunch of random numbers on the fly, in quick succession, is somewhat expensive, so \r\n     * intead use some pre-generated lists of numbers to flash at someone as the dice is being rolled.\r\n     */\r\n    private static readonly randomD20Numbers: number[] = [\r\n        8, 17, 4, 7, 2, 6, 11, 16, 1, 12, 15, 10, 18, 19, 5, 3, 14, 9, 13, 20,\r\n        17, 4, 3, 10, 2, 14, 11, 19, 18, 5, 13, 20, 7, 16, 9, 6, 1, 15, 12, 8,\r\n        12, 4, 6, 18, 15, 17, 19, 13, 14, 8, 7, 3, 9, 2, 16, 10, 1, 5, 20, 11,\r\n        9, 8, 16, 13, 6, 15, 3, 2, 10, 4, 18, 7, 5, 1, 17, 12, 20, 19, 14, 11,\r\n        4, 7, 2, 19, 10, 1, 6, 5, 13, 18, 8, 17, 14, 15, 11, 3, 20, 12, 16, 9,\r\n        20, 5, 19, 9, 12, 16, 4, 10, 2, 17, 8, 15, 6, 7, 11, 1, 13, 3, 18, 14,\r\n        17, 15, 14, 1, 16, 4, 20, 18, 19, 6, 8, 10, 9, 3, 13, 12, 2, 11, 7, 5,\r\n        4, 2, 18, 9, 13, 20, 7, 1, 10, 8, 14, 16, 19, 15, 5, 11, 6, 17, 12, 3,\r\n        6, 8, 14, 18, 7, 17, 20, 15, 11, 5, 2, 16, 3, 19, 12, 4, 10, 9, 13, 1,\r\n        7, 20, 9, 8, 13, 19, 6, 15, 14, 18, 5, 3, 2, 12, 11, 1, 10, 17, 4, 16,\r\n    ]\r\n\r\n    private static readonly dieFrameLength: number = 50;\r\n    private static readonly suspenseLength: number = 600;\r\n\r\n    private static readonly rollDieAudio = new Audio(\"./sounds/rollDie.wav\");\r\n    private static readonly roll20Audio = new Audio(\"./sounds/roll20.wav\");\r\n    private static readonly roll1Audio = new Audio(\"./sounds/roll1.wav\");\r\n    private static readonly rollStopAudio: HTMLAudioElement = new Audio(\"./sounds/rollStop.wav\");\r\n    private static readonly rollResultAudio = new Audio(\"./sounds/rollResult.wav\");\r\n\r\n    /**\r\n     * Creates a new instance of this object.\r\n     * @param props A series of properties to pass to construct this object.\r\n     */\r\n    public constructor(props: IAttackRollModalProps) {\r\n        super(props);\r\n        this.state = {\r\n            damageRoll: [],\r\n            dieFaces: [],\r\n            rollType: RollType.Regular,\r\n            isRolling: false,\r\n            finalDieValue: undefined\r\n        };\r\n\r\n        AttackRollModal.roll1Audio.volume = 0.1;\r\n        AttackRollModal.roll20Audio.volume = 0.25;\r\n        AttackRollModal.rollDieAudio.volume = 0.25;\r\n        AttackRollModal.rollResultAudio.volume = 0.1;\r\n        AttackRollModal.rollStopAudio.volume = 0.1;\r\n    }\r\n\r\n    public render() {\r\n        // SVG Generated with:\r\n        // https://codepen.io/wvr/pen/WrNgJp\r\n\r\n        const rollAdvantage     = () => this.HandleRollDie(2, RollType.Advantage);\r\n        const rollDisadvantage  = () => this.HandleRollDie(2, RollType.Disadvantage);\r\n        const rollRegular       = () => this.HandleRollDie(1, RollType.Regular);\r\n\r\n        return (\r\n            <StylizedModal\r\n                show={this.props.show}\r\n                onHide={this.props.onHide}\r\n                onEnterModal={undefined}\r\n                title={this.props.attackName}\r\n                isLoading={false}>\r\n                <div className=\"roll-window-image\">\r\n                    <img\r\n                        alt=\"Dice Rolling\"\r\n                        src=\"./images/Item_Shop/RollImage.png\"\r\n                    />\r\n                </div>\r\n                <hr className='white-hr' />\r\n                <div className=\"attack-results-container\">\r\n                    <h5>Attack</h5>\r\n                    <div className=\"attack-die-container\">\r\n                        {this.GetDiceDisplay()}\r\n                    </div>\r\n                    <div className=\"attack-die-total\">\r\n                        {this.GetTotalRollTextDisplay()}\r\n                    </div>\r\n                    <div className=\"roll-window-damage\">\r\n                        {this.GetDamageRollDisplay()}\r\n                    </div>\r\n                </div>\r\n                <div className=\"roll-window-buttons\">\r\n                    <button\r\n                        disabled={this.state.isRolling}\r\n                        className=\"roll-window-button negative-button\"\r\n                        onClick={rollDisadvantage.bind(this)}>\r\n                        With Disadvantage\r\n                    </button>\r\n                    <button\r\n                        disabled={this.state.isRolling}\r\n                        className=\"roll-window-button\"\r\n                        onClick={rollRegular.bind(this)}>\r\n                        Regular Roll\r\n                    </button>\r\n                    <button\r\n                        disabled={this.state.isRolling}\r\n                        className=\"roll-window-button positive-button\"\r\n                        onClick={rollAdvantage.bind(this)}>\r\n                        With Advantage\r\n                    </button>\r\n                </div>\r\n            </StylizedModal>\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Gets a random number between 1 and the provided number.\r\n     * @param randomLimit The highest value to roll.\r\n     */\r\n    private GetRandomNumber(randomLimit: number): number {\r\n        return Math.ceil(Math.random() * (randomLimit));\r\n    }\r\n\r\n    /**\r\n     * Get a series of numbers to show for each die. The result will be a series of \r\n     * @param randomIndex The starting point in the random number array to use to represent the random numbers\r\n     * that flash on each die.\r\n     * @param dieIndex The 0-based index for this particular die. For example, if we are rolling two die, the\r\n     * first die's index will be '0', the second, '1'. This is used to stagger dice rolls.\r\n     * @param finalValue The final value to show on the die once it has finished rolling.\r\n     * @returns A series of dice \"frames\". Duplicate frames are added towards the end of the roll sequence to\r\n     * mimic the dice slowing to a halt.\r\n     */\r\n    private PopulateRollNumbers(randomIndex: number, dieIndex: number, finalValue: number): number[] {\r\n        let rollTimer: number[] = [];\r\n\r\n        let standardFastRolls: number = 10;\r\n        let standardMedmRolls: number = 8;\r\n        let standardSlowRolls: number = 2;\r\n        let standardSnailRolls: number = 1;\r\n\r\n        let extraDieRolls: number = 8 * dieIndex;\r\n\r\n        // This is used to offset the initial roll with a 'cascading' effect of rolls.\r\n        randomIndex = this.GetRandomRollSequence(rollTimer, extraDieRolls, 1, randomIndex);\r\n        randomIndex = this.GetRandomRollSequence(rollTimer, standardFastRolls, 1, randomIndex);\r\n        randomIndex = this.GetRandomRollSequence(rollTimer, standardMedmRolls, 2, randomIndex);\r\n        randomIndex = this.GetRandomRollSequence(rollTimer, standardSlowRolls, 6, randomIndex);\r\n        randomIndex = this.GetRandomRollSequence(rollTimer, standardSnailRolls, 10, randomIndex);\r\n\r\n        rollTimer.push(finalValue);\r\n\r\n        return rollTimer;\r\n    }\r\n\r\n    /**\r\n     * Gets a series of random numbers to flash on the screen while each die rolls.\r\n     * @param rollArray The existing list of roll frames. This is added to by this function. Passed by\r\n     * reference.\r\n     * @param numbersToShow A count of how many numbers should be shown while the dice is rolling.\r\n     * @param framesPerNumber The number of frames assocated with each number that is shown on the die.\r\n     * @param randomIndex This is an indexer used to point at a specific value in a list of pre-generated\r\n     * random numbers. This will be adjusted and returned as the result of this function.\r\n     * @returns The adjusted value for randomIndex. Basically, this should be passed in by-reference.\r\n     * However, typescript isn't great at boxing numbers and making those numbers immutable. It's easier to\r\n     * just return the newly adjusted randomIndex.\r\n     */\r\n    private GetRandomRollSequence(rollArray: number[], numbersToShow: number, framesPerNumber: number, randomIndex: number): number {\r\n        let randomNumberCount: number = AttackRollModal.randomD20Numbers.length - 1;\r\n\r\n        for (let i = 0; i < numbersToShow; i++) {\r\n            // Increment that index and ensure it doesn't run off the edge of our array.\r\n            randomIndex++;\r\n            randomIndex %= randomNumberCount;\r\n\r\n            let nextRandomNumber: number = AttackRollModal.randomD20Numbers[randomIndex];\r\n\r\n            for (let frameIndex: number = 0; frameIndex < framesPerNumber; frameIndex++) {\r\n                rollArray.push(nextRandomNumber);\r\n            }\r\n        }\r\n\r\n        return randomIndex;\r\n    }\r\n\r\n    /**\r\n     * Rolls the attack die. This incorporates a visual component, and will roll \"virtual\" dice on screen.\r\n     * @param dieCount The number of dice to roll.\r\n     */\r\n    private RollAttackDice(dieCount: number) {\r\n        let rolls: number[][] = [];\r\n        for (let i: number = 0; i < dieCount; i++) {\r\n            let value: number = this.GetRandomNumber(20);\r\n            let randomNumberIndex: number = this.GetRandomNumber(AttackRollModal.randomD20Numbers.length);\r\n            let rollFrames: number[] = this.PopulateRollNumbers(randomNumberIndex, i, value);\r\n\r\n            rolls.push(rollFrames);\r\n        }\r\n\r\n        let longestDieArray: number = rolls[dieCount - 1].length;\r\n        AttackRollModal.rollDieAudio.play();\r\n\r\n        for (let rollIndex = 0; rollIndex < longestDieArray; rollIndex++) {\r\n            setTimeout(() => {\r\n                let currentRolls: number[] = [];\r\n                for (let dieIndex = 0; dieIndex < rolls.length; dieIndex++) {\r\n                    let indexToGet = Math.min(rollIndex, rolls[dieIndex].length - 1);\r\n\r\n                    if (rollIndex === rolls[dieIndex].length - 1) {\r\n                        AttackRollModal.rollStopAudio.play();\r\n                    }\r\n\r\n                    currentRolls.push(rolls[dieIndex][indexToGet]);\r\n                }\r\n\r\n                this.setState({\r\n                    dieFaces: currentRolls\r\n                });\r\n\r\n                // This looks a little dumb, but it handles the final die roll effectively.\r\n                if (rollIndex === longestDieArray - 1) {\r\n                    this.FinalizeDieRoll();\r\n                }\r\n            }, AttackRollModal.dieFrameLength * rollIndex)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rolls damage dice. This value appears after the attack dice have been rolled.\r\n     */\r\n    private RollDamageDice(): void {\r\n        let rolls: DamageRoll[] = this.props.attacks.map((attack) => {\r\n            let rolledNumbers: number[] = [];\r\n            for (let i = 0; i < attack.diceCount; i++) {\r\n                rolledNumbers.push(this.GetRandomNumber(attack.diceSize));\r\n            }\r\n\r\n            let roll: DamageRoll = {\r\n                damageType: attack.damageType,\r\n                rolledNumbers: rolledNumbers,\r\n                modifier: attack.modifier\r\n            };\r\n\r\n            return roll;\r\n        });\r\n\r\n        this.setState({\r\n            damageRoll: rolls\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles a user request to roll the attack dice.\r\n     * @param dieCount The number of dice to roll.\r\n     * @param rollType If this is a normal roll, with advantage, or with disadvantage.\r\n     */\r\n    private HandleRollDie(dieCount: number, rollType: RollType): void {\r\n        this.setState({\r\n            rollType: rollType,\r\n            isRolling: true,\r\n            finalDieValue: undefined,\r\n            damageRoll: []\r\n        })\r\n        this.RollAttackDice(dieCount);\r\n    }\r\n\r\n    /**\r\n     * Handles some of the stateful logic when our dice have finished rolling.\r\n     */\r\n    private FinalizeDieRoll(): void {\r\n        let diceValues = this.state.dieFaces;\r\n        let finalDie: number | undefined = undefined;\r\n\r\n        switch (this.state.rollType) {\r\n            case RollType.Disadvantage: {\r\n                if (diceValues.length > 0) {\r\n                    finalDie = diceValues.slice(0).sort((a, b) => a - b)[0];\r\n                }\r\n                break;\r\n            }\r\n            case RollType.Advantage: {\r\n                if (diceValues.length > 0) {\r\n                    finalDie = diceValues.slice(0).sort((a, b) => a - b).reverse()[0];\r\n                }\r\n                break;\r\n            }\r\n            case RollType.Regular: {\r\n                if (diceValues.length > 0) {\r\n                    finalDie = diceValues[0];\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (finalDie === 20) {\r\n                AttackRollModal.roll20Audio.play();\r\n            }\r\n            else if (finalDie === 1) {\r\n                AttackRollModal.roll1Audio.play();\r\n            }\r\n            else {\r\n                AttackRollModal.rollResultAudio.play();\r\n            }\r\n\r\n            this.setState({\r\n                finalDieValue: finalDie\r\n            });\r\n        }, AttackRollModal.suspenseLength);\r\n\r\n        setTimeout(() => {\r\n            AttackRollModal.rollStopAudio.play();\r\n            this.RollDamageDice();\r\n            this.setState({\r\n                isRolling: false\r\n            });\r\n        }, AttackRollModal.suspenseLength * 2);\r\n    }\r\n\r\n    /**\r\n     * Gets the final value to display for the last dice roll.\r\n     */\r\n    private GetTotalRollTextDisplay(): JSX.Element {\r\n        let finalDieText: string = \"\";\r\n\r\n        if (this.state.finalDieValue !== undefined) {\r\n            finalDieText = `${this.state.finalDieValue}`;\r\n        }\r\n\r\n        return (\r\n            <span>\r\n                {finalDieText}\r\n            </span>\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Gets the attack dice visual component.\r\n     */\r\n    private GetDiceDisplay(): JSX.Element[] {\r\n        return this.state.dieFaces.map(dieFace => {\r\n            let dieColor: string = \"#891e2b\";\r\n\r\n            return (\r\n                <DTwenty\r\n                    dieFace={dieFace}\r\n                    dieColor={dieColor}\r\n                />\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Gets the damage roll text to display to the user.\r\n     */\r\n    private GetDamageRollDisplay(): JSX.Element[] {\r\n        return this.state.damageRoll.map((roll) => {\r\n            let rollStatement: string = \"\";\r\n\r\n            let isCrit: boolean = this.state.finalDieValue == 20;\r\n            let critModifier: string = isCrit ? \"2x\" : \"\";\r\n\r\n            let diceRollsMessage: string = roll.rolledNumbers.join(\" + \");\r\n            let rollModifierMessage: string = roll.modifier > 0 ? ` + ${roll.modifier}` : '';\r\n            let damageMessage: string = `${roll.damageType} damage`;\r\n\r\n            rollStatement = `${critModifier}${diceRollsMessage}${rollModifierMessage}`;\r\n\r\n            return (\r\n                <div\r\n                    className={`text-color-${roll.damageType.toLowerCase()}`}>\r\n                    {rollStatement} {damageMessage}\r\n                </div>\r\n            );\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\ninterface ILoadingPlaceholderProps {\r\n    showSpinner: boolean;\r\n    role: string;\r\n}\r\n\r\ninterface ILoadingPlaceholderState {\r\n}\r\n\r\nexport class LoadingPlaceholder extends React.Component<ILoadingPlaceholderProps, ILoadingPlaceholderState> {\r\n    public constructor(props: ILoadingPlaceholderProps) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let placeholderSpinner: JSX.Element = (\r\n            <Spinner\r\n                className=\"placeholder-spinner\"\r\n                animation=\"border\"\r\n                role={this.props.role}\r\n            />\r\n        );\r\n\r\n        if (this.props.showSpinner) {\r\n            return placeholderSpinner;\r\n        }\r\n        else {\r\n            return(\r\n                this.props.children\r\n            )\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\n\r\nimport { LoadingPlaceholder } from './LoadingPlaceholder';\r\n\r\ninterface IStylizedModalProps {\r\n    show: boolean;\r\n    onHide: () => void;\r\n    onEnterModal: (() => void) | undefined;\r\n    title: string;\r\n    isLoading: boolean;\r\n}\r\n\r\ninterface IStylizedModalState {\r\n}\r\n\r\nexport class StylizedModal extends React.Component<IStylizedModalProps, IStylizedModalState> {\r\n    public constructor(props: IStylizedModalProps) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <Modal\r\n                show={this.props.show}\r\n                onHide={this.props.onHide}\r\n                centered={true}\r\n                onEntering={this.props.onEnterModal}>\r\n                <Modal.Header>\r\n                    <Modal.Title>\r\n                        {this.props.title}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <LoadingPlaceholder\r\n                        showSpinner={this.props.isLoading}\r\n                        role={`${this.props.title} Loading Status`}>\r\n                        {this.props.children}\r\n                    </LoadingPlaceholder>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <button\r\n                        className=\"negative-button\"\r\n                        onClick={this.props.onHide}>\r\n                        Close\r\n                    </button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n","import '../ItemShop.css';\r\n\r\nimport React from 'react';\r\nimport { IItem } from '../Interfaces/IItem';\r\nimport { IItemJson } from '../Interfaces/IItemJson';\r\nimport { SourceType } from '../Enums/SourceType';\r\nimport { ItemType } from '../Enums/ItemType';\r\nimport { StylizedModal } from '../../Utilities/React/StylizedModal';\r\n\r\ninterface IItemDetailsModalState {\r\n    showAlert: boolean;\r\n}\r\n\r\ninterface IItemDetailsModalProps {\r\n    show: boolean;\r\n    hideModal: () => void;\r\n    itemDetails: IItem;\r\n}\r\n\r\nexport class ItemDetailsModal extends React.Component<IItemDetailsModalProps, IItemDetailsModalState> {\r\n    /**\r\n     * @description Performs an enum-<p> lookup to get something nice and pixelated to represent the source\r\n     * of the item that is being displayed.\r\n     * @param source The source to lookup and return a <p> element that represents it.\r\n     */\r\n    private getSourceText(source: SourceType) {\r\n        switch (source) {\r\n            case \"Official\":\r\n                {\r\n                    return (<p style={{ color: 'rgb(255, 200, 37)' }}>Official</p>);\r\n                }\r\n            case \"Homebrew\":\r\n                {\r\n                    return (<p style={{ color: 'rgb(147, 56, 143)' }}>Homebrew</p>);\r\n                }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Performs an enum-<p> lookup to get something nice and pixelated to represent the type\r\n     * of the item that is being displayed.\r\n     * @param type The item to lookup and return a <p> element that represents it.\r\n     */\r\n    private getTypeDisplay(item: IItemJson) {\r\n        switch (item.type) {\r\n            case ItemType.Weapon:\r\n                {\r\n                    return (<p style={{ color: 'rgb(199, 207, 221)' }}>Weapon</p>);\r\n                }\r\n            case ItemType.Armor:\r\n                {\r\n                    return (<p style={{ color: 'rgb(148, 253, 255)' }}>Armor</p>);\r\n                }\r\n            case ItemType.Potion:\r\n                {\r\n                    return (<p style={{ color: 'rgb(253, 210, 237)' }}>Potion</p>);\r\n                }\r\n            case ItemType.Wondrous:\r\n                {\r\n                    return (<p style={{ color: 'rgb(255, 235, 87)' }}>Wondrous Item</p>);\r\n                }\r\n            default:\r\n                {\r\n                    return (<p style={{ color: 'rgb(255, 235, 87)' }}>Wondrous Item</p>);\r\n                }\r\n        }\r\n    }\r\n\r\n    public constructor(props: IItemDetailsModalProps) {\r\n        super(props);\r\n        this.state = {\r\n            showAlert: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <StylizedModal\r\n                show={this.props.show}\r\n                onHide={this.props.hideModal}\r\n                title={this.props.itemDetails.title}\r\n                isLoading={false}\r\n                onEnterModal={undefined}>\r\n                <div className='item-preview'>\r\n                    <img src={this.props.itemDetails.iconSource} width={128} height={128} alt=\"item preview\" />\r\n                </div>\r\n                <hr className='white-hr' />\r\n                <div className='item-details pixel-font'>\r\n                    <div className='item-tag'>\r\n                        {this.getSourceText(this.props.itemDetails.source)}\r\n                    </div>\r\n                    <div className='item-tag'>\r\n                        {`${this.props.itemDetails.itemCost}x`}\r\n                        <img src='./images/Item_Shop/itemCoin.gif' alt=\"animated coin icon\" />\r\n                    </div>\r\n                    <div className='item-tag'>\r\n                        {this.getTypeDisplay(this.props.itemDetails)}\r\n                    </div>\r\n                </div>\r\n                <hr className='white-hr' />\r\n                {this.props.itemDetails.RenderItemDescription()}\r\n            </StylizedModal>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\ninterface IMoneyAdjustModalProps {\r\n    /**\r\n     * The die face to show on the die currently.\r\n     */\r\n    dieFace: number;\r\n\r\n    /**\r\n     * The color of the die.\r\n     */\r\n    dieColor: string;\r\n}\r\n\r\n/**\r\n * Gets a visual representation of a D20 to show to the user.\r\n * @param props \r\n */\r\nexport function DTwenty (props: IMoneyAdjustModalProps) {\r\n    return (\r\n        <div className=\"attack-die\">\r\n            <div className=\"attack-die-value\">\r\n                {props.dieFace}\r\n            </div>\r\n            <svg\r\n                className=\"roll-window-attack-die\"\r\n                version=\"1.1\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"64\"\r\n                height=\"56\" >\r\n                <path fill={props.dieColor} d=\"M0 27.712812921102035L16 0L48 0L64 27.712812921102035L48 55.42562584220407L16 55.42562584220407Z\"></path>\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\r\n\r\ninterface ICardIconProps {\r\n    iconSource: string;\r\n    tooltipTitle: string;\r\n    tooltipText: string;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport function CardIcon(props: ICardIconProps) {\r\n    return (\r\n        <OverlayTrigger\r\n            placement='top'\r\n            delay={{ show: 0, hide: 400 }}\r\n            overlay={\r\n                <Tooltip id=\"card-tooltip\">\r\n                    <span style={{fontWeight: \"bold\"}}>\r\n                        {props.tooltipTitle}\r\n                    </span>\r\n                    <br />\r\n                    {props.tooltipText}\r\n                </Tooltip>\r\n            }>\r\n            <div className=\"card-icon\">\r\n                <img\r\n                    alt=\"Card Icon\"\r\n                    src={props.iconSource}\r\n                    style={{\r\n                        width: `${props.width}px`,\r\n                        height: `${props.height}px`,\r\n                    }} />\r\n            </div>\r\n        </OverlayTrigger>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Attack } from '../../Classes/Attack';\r\nimport { AttackClick } from '../../Types/CardButtonCallbackTypes/AttackClick';\r\n\r\ninterface IAttackButtonProps {\r\n    cardIconSize: number;\r\n    attackName: string;\r\n    attacks: Attack[];\r\n    callbackFunction: AttackClick;\r\n}\r\n\r\nexport function AttackButton(props: IAttackButtonProps) {\r\n    let attackIndicators: JSX.Element[] = props.attacks.map(roll => {\r\n        let indicators: JSX.Element[] = [];\r\n\r\n        for (let i = 0; i < roll.diceCount; i++) {\r\n            indicators.push(\r\n                <span className={`card-button-stat badge-color-${roll.damageType.toLowerCase()}`}>\r\n                    {roll.diceSize}\r\n                </span>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <span>\r\n                {indicators}{`${roll.modifier > 0 ? `+${roll.modifier}` : ''}`}\r\n            </span>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div\r\n            className=\"card-button\"\r\n            onClick={() => { props.callbackFunction(props.attackName, props.attacks) }}>\r\n            <img\r\n                alt=\"Attack Button\"\r\n                className=\"card-button-icon\"\r\n                src='./images/Item_Shop/ItemCards/Icons/Button_Attack.png'\r\n                width={props.cardIconSize}\r\n                height={props.cardIconSize}\r\n                style={{\r\n                    left: `-${props.cardIconSize / 2}px`\r\n                }} />\r\n            <div className=\"card-button-name\">\r\n                {props.attackName}\r\n            </div>\r\n            <div className=\"card-button-stats-container\">\r\n                {attackIndicators}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { AddClick } from '../../Types/CardButtonCallbackTypes/AddClick';\r\nimport { IItem } from '../../Interfaces/IItem';\r\n\r\ninterface IAddButtonProps {\r\n    item: IItem;\r\n    cardIconSize: number;\r\n    callbackFunction: AddClick;\r\n}\r\n\r\nexport function AddButton(props: IAddButtonProps) {\r\n    return (\r\n        <div\r\n            className=\"card-button\"\r\n            onClick={() => { props.callbackFunction(props.item) }}>\r\n            <img\r\n                alt=\"Add Button\"\r\n                className=\"card-button-icon\"\r\n                src='./images/Item_Shop/ItemCards/Icons/Button_Add.png'\r\n                width={props.cardIconSize}\r\n                height={props.cardIconSize}\r\n                style={{\r\n                    left: `-${props.cardIconSize / 2}px`\r\n                }} />\r\n            <div className=\"card-button-name\">\r\n                Stage Item\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { PurchaseClick } from '../../Types/CardButtonCallbackTypes/PurchaseClick';\r\nimport { IItem } from '../../Interfaces/IItem';\r\n\r\ninterface IPurchaseButtonProps {\r\n    item: IItem;\r\n    cardIconSize: number;\r\n    callbackFunction: PurchaseClick;\r\n}\r\n\r\ninterface IPurchaseButtonState {\r\n    canPurchase: boolean;\r\n}\r\n\r\nexport class PurchaseButton extends React.Component<IPurchaseButtonProps, IPurchaseButtonState> {\r\n    constructor(props: IPurchaseButtonProps) {\r\n        super(props)\r\n        this.state = {\r\n            canPurchase: true\r\n        };\r\n    }\r\n\r\n    private GetCustomButtonProperties(): React.CSSProperties {\r\n        let properties: React.CSSProperties = {};\r\n        if (!this.state.canPurchase) {\r\n            properties = {\r\n                background: \"#33984b\",\r\n                cursor: \"default\"\r\n            }\r\n        }\r\n\r\n        return properties;\r\n    }\r\n\r\n    private GetPurchaseStateText(): string {\r\n        return this.state.canPurchase ? \"Purchase\" : \"Purchased!\";\r\n    }\r\n\r\n    public render() {\r\n        const handleButtonClick = () => {\r\n            if (this.state.canPurchase) {\r\n                this.setState({\r\n                    canPurchase: false\r\n                },\r\n                () => {\r\n                    window.setTimeout(() => {\r\n                        this.setState({\r\n                            canPurchase: true\r\n                        })\r\n                    }, 2500)\r\n                });\r\n                this.props.callbackFunction(this.props.item);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className=\"card-button\"\r\n                style={this.GetCustomButtonProperties()}\r\n                onClick={handleButtonClick}>\r\n                <img\r\n                    alt=\"card purchase button\"\r\n                    className=\"card-button-icon\"\r\n                    src='./images/Item_Shop/ItemCards/Icons/Button_Purchase.png'\r\n                    width={this.props.cardIconSize}\r\n                    height={this.props.cardIconSize}\r\n                    style={{\r\n                        left: `-${this.props.cardIconSize / 2}px`\r\n                    }} />\r\n                <div className=\"card-button-name\" ref=\"purchase-text\">\r\n                    {this.GetPurchaseStateText()}\r\n            </div>\r\n                <div className=\"card-button-stats-container\">\r\n                    <div className=\"card-button-stat\"\r\n                        style={{\r\n                            boxShadow: \"none\"\r\n                        }}>\r\n                        {this.props.item.itemCost}\r\n                    </div>\r\n                    <img\r\n                        alt=\"coin icon\"\r\n                        className=\"card-button-stat-icon\"\r\n                        width={this.props.cardIconSize}\r\n                        height={this.props.cardIconSize}\r\n                        src='./images/Item_Shop/itemCoinStill.png' />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n ","import React from 'react';\r\nimport { RemoveClick } from '../../Types/CardButtonCallbackTypes/RemoveClick';\r\nimport { IItem } from '../../Interfaces/IItem';\r\n\r\ninterface IRemoveButtonProps {\r\n    item: IItem;\r\n    cardIconSize: number;\r\n    callbackFunction: RemoveClick;\r\n}\r\n\r\nexport function RemoveButton(props: IRemoveButtonProps) {\r\n    return (\r\n        <div\r\n            className=\"card-button\"\r\n            onClick={() => { props.callbackFunction(props.item) }}>\r\n            <img\r\n                alt=\"Remove Button\"\r\n                className=\"card-button-icon\"\r\n                src='./images/Item_Shop/ItemCards/Icons/Button_Remove.png'\r\n                width={props.cardIconSize}\r\n                height={props.cardIconSize}\r\n                style={{\r\n                    left: `-${props.cardIconSize / 2}px`\r\n                }} />\r\n            <div className=\"card-button-name\">\r\n                Drop Item\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import '../ItemCard.css';\r\n\r\nimport React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { CardIcon } from './CardIcon';\r\nimport { AttackButton } from './CardButtons/AttackButton';\r\nimport { AddButton } from './CardButtons/AddButton';\r\nimport { PurchaseButton } from './CardButtons/PurchaseButton';\r\nimport { RemoveButton } from './CardButtons/RemoveButton';\r\nimport { IItem } from '../Interfaces/IItem';\r\nimport { ItemClick } from '../Types/ItemClick';\r\nimport { AttackClick } from '../Types/CardButtonCallbackTypes/AttackClick';\r\nimport { PurchaseClick } from '../Types/CardButtonCallbackTypes/PurchaseClick';\r\nimport { RemoveClick } from '../Types/CardButtonCallbackTypes/RemoveClick';\r\nimport { AddClick } from '../Types/CardButtonCallbackTypes/AddClick';\r\nimport { CardInteractions } from '../Enums/CardInteractions';\r\nimport { IItemJson } from '../Interfaces/IItemJson';\r\nimport { IItemIsItemWeapon } from '../Classes/ItemWeapon';\r\nimport { IItemIsItemPotion } from '../Classes/ItemPotion';\r\nimport { ItemType } from '../Enums/ItemType';\r\n\r\ninterface IItemCardProps {\r\n    itemDetails: IItem;\r\n    onItemClick: ItemClick | undefined;\r\n    onAttackButton: AttackClick | undefined;\r\n    onPurchaseButton: PurchaseClick | undefined;\r\n    onRemoveButton: RemoveClick | undefined;\r\n    onAddButton: AddClick | undefined;\r\n    cardInteractions: CardInteractions[];\r\n}\r\n\r\ninterface IItemCardState {\r\n    titleFontSize: number\r\n}\r\n\r\nexport class ItemCard extends React.Component<IItemCardProps, IItemCardState> {\r\n    readonly cardWidth: number = 194;\r\n    readonly cardHeight: number = 256;\r\n    readonly cardDefaultMargin: number = 6;\r\n    \r\n    // DO NOT CHANGE. The card's icon size is 128. This gives us a scaling raito for everything else.\r\n    readonly cardRatio: number = this.cardHeight / 128;\r\n    \r\n    // Item area measurements.\r\n    readonly itemAreaDefaultOffset: number = 17;\r\n    readonly itemAreaDefaultSize: number = 64;\r\n    \r\n    // Title measurements.\r\n    readonly titleDefaultTopOffset: number = 6;\r\n    readonly titleDefaultFontSize: number = 12;\r\n    readonly titleWidth: number = this.cardWidth * 0.65;\r\n    readonly titleDefaultLeftOffset: number = 1;\r\n    \r\n    // Item description measurements.\r\n    readonly descAreaDefaultOffset: number = 82;\r\n    readonly descAreaDefaultSize: number = 44;\r\n\r\n    // Attack Icon measurements.\r\n    readonly attackIconDefaultSize: number = 16;\r\n\r\n    // Icon measurements.\r\n    readonly iconDefaultSize: number = 16;\r\n    readonly iconDefaultLeftOffset: number = 81;\r\n    readonly iconDefaultTopOffset: number = 17;\r\n\r\n    // Coin measurements.\r\n    readonly coinDefaultSize: number = 16;\r\n    readonly coinDefaultLeftOffset: number = 1;\r\n    readonly coinDefaultTopOffset: number = 17;\r\n\r\n    constructor(props: IItemCardProps) {\r\n        super(props);\r\n        this.state = {\r\n            titleFontSize: this.titleDefaultFontSize\r\n        };\r\n    }\r\n\r\n    private GetCardBackSource() {\r\n        let source: string;\r\n        switch (this.props.itemDetails.type) {\r\n            case ItemType.Weapon:\r\n                source = \"./images/Item_Shop/ItemCards/CardForge.png\";\r\n                break;\r\n            case ItemType.Potion:\r\n                source = \"./images/Item_Shop/ItemCards/CardAlchemist.png\";\r\n                break;\r\n            default:\r\n                source = \"./images/Item_Shop/ItemCards/CardDungeon.png\";\r\n                break;\r\n        }\r\n\r\n        return source;\r\n    }\r\n\r\n    /**\r\n     * Gets any additional content that should appear on the card. Includes attack buttons, etc.\r\n     */\r\n    private GetCardButtons(): JSX.Element[] {\r\n        let buttons: JSX.Element[] = [];\r\n        let itemDetails: IItemJson = this.props.itemDetails;\r\n\r\n        if (this.props.cardInteractions.some(interaction => interaction === \"Use\")) {\r\n            // This uses a type guard to enforce that itemDetails must be a specific type.\r\n            // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n            if (IItemIsItemWeapon(itemDetails) && this.props.onAttackButton !== undefined) {\r\n                let attackButtons: JSX.Element[] = Object.entries(itemDetails.attacks).flatMap((attack) => {\r\n                    let name = attack[0];\r\n                    let attacks = attack[1];\r\n\r\n                    return (\r\n                        <AttackButton\r\n                            cardIconSize={this.iconDefaultSize * this.cardRatio}\r\n                            attackName={name}\r\n                            attacks={attacks}\r\n                            callbackFunction={this.props.onAttackButton as AttackClick}\r\n                        />\r\n                    )\r\n                })\r\n\r\n                buttons = buttons.concat(attackButtons);\r\n            }\r\n        }\r\n\r\n        if (this.props.cardInteractions.some(interaction => interaction === \"Purchase\")\r\n         && this.props.onPurchaseButton !== undefined) {\r\n            let purchaseButton: JSX.Element = (\r\n                <PurchaseButton\r\n                    item={this.props.itemDetails}\r\n                    cardIconSize={this.iconDefaultSize * this.cardRatio}\r\n                    callbackFunction={this.props.onPurchaseButton}\r\n                />\r\n            )\r\n\r\n            buttons = buttons.concat(purchaseButton);\r\n        }\r\n\r\n        if (this.props.cardInteractions.some(interaction => interaction === \"Remove\")\r\n         && this.props.onRemoveButton !== undefined) {\r\n             let removeButton: JSX.Element = (\r\n                 <RemoveButton\r\n                    item={this.props.itemDetails}\r\n                    cardIconSize={this.iconDefaultSize * this.cardRatio}\r\n                    callbackFunction={this.props.onRemoveButton}\r\n                 />\r\n             )\r\n\r\n            buttons = buttons.concat(removeButton);\r\n        }\r\n\r\n        if (this.props.cardInteractions.some(interaction => interaction === \"Add\")\r\n         && this.props.onAddButton !== undefined) {\r\n             let addButton: JSX.Element = (\r\n                 <AddButton\r\n                    item={this.props.itemDetails}\r\n                    cardIconSize={this.iconDefaultSize * this.cardRatio}\r\n                    callbackFunction={this.props.onAddButton}\r\n                 />\r\n             )\r\n\r\n            buttons = buttons.concat(addButton);\r\n        }\r\n\r\n\r\n        return buttons;\r\n    }\r\n\r\n    private GetCardIcons(): JSX.Element[] {\r\n        let itemDetails: IItemJson = this.props.itemDetails;\r\n        let icons: JSX.Element[] = [];\r\n        let iconDimensions: number = this.iconDefaultSize * this.cardRatio;\r\n\r\n        if (itemDetails.requiresAttunement) {\r\n            icons.push(CardIcon({\r\n                iconSource: './images/Item_Shop/ItemCards/Icons/Attunement.png',\r\n                tooltipTitle: \"Attunement\",\r\n                tooltipText: 'This item requires attunement.',\r\n                width: (iconDimensions),\r\n                height: (iconDimensions),\r\n            }));\r\n        }\r\n\r\n        if (IItemIsItemPotion(itemDetails) && itemDetails.hasWithdrawalEffect) {\r\n            icons.push(CardIcon({\r\n                iconSource: './images/Item_Shop/ItemCards/Icons/Withdrawal.png',\r\n                tooltipTitle: \"Withdrawal\",\r\n                tooltipText: 'Using this potion will result in a withdrawal effect.',\r\n                width: (iconDimensions),\r\n                height: (iconDimensions),\r\n            }));\r\n        }\r\n        else if (IItemIsItemWeapon(itemDetails)) {\r\n            itemDetails.properties.forEach(property => {\r\n                switch (property) {\r\n                    case \"Ammunition\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Ammunition.png',\r\n                            tooltipTitle: \"Ammunition\",\r\n                            tooltipText: 'This item uses ammunition for ranged attacks.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Finesse\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Finesse.png',\r\n                            tooltipTitle: \"Finesse\",\r\n                            tooltipText: 'This item requires finesse. Attacks and damage with this item may use STR or DEX.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Heavy\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Heavy.png',\r\n                            tooltipTitle: \"Heavy\",\r\n                            tooltipText: 'This item is abnormally heavy. Small creatures will have a difficult time using this item.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Improvised\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Improvised.png',\r\n                            tooltipTitle: \"Improvised\",\r\n                            tooltipText: 'This is an improvised weapon.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Light\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Light.png',\r\n                            tooltipTitle: \"Light\",\r\n                            tooltipText: 'This item is unusually light and may be used with another weapon.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Loading\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Loading.png',\r\n                            tooltipTitle: \"Loading\",\r\n                            tooltipText: 'This item requires manually loading and is limited to one attack per action.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Reach\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Reach.png',\r\n                            tooltipTitle: \"Reach\",\r\n                            tooltipText: 'This item has extended reach.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Silver\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Silver.png',\r\n                            tooltipTitle: \"Silver\",\r\n                            tooltipText: 'This item has been plated in silver.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Special\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Special.png',\r\n                            tooltipTitle: \"Special\",\r\n                            tooltipText: 'This item has some special usage. Refer to the card details for more information.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Thrown\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Thrown.png',\r\n                            tooltipTitle: \"Thrown\",\r\n                            tooltipText: 'This item may be thrown without reducing its damage.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Two-Handed\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/TwoHanded.png',\r\n                            tooltipTitle: \"Two-Handed\",\r\n                            tooltipText: 'This item is unwieldy and requires two hands to utilize.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    case \"Versatile\":\r\n                        icons.push(CardIcon({\r\n                            iconSource: './images/Item_Shop/ItemCards/Icons/Versatile.png',\r\n                            tooltipTitle: \"Versatile\",\r\n                            tooltipText: 'This item is versatile and may be used with one or two hands.',\r\n                            width: (iconDimensions),\r\n                            height: (iconDimensions),\r\n                        }));\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n\r\n        return icons;\r\n    }\r\n\r\n    /**\r\n     * Handles when the component has mounted. This will cause the card to draw.\r\n     */\r\n    componentDidMount() {\r\n        this.LoadCard();\r\n    }\r\n\r\n    /**\r\n     * Loads all of the parts needed to render the card itself.\r\n     */\r\n    private LoadCard(): void {\r\n        let imagesToLoad: HTMLImageElement[] = [];\r\n\r\n        let borderImage = new Image();\r\n        borderImage.src = this.GetCardBackSource();\r\n        imagesToLoad.push(borderImage);\r\n\r\n        let iconImage = new Image();\r\n        iconImage.src = this.props.itemDetails.iconSource;\r\n        imagesToLoad.push(iconImage);\r\n\r\n        let loadedImagesPromises: Promise<void>[] = imagesToLoad.map(image => {\r\n            return new Promise<void>(resolve => {\r\n                image.onload = () => {\r\n                    console.log(`Loaded ${image.src}`)\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n\r\n        Promise.all(loadedImagesPromises)\r\n            .then(resolved => {\r\n                console.log(\"Successfully loaded card images\" + resolved);\r\n                this.DrawTitleText();\r\n            })\r\n            .catch(reason => {\r\n                console.error(\"Failed to load card images\" + reason);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Draws the title text for this card.\r\n     */\r\n    private DrawTitleText() {\r\n        let titleText: string = this.props.itemDetails.title;\r\n        let testDiv: HTMLDivElement = document.createElement(\"div\") as HTMLDivElement;\r\n        testDiv.innerText = titleText;\r\n        \r\n        let cardDiv = this.refs.card as HTMLDivElement;\r\n        testDiv.style.visibility = 'hidden';\r\n        cardDiv.insertAdjacentElement('afterbegin', testDiv);\r\n        let textWidth: number = testDiv.offsetWidth;\r\n        cardDiv.removeChild(testDiv);\r\n\r\n        /*\r\n         * Once we have the width of the text, now we need to determine if the text element needs to be\r\n         * resized or not.\r\n         *\r\n         * We can determine the following:\r\n         * 1:   If the text size is <= the max size of the title element, then do not resize.\r\n         * 2:   If the text size is > the max size of the title element, adjust the text size by some\r\n         *      percentage.\r\n         * \r\n         * We can determine the percentage by asserting the following steps:\r\n         * 1:   Get a percentage that the text width exceeds the max width.\r\n         * 2:   Multiple that percentage by our standard font size.\r\n         */\r\n\r\n        let fontSize: number = this.titleDefaultFontSize;\r\n        let fontRatio: number = this.titleWidth / textWidth;\r\n        let newFontSize: number = Math.min(fontSize, fontRatio * fontSize);\r\n\r\n        this.setState({\r\n            titleFontSize: newFontSize\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Renders an instance of this object.\r\n     */\r\n    render() {\r\n        return (\r\n            <div className=\"card-display\">\r\n                <div\r\n                    className=\"item-card\"\r\n                    ref=\"card\"\r\n                    style={{\r\n                        margin: `${this.cardDefaultMargin * this.cardRatio}px`\r\n                    }}>\r\n                    <Button\r\n                        variant=\"link\"\r\n                        className=\"card-details-button\"\r\n                        onClick={() =>{\r\n                            if (this.props.onItemClick !== undefined) {\r\n                                this.props.onItemClick(this.props.itemDetails)\r\n                            }\r\n                        }}\r\n                        style={{\r\n                            width: `${this.cardWidth}px`,\r\n                            height: `${this.cardHeight}px`\r\n                        }}\r\n                    />\r\n                    <span\r\n                        ref=\"title\"\r\n                        className=\"card-title\"\r\n                        style={{\r\n                            fontSize: `${this.state.titleFontSize}px`,\r\n                            height: `${this.titleDefaultFontSize}px`,\r\n                            top: `${this.titleDefaultTopOffset * this.cardRatio}px`,\r\n                        }}>\r\n                        {this.props.itemDetails.title}\r\n                    </span>\r\n\r\n                    <div\r\n                        className=\"card-icons\"\r\n                        style={{\r\n                            top: `${this.iconDefaultTopOffset * this.cardRatio}px`,\r\n                            left: `${this.iconDefaultLeftOffset * this.cardRatio}px`,\r\n                            maxWidth: `${this.iconDefaultSize * this.cardRatio}px`,\r\n                            height: `${this.iconDefaultSize * this.cardRatio * 4}px`\r\n                        }}>\r\n                        {this.GetCardIcons()}\r\n                    </div>\r\n                    <div\r\n                        className=\"card-info\"\r\n                        style={{\r\n                            top: `${this.descAreaDefaultOffset * this.cardRatio}px`,\r\n                            maxHeight: `${this.descAreaDefaultSize * this.cardRatio}px`,\r\n                            minHeight: `${this.descAreaDefaultSize * this.cardRatio}px`,\r\n                        }}>\r\n                        <div style={{ width: \"100%\" }}>\r\n                            {this.props.itemDetails.description}\r\n                        </div>\r\n                    </div>\r\n                    <img\r\n                        alt=\"card item\"\r\n                        className=\"card-item-image\"\r\n                        src={this.props.itemDetails.iconSource}\r\n                        height={this.itemAreaDefaultSize * this.cardRatio}\r\n                        width={this.itemAreaDefaultSize * this.cardRatio}\r\n                        style={{\r\n                            top: `${this.itemAreaDefaultOffset * this.cardRatio}px`,\r\n                            left: `${this.itemAreaDefaultOffset * this.cardRatio}px`,\r\n                            height: `${this.itemAreaDefaultSize * this.cardRatio}px`,\r\n                            width: `${this.itemAreaDefaultSize * this.cardRatio}px`,\r\n                        }}\r\n                    />\r\n                    <img\r\n                        alt=\"card back\"\r\n                        className=\"card-canvas\"\r\n                        src={this.GetCardBackSource()}\r\n                        width={this.cardWidth}\r\n                        height={this.cardHeight}\r\n                    />\r\n                </div>\r\n                <div className=\"card-actions\">\r\n                    {this.GetCardButtons()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// May add the card cost back later.\r\n\r\n// <div\r\n//     className=\"card-cost\"\r\n//     style={{\r\n//         top: `${this.coinDefaultTopOffset * this.cardRatio}px`,\r\n//         left: `${this.coinDefaultLeftOffset * this.cardRatio}px`,\r\n//     }}>\r\n//     <img\r\n//         style={{\r\n//             width: `${this.coinDefaultSize * this.cardRatio}px`,\r\n//             height: `${this.coinDefaultSize * this.cardRatio}px`,\r\n//         }}\r\n//         src=\"./images/Item_Shop/itemCoinStill.png\"\r\n//     />\r\n// </div>\r\n//     <span\r\n//         className=\"card-cost-text\"\r\n//         style={{\r\n//             top: `${this.coinDefaultTopOffset * this.cardRatio + (this.coinDefaultSize * this.cardRatio * 0.25)}px`,\r\n//             left: `${this.coinDefaultLeftOffset * this.cardRatio}px`,\r\n//             width: `${this.coinDefaultSize * this.cardRatio}px`,\r\n//             height: `${this.coinDefaultSize * this.cardRatio}px`,\r\n//         }}\r\n//     >\r\n//         {this.props.itemDetails.itemCost}\r\n//     </span>","export enum CardInteractions {\r\n    Purchase = \"Purchase\",\r\n    Remove = \"Remove\",\r\n    Add = \"Add\",\r\n    Gather = \"Gather\",\r\n    Use = \"Use\"\r\n}\r\n","import React from 'react';\r\nimport { IItem } from '../../ItemData/Interfaces/IItem';\r\nimport { ItemType } from '../../ItemData/Enums/ItemType';\r\nimport { ItemClick } from '../../ItemData/Types/ItemClick';\r\nimport { AttackClick } from '../../ItemData/Types/CardButtonCallbackTypes/AttackClick';\r\nimport { ItemCard } from '../../ItemData/React/ItemCard';\r\nimport { CardInteractions } from '../../ItemData/Enums/CardInteractions';\r\n\r\ninterface IInventoryTabProps {\r\n    items: IItem[];\r\n    itemType: ItemType;\r\n    itemClick: ItemClick;\r\n    attackClick: AttackClick;\r\n}\r\n\r\ninterface IInventoryTabState {\r\n}\r\n\r\nexport class InventoryTab extends React.Component<IInventoryTabProps, IInventoryTabState> {\r\n    public constructor(props: IInventoryTabProps) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let itemCards: JSX.Element[] = this.props.items.map(i => {\r\n            return (\r\n                <ItemCard\r\n                    itemDetails={i}\r\n                    onItemClick={this.props.itemClick}\r\n                    onAttackButton={this.props.attackClick}\r\n                    onPurchaseButton={undefined}\r\n                    onRemoveButton={undefined}\r\n                    onAddButton={undefined}\r\n                    cardInteractions={[\r\n                        CardInteractions.Use\r\n                    ]}\r\n                />\r\n            )\r\n        });\r\n\r\n        return (\r\n            <div className=\"inventory-tab\">\r\n                {itemCards}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import '../Inventory.css';\r\n\r\nimport React from 'react';\r\nimport { CharacterStateManager } from '../../FirebaseAuth/Classes/CharacterStateManager';\r\nimport { IItem } from '../../ItemData/Interfaces/IItem';\r\nimport { ItemSource } from '../../ItemData/Classes/ItemSource';\r\nimport { ItemDetailsModal } from '../../ItemData/React/ItemDetailsModal';\r\nimport { AttackRollModal } from '../../ItemData/React/AttackRollModal';\r\nimport { ItemWondrous } from '../../ItemData/Classes/ItemWondrous';\r\nimport { Attack } from '../../ItemData/Classes/Attack';\r\nimport { ItemType } from '../../ItemData/Enums/ItemType';\r\nimport { InventoryTab } from './InventoryTab';\r\nimport { Tabs, Tab } from 'react-bootstrap';\r\nimport { CharacterInfoContainer } from '../../CharacterInfo/React/CharacterInfoContainer';\r\n\r\nexport interface IInventoryProps {\r\n}\r\n\r\nexport interface IInventoryState {\r\n    items: IItem[];\r\n    playerCopper: number;\r\n    showItemDetails: boolean;\r\n    focusedItem: IItem;\r\n    showAttackWindow: boolean;\r\n    attackName: string;\r\n    attacks: Attack[];\r\n    activeTab: string;\r\n}\r\n\r\nexport class Inventory extends React.Component<IInventoryProps, IInventoryState> {\r\n    public constructor(props: IInventoryProps) {\r\n        super(props);\r\n        this.state = {\r\n            items: [],\r\n            playerCopper: 0,\r\n            showItemDetails: false,\r\n            focusedItem: new ItemWondrous(),\r\n            showAttackWindow: false,\r\n            attackName: \"\",\r\n            attacks: [],\r\n            activeTab: ItemType.Weapon.toString()\r\n        };\r\n\r\n        this.UpdateItems();\r\n    }\r\n\r\n    private async UpdateItems() {\r\n        let newItems: IItem[] = [];\r\n\r\n        CharacterStateManager.GetInstance().GetCurrentStaticCharacterData().then(char => {\r\n            if (char !== undefined) {\r\n                char.Items.forEach(item => {\r\n                    let foundItem: IItem | undefined = ItemSource.GetItem(item.key, item.type);\r\n\r\n                    if (foundItem !== undefined) {\r\n                        newItems.push(foundItem);\r\n                    }\r\n                });\r\n\r\n                this.setState({\r\n                    items: newItems,\r\n                    playerCopper: char.Copper\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private ShowItemDetails(itemJson: IItem): void {\r\n        this.setState({\r\n            showItemDetails: true,\r\n            focusedItem: itemJson\r\n        })\r\n    }\r\n\r\n    private HideItemDetails() {\r\n        this.setState({\r\n            showItemDetails: false\r\n        })\r\n    }\r\n\r\n    private ShowAttackWindow(attackName: string, attackRolls: Attack[]): void {\r\n        this.setState({\r\n            showAttackWindow: true,\r\n            attackName: attackName,\r\n            attacks: attackRolls\r\n        });\r\n    }\r\n\r\n    private HideAttackWindow(): void {\r\n        this.setState({\r\n            showAttackWindow: false\r\n        });\r\n    }\r\n\r\n    private HandleTabSelection(key: string): void {\r\n        this.setState({\r\n            activeTab: key\r\n        })\r\n    }\r\n\r\n    private GetInventoryTabs(): JSX.Element[] {\r\n        let itemTabs: JSX.Element[] = Object.values(ItemType).map(itemType => {\r\n            let filteredItems: IItem[] = this.state.items.filter(item => item.type === itemType);\r\n\r\n            return (\r\n                <Tab eventKey={itemType.toString()}\r\n                    title={\r\n                        <div>\r\n                            <img className=\"inventory-tab-icon\" src={`./images/Inventory/Tab_${itemType}.png`}/>\r\n                            <span>{`${itemType} (${filteredItems.length})`}</span>\r\n                        </div>\r\n                    }>\r\n                    <InventoryTab\r\n                        items={filteredItems}\r\n                        itemType={itemType}\r\n                        itemClick={this.ShowItemDetails.bind(this)}\r\n                        attackClick={this.ShowAttackWindow.bind(this)}\r\n                    />\r\n                </Tab>\r\n            )\r\n        });\r\n\r\n        return itemTabs;\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"inventory-container\">\r\n                <ItemDetailsModal\r\n                    show={this.state.showItemDetails}\r\n                    hideModal={this.HideItemDetails.bind(this)}\r\n                    itemDetails={this.state.focusedItem}\r\n                />\r\n                <AttackRollModal\r\n                    show={this.state.showAttackWindow}\r\n                    attackName={this.state.attackName}\r\n                    attacks={this.state.attacks}\r\n                    onHide={this.HideAttackWindow.bind(this)}\r\n                />\r\n                <div className='inventory-tabs-container'>\r\n                    <Tabs\r\n                        id=\"Inventory Tabs\"\r\n                        activeKey={this.state.activeTab.toString()}\r\n                        onSelect={this.HandleTabSelection.bind(this)}\r\n                    >\r\n                        {this.GetInventoryTabs()}\r\n                    </Tabs>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { PlayerCharacterData } from '../../FirebaseAuth/Types/PlayerCharacterData';\r\nimport { CharacterImageCanvas } from '../../CharacterImage/React/CharacterImageCanvas';\r\n\r\n/**\r\n * The input properties for this component.\r\n * @param currentCharacterData Data regarding the current character. This may be undefined, meaning that no\r\n * character has been selected.\r\n */\r\nexport interface ICurrentCharacterStatusProps {\r\n    currentCharacterData: PlayerCharacterData | undefined;\r\n}\r\n\r\n/**\r\n * A display to render some information about the current user. For use in the character manager.\r\n * @param props \r\n */\r\nexport function CurrentCharacterStatus(props: ICurrentCharacterStatusProps) {\r\n    let name: string = \"\";\r\n    let images: string[] = [];\r\n    let borderColor: string = \"\";\r\n\r\n    if (props.currentCharacterData !== undefined) {\r\n        name = props.currentCharacterData.Name;\r\n        images = props.currentCharacterData.CharLayout.GetImages();\r\n        borderColor = props.currentCharacterData.BorderColor;\r\n    }\r\n\r\n    return (\r\n        <div className=\"character-status\">\r\n            <div className=\"character-selector-name\">\r\n                <h6>You are currently playing as . . . </h6>\r\n                <h1>{name}</h1>\r\n            </div>\r\n            <CharacterImageCanvas\r\n                charScaleFactor={4}\r\n                showLoadingSpinner={false}\r\n                imagesToRender={images}\r\n                borderColor={borderColor}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { PlayerCharacterData } from '../../FirebaseAuth/Types/PlayerCharacterData';\r\nimport { SelectedCharacterCallback } from '../Types/SelectedCharacterCallback';\r\nimport { CharacterImageCanvas } from '../../CharacterImage/React/CharacterImageCanvas';\r\n\r\n/**\r\n * The input properties for this component.\r\n * @param characterData The character data that is represented by this button.\r\n * @param characterSelectedCallback A callback for a higher component when this button is selected.\r\n */\r\nexport interface ICharacterSelectionButtonProps {\r\n    characterData: PlayerCharacterData;\r\n    characterSelectedCallback: SelectedCharacterCallback;\r\n}\r\n\r\n/**\r\n * A button used to represent a character selection. This is displayed alongside other character selection\r\n * buttons.\r\n * @param props The input properties for this component.\r\n */\r\nexport function CharacterSelectionButton(props: ICharacterSelectionButtonProps) {\r\n    return (\r\n        <div className=\"character-selector-container\">\r\n            <button\r\n                className=\"character-selection-button\"\r\n                onClick={() => props.characterSelectedCallback(props.characterData)}>\r\n                <CharacterImageCanvas\r\n                    charScaleFactor={2}\r\n                    showLoadingSpinner={false}\r\n                    imagesToRender={props.characterData.CharLayout.GetImages()}\r\n                    borderColor={props.characterData.BorderColor}\r\n                    />\r\n            </button>\r\n            <span className=\"character-selection-name\">\r\n                {props.characterData.Name}\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\n/**\r\n * The input properties for this component.\r\n * @param onClick A callback for when this button is clicked.\r\n */\r\nexport interface INewCharacterButtonProps {\r\n    onClick: () => void;\r\n}\r\n\r\n/**\r\n * A button used to allow a user to create a new character. Generally only provides a callback to a higher-\r\n * level component.\r\n * @param props \r\n */\r\nexport function NewCharacterButton(props: INewCharacterButtonProps) {\r\n    return (\r\n        <div className=\"character-selector-container\">\r\n            <button className=\"new-character-button\" onClick={props.onClick}>\r\n                +\r\n            </button>\r\n            <span className=\"character-selection-name\">\r\n                New Character\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { PlayerCharacterData } from '../../FirebaseAuth/Types/PlayerCharacterData';\r\nimport { CharacterSelectionButton } from './CharacterSelectionButton';\r\nimport { SelectedCharacterCallback } from '../Types/SelectedCharacterCallback';\r\nimport { NewCharacterButton } from './NewCharacterButton';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\n/**\r\n * The input properties for this component.\r\n * @param allCharacterData A list of all character data for this user.\r\n * @param characterSelectedCallback A callback for when the character is selected.\r\n * @param newCharacterButtonCallback A callback for when the new character button is selected.\r\n * @param isLoading If true, render this component as though it is loading.\r\n */\r\nexport interface ICharacterSelectorProps {\r\n    allCharacterData: PlayerCharacterData[];\r\n    characterSelectedCallback: SelectedCharacterCallback;\r\n    newCharacterButtonCallback: () => void;\r\n    isLoading: boolean;\r\n}\r\n\r\n/**\r\n * A container for a series of buttons that are used to manage character state, including existing and new\r\n * character buttons.\r\n * @param props The input properties for this component.\r\n */\r\nexport function CharacterSelector(props: ICharacterSelectorProps) {\r\n    let showSpinner: boolean = props.isLoading;\r\n    let showNoCharactersMessage: boolean = props.allCharacterData.length === 0 && !props.isLoading;\r\n\r\n    let characterButtons: JSX.Element[] = props.allCharacterData.map(charData => {\r\n        return (\r\n            <CharacterSelectionButton\r\n                characterSelectedCallback={props.characterSelectedCallback}\r\n                characterData={charData}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"character-selector\">\r\n            <h2>\r\n                Characters:\r\n            </h2>\r\n            <h4 style={{ visibility: showNoCharactersMessage ? 'visible' : 'hidden' }}>\r\n                You don't have any characters yet! You should make one.\r\n            </h4>\r\n            <div className=\"character-selector-buttons\">\r\n                <Spinner\r\n                    animation=\"border\"\r\n                    role=\"character button status\"\r\n                    style={{ visibility: showSpinner ? 'visible' : 'hidden' }}\r\n                />\r\n                {characterButtons}\r\n                <NewCharacterButton\r\n                    onClick={props.newCharacterButtonCallback}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { ChangeEvent, FormEvent } from 'react';\r\nimport { Modal, Spinner } from 'react-bootstrap';\r\nimport { BodyType } from '../../CharacterImage/Enums/BodyType';\r\nimport { PlayerCharacterData } from '../../FirebaseAuth/Types/PlayerCharacterData';\r\nimport { CharImageLayout } from '../../CharacterImage/Classes/CharImageLayout';\r\nimport { PlayerInventoryService } from '../../FirebaseAuth/Classes/PlayerInventoryService';\r\nimport { CharacterImageMap } from '../../CharacterImage/Classes/CharacterImageMap';\r\nimport { StylizedModal } from '../../Utilities/React/StylizedModal';\r\n\r\n/**\r\n * The input properties for this component.\r\n * @param show If true, make this component visible and centered on-screen.\r\n * @param existingCharacterNames A list of existing character names. This is strictly only the names for\r\n * characters that have been created. This is to ensure a duplicate character is not created.\r\n * @param onHideModal A callback for when the user requests that the modal is closed.\r\n * @param onFormSubmission A callback for when the form has been submitted.\r\n */\r\nexport interface INewCharacterFormProps {\r\n    show: boolean;\r\n    existingCharacterNames: string[];\r\n    onHideModal: () => void;\r\n    onFormSubmission: () => void;\r\n}\r\n\r\n/**\r\n * A class used to maintain the state for this component.\r\n * @param isCreating If true, render this component as though it is creating a new character.\r\n * @param inputIsValid If false, prevent form submission and display validation errors.\r\n * @param validationErrors A list of errors regarding character name validation.\r\n */\r\nexport interface INewCharacterFormState {\r\n    isCreating: boolean;\r\n    inputIsValid: boolean;\r\n    validationErrors: string[];\r\n}\r\n\r\n/**\r\n * A form contained within a modal. Used to provide a user with the means to create a new character.\r\n */\r\nexport class NewCharacterForm extends React.Component<INewCharacterFormProps, INewCharacterFormState> {\r\n    private currentNewCharName: string;\r\n    private currentBodyType: BodyType;\r\n\r\n    /**\r\n     * Creates a new instance of this object.\r\n     * @param props The input properties for this component.\r\n     */\r\n    public constructor(props: INewCharacterFormProps) {\r\n        super(props);\r\n\r\n        this.currentNewCharName = \"\";\r\n        this.currentBodyType = BodyType.AverageSizedFeminine;\r\n\r\n        this.state = {\r\n            isCreating: false,\r\n            inputIsValid: false,\r\n            validationErrors: []\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Handles when the user inputs data to the character name field.\r\n     * @param event The event arguments when the name field is changed.\r\n     */\r\n    private handleCharNameInput(event: ChangeEvent<HTMLInputElement>): void {\r\n        let input = event.target?.value;\r\n        if (input) {\r\n            this.currentNewCharName = input;\r\n        }\r\n\r\n        this.validateInput();\r\n    }\r\n\r\n    /**\r\n     * Handles when the user inputs data to the body type field.\r\n     * @param event The event arguments when the body type field is changed.\r\n     */\r\n    private handleBodyTypeChange(event: ChangeEvent<HTMLSelectElement>): void {\r\n        let input = event.target?.value;\r\n        if (input) {\r\n            this.currentBodyType = input as BodyType;\r\n        }\r\n        \r\n        this.validateInput();\r\n    }\r\n\r\n    /**\r\n     * Validates the form's input. Will prevent submission if validation indicates errors.\r\n     */\r\n    private validateInput() {\r\n        let validCharNameRegex: RegExp = /^[A-Z0-9_ -]+$/i;\r\n        let inputValid: boolean = true;\r\n        let validationErrors: string[] = [];\r\n\r\n        if (!this.currentNewCharName.match(validCharNameRegex)) {\r\n            inputValid = false;\r\n            validationErrors.push(\"Character names can only contain alphanumerics, underscores, and hyphens.\")\r\n        }\r\n\r\n        if (this.props.existingCharacterNames.some(existingName => this.currentNewCharName === existingName)) {\r\n            inputValid = false;\r\n            validationErrors.push(`${this.currentNewCharName} already exists!`);\r\n        }\r\n\r\n        this.setState({\r\n            inputIsValid: inputValid,\r\n            validationErrors: validationErrors\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the form's submission event. This creates a new character and informs watchers to proceed with\r\n     * their next events.\r\n     * @param event The event data concerning the submission.\r\n     */\r\n    private handleCreateCharacter(event: FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n        this.setState({\r\n            isCreating: true\r\n        });\r\n\r\n        let charDefaults: CharImageLayout | undefined = CharacterImageMap.DefaultBodyParts.get(this.currentBodyType);\r\n        let startingCharBits: CharImageLayout;\r\n\r\n        if (charDefaults !== undefined) {\r\n            startingCharBits = charDefaults;\r\n        }\r\n        else {\r\n            startingCharBits = new CharImageLayout(new Map(), this.currentBodyType);\r\n        }\r\n\r\n        let newCharData: PlayerCharacterData = new PlayerCharacterData(\r\n            this.currentNewCharName,\r\n            0,\r\n            [],\r\n            startingCharBits,\r\n            \"\"\r\n        );\r\n\r\n        PlayerInventoryService.CreateCharacterData(newCharData).then(() => {\r\n            this.setState({\r\n                isCreating: false\r\n            });\r\n            this.props.onFormSubmission();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Renders the component.\r\n     */\r\n    public render() {\r\n        let formBodyOptions: JSX.Element[] = Object.values(BodyType).map(bt => {\r\n            return (\r\n                <option>\r\n                    {bt.toString()}\r\n                </option>\r\n            )\r\n        });\r\n\r\n        let creatingMessage: boolean = this.state.isCreating;\r\n\r\n        return (\r\n            <StylizedModal\r\n                show={this.props.show}\r\n                onHide={this.props.onHideModal}\r\n                title=\"New Character Deets\"\r\n                isLoading={false}\r\n                onEnterModal={undefined}>\r\n                <div className=\"new-character-form-errors\">\r\n                    {\r\n                        this.state.validationErrors.map(errormessage => (<span>{errormessage}</span>))\r\n                    }\r\n                </div>\r\n                <form className=\"new-character-form\" onSubmit={this.handleCreateCharacter.bind(this)}>\r\n                    <br />\r\n                    <span className=\"new-character-form-title\">\r\n                        Character Name:\r\n                    </span>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"characterName\"\r\n                        className=\"new-character-form-field new-character-form-name\"\r\n                        onChange={this.handleCharNameInput.bind(this)}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n                    <span className=\"new-character-form-title\">\r\n                        Body Type:\r\n                    </span>\r\n                    <select\r\n                        id=\"new character body type\"\r\n                        className=\"new-character-form-field new-character-form-body-type\"\r\n                        onChange={this.handleBodyTypeChange.bind(this)}\r\n                    >\r\n                        {formBodyOptions}\r\n                    </select>\r\n                    <br />\r\n                    <br />\r\n                    <input\r\n                        disabled={!this.state.inputIsValid || this.state.isCreating}\r\n                        className=\"submit-new-character-button\"\r\n                        type=\"submit\"\r\n                        value=\"Create New Character\"\r\n                    />\r\n                </form>\r\n                <div style={{ visibility: creatingMessage ? 'visible' : 'hidden' }}>\r\n                    <Spinner\r\n                        animation=\"border\"\r\n                        role=\"character button status\"\r\n                    />\r\n                    <span>Creating {this.currentNewCharName} . . .</span>\r\n                </div>\r\n            </StylizedModal>\r\n        )\r\n    }\r\n}\r\n","import '../CharacterInfo.css';\r\n\r\nimport React from 'react';\r\nimport { MoneyDisplay } from './MoneyDisplay';\r\nimport { MoneyAdjustModal } from './MoneyAdjustModal';\r\nimport { PlayerCharacterData } from '../../FirebaseAuth/Types/PlayerCharacterData';\r\nimport { CharImageLayout } from '../../CharacterImage/Classes/CharImageLayout';\r\nimport { BodyType } from '../../CharacterImage/Enums/BodyType';\r\nimport { CharacterStateManager } from '../../FirebaseAuth/Classes/CharacterStateManager';\r\nimport { UserDataAuth } from '../../FirebaseAuth/Classes/UserDataAuth';\r\nimport { LoginState } from '../../LoginPage/Enums/LoginState';\r\nimport { LoadingPlaceholder } from '../../Utilities/React/LoadingPlaceholder';\r\n\r\nenum LoadingState {\r\n    Loading,\r\n    Loaded,\r\n    Anonymous,\r\n    NoCharacters\r\n}\r\n\r\ninterface ICharacterInfoContainerProps {\r\n    loginState: LoginState;\r\n}\r\n\r\ninterface ICharacterInfoContainerState {\r\n    charData: PlayerCharacterData;\r\n    showMoneyAdjustModal: boolean;\r\n    showMoneyAdjustModalProcessing: boolean;\r\n    loadingState: LoadingState;\r\n}\r\n\r\nexport class CharacterInfoContainer extends React.Component<ICharacterInfoContainerProps, ICharacterInfoContainerState> {\r\n    public constructor(props: ICharacterInfoContainerProps) {\r\n        let defaultCharData: PlayerCharacterData = new PlayerCharacterData(\r\n            \"\",\r\n            0,\r\n            [],\r\n            new CharImageLayout(new Map(), BodyType.AverageSizedFeminine),\r\n            \"\");\r\n\r\n        super(props);\r\n        this.state = {\r\n            charData: defaultCharData,\r\n            showMoneyAdjustModal: false,\r\n            showMoneyAdjustModalProcessing: false,\r\n            loadingState: LoadingState.Loading\r\n        }\r\n\r\n        CharacterStateManager.GetInstance().AddObserver(this.characterStateManager_NotifyObservers.bind(this))\r\n        this.UpdateCharDisplay();\r\n    }\r\n\r\n    public characterStateManager_NotifyObservers(charData: PlayerCharacterData | undefined): void {\r\n        if (charData !== undefined) {\r\n            this.setState({\r\n                charData: charData\r\n            });\r\n        }\r\n    }\r\n\r\n    public componentDidUpdate(prevProps: ICharacterInfoContainerProps): void {\r\n        if (this.props.loginState !== prevProps.loginState || this.state.loadingState == LoadingState.NoCharacters) {\r\n            // basically, use this to handle login or logout events. otherwise, just load what we have. the auto-login is messing with using only this.\r\n            this.UpdateCharDisplay();\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"character-info-container\">\r\n                {this.GetContextualContent()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private GetContextualContent(): JSX.Element {\r\n        switch(this.state.loadingState) {\r\n            case LoadingState.Loading:      \r\n            case LoadingState.Loaded:       return this.GetLoadedContent();\r\n            case LoadingState.NoCharacters: return this.GetNoCharsContent();\r\n            case LoadingState.Anonymous:    \r\n            default:                        return this.GetAnonContent();\r\n        }\r\n    }\r\n\r\n    private GetLoadedContent(): JSX.Element {\r\n        return (\r\n            <div className=\"character-info-content\">\r\n                <LoadingPlaceholder\r\n                    showSpinner={this.state.loadingState === LoadingState.Loading}\r\n                    role=\"Character info status\">\r\n                    <MoneyAdjustModal\r\n                        show={this.state.showMoneyAdjustModal}\r\n                        hideModal={this.HandleHideMoneyAdjustModal.bind(this)}\r\n                        playerCopper={this.state.charData.Copper}\r\n                        showAsProcessing={this.state.showMoneyAdjustModalProcessing}\r\n                        moneyAdjustCallback={this.HandleCopperAdjustCallback.bind(this)}\r\n                    />\r\n                    <span className=\"character-info-name\">\r\n                        {this.state.charData.Name}\r\n                    </span>\r\n                    <MoneyDisplay\r\n                        playerCopper={this.state.charData.Copper}\r\n                    />\r\n                    <button\r\n                        className=\"character-money-add\"\r\n                        onClick={this.HandleMoneyAdjustButtonClick.bind(this)}>\r\n                        +\r\n                    </button>\r\n                </LoadingPlaceholder>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private GetAnonContent(): JSX.Element {\r\n        return (\r\n            <div>\r\n                Logged Out\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private GetNoCharsContent(): JSX.Element {\r\n        return (\r\n            <div>\r\n                No Characters\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private async UpdateCharDisplay(): Promise<void> {\r\n        let userHasAccess: boolean = await UserDataAuth.GetInstance().CheckForAccess();\r\n        let loadingState: LoadingState = LoadingState.Anonymous;\r\n        let newCharData: PlayerCharacterData = this.state.charData;\r\n\r\n        if (userHasAccess) {\r\n            let staticCharData: PlayerCharacterData | undefined = undefined; \r\n            staticCharData = await CharacterStateManager.GetInstance().GetCurrentStaticCharacterData();\r\n            \r\n            if (staticCharData === undefined) {\r\n                loadingState = LoadingState.NoCharacters;\r\n            }\r\n            if (staticCharData !== undefined) {\r\n                newCharData = staticCharData;    \r\n                loadingState = LoadingState.Loaded;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            loadingState: loadingState,\r\n            charData: newCharData\r\n        });\r\n    }\r\n\r\n    private HandleMoneyAdjustButtonClick(): void {\r\n        this.setState({\r\n            showMoneyAdjustModal: true\r\n        });\r\n    }\r\n\r\n    private HandleHideMoneyAdjustModal(): void {\r\n        this.setState({\r\n            showMoneyAdjustModal: false\r\n        });\r\n    }\r\n\r\n    private HandleCopperAdjustCallback(newCopperTotal: number): void {\r\n        let charData: PlayerCharacterData = this.state.charData;\r\n        charData.Copper = newCopperTotal;\r\n\r\n        this.setState({\r\n            showMoneyAdjustModalProcessing: true\r\n        });\r\n\r\n        CharacterStateManager.GetInstance().UploadCharacterData(charData).then(() => {\r\n            this.setState({\r\n                charData: charData,\r\n                showMoneyAdjustModalProcessing: false,\r\n                showMoneyAdjustModal: false\r\n            });\r\n        });\r\n    }\r\n}\r\n","import '../CharacterManager.css';\r\n\r\nimport React from 'react';\r\nimport { CurrentCharacterStatus } from './CurrentCharacterStatus';\r\nimport { PlayerInventoryService } from '../../FirebaseAuth/Classes/PlayerInventoryService';\r\nimport { PlayerCharacterData } from '../../FirebaseAuth/Types/PlayerCharacterData';\r\nimport { CharacterSelector } from './CharacterSelector';\r\nimport { CharacterStateManager } from '../../FirebaseAuth/Classes/CharacterStateManager';\r\nimport { NewCharacterForm } from './NewCharacterForm';\r\n\r\n/**\r\n * The input properties for this component.\r\n */\r\nexport interface ICharacterManagerProps {\r\n}\r\n\r\n/**\r\n * The state managed by this component.\r\n * @param currentCharacterData The data for the current character. This will be taken from the\r\n * CharacterStateManager class.\r\n * @param allCharactersData The data aggregate for all characters. This will include the currently-selected\r\n * character.\r\n * @param isLoading If true, this component is still loading and hasn't yet finished getting info from the\r\n * database.\r\n * @param showNewCharForm If true, show the new character for for a user to create a new character.\r\n */\r\nexport interface ICharacterManagerState {\r\n    currentCharacterData: PlayerCharacterData | undefined;\r\n    allCharactersData: PlayerCharacterData[];\r\n    isLoading: boolean;\r\n    showNewCharForm: boolean;\r\n}\r\n\r\n/**\r\n * A high-level component used to show all available characters for a user, with the ability for\r\n * the user to switch between characters.\r\n */\r\nexport class CharacterManager extends React.Component<ICharacterManagerProps, ICharacterManagerState> {\r\n    /**\r\n     * Handles a new character button press. Shows the new character form.\r\n     */\r\n    private handleNewCharButtonClick(): void {\r\n        this.setState({\r\n            showNewCharForm: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles when a user chooses to hide the new character form.\r\n     */\r\n    private handleHideModal(): void {\r\n        this.setState({\r\n            showNewCharForm: false\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles when the user selects the 'submit' button for the new character form. Note that\r\n     * this doesn't handle creating the character, this only handles the resulting behavior. This is primarily\r\n     * because we need to prevent the default form submission behavior of the character sheet. Following this,\r\n     * it makes sense to keep the continguous functional behavior in one place, the form logic.\r\n     */\r\n    private handleSubmitNewCharForm(): void {\r\n        this.setState({\r\n            showNewCharForm: false\r\n        });\r\n        this.UpdateCharacterData();\r\n    }\r\n\r\n    /**\r\n     * Creates a new instances of this component.\r\n     * @param props The input parameters for this component.\r\n     */\r\n    public constructor(props: ICharacterManagerProps) {\r\n        super(props);\r\n        this.state = {\r\n            currentCharacterData: undefined,\r\n            allCharactersData: [],\r\n            isLoading: true,\r\n            showNewCharForm: false\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Renders this object in the visual display.\r\n     */\r\n    public render() {\r\n        let allCharacterNames: string[] = this.state.allCharactersData.map(acn => acn.Name);\r\n\r\n        return (\r\n            <div className=\"character-manager\">\r\n                <NewCharacterForm\r\n                    existingCharacterNames={allCharacterNames}\r\n                    show={this.state.showNewCharForm}\r\n                    onHideModal={this.handleHideModal.bind(this)}\r\n                    onFormSubmission={this.handleSubmitNewCharForm.bind(this)}\r\n                />\r\n                <CurrentCharacterStatus\r\n                    currentCharacterData={this.state.currentCharacterData}\r\n                />\r\n                <CharacterSelector\r\n                    newCharacterButtonCallback={this.handleNewCharButtonClick.bind(this)}\r\n                    characterSelectedCallback={this.handleCharacterSelected.bind(this)}\r\n                    allCharacterData={this.state.allCharactersData}\r\n                    isLoading={this.state.isLoading}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Handles when the component has successfully mounted.\r\n     */\r\n    public componentDidMount() {\r\n        this.UpdateCharacterData();\r\n    }\r\n\r\n    /**\r\n     * Handles when a character button is selected.\r\n     * @param charData The character data for the character that was just selected.\r\n     */\r\n    private handleCharacterSelected(charData: PlayerCharacterData): void {\r\n        PlayerInventoryService.SetCurrentCharacter(charData.Name);\r\n        this.UpdateCharacterData();\r\n    }\r\n\r\n    /**\r\n     * Updates the character data visible in this component. Gets information from database to show this\r\n     * user's characters.\r\n     */\r\n    private UpdateCharacterData(): void {\r\n        PlayerInventoryService.FetchAllCharacters().then(characterData => {\r\n            let currentCharacter: PlayerCharacterData | undefined = undefined;\r\n            let characterName: string | null = PlayerInventoryService.GetCurrentCharacterName();\r\n\r\n            if (characterData) {\r\n                currentCharacter = characterData.find(c => c.Name === characterName);\r\n            }\r\n\r\n            this.setState({\r\n                currentCharacterData: currentCharacter,\r\n                allCharactersData: characterData,\r\n                isLoading: false\r\n            });\r\n\r\n            // Modify our existing singleton that tracks our current character selection.\r\n            CharacterStateManager.GetInstance().ChangeStaticCharacterData(currentCharacter);\r\n        });\r\n    }\r\n}\r\n","export class MoneyConverter {\r\n    private _platinum: number = 0;\r\n    private _gold: number = 0;\r\n    private _silver: number = 0;\r\n    private _copper: number = 0;\r\n\r\n    public get Platinum() {\r\n        return this._platinum;\r\n    }\r\n\r\n    public get Gold() {\r\n        return this._gold;\r\n    }\r\n\r\n    public get Silver() {\r\n        return this._silver;\r\n    }\r\n\r\n    public get Copper() {\r\n        return this._copper;\r\n    }\r\n\r\n    public constructor(playerCopper: number) {\r\n        this._platinum  = Math.floor(playerCopper / 1000);\r\n        this._gold      = Math.floor((playerCopper % 1000) / 100);\r\n        this._silver    = Math.floor((playerCopper % 100) / 10);\r\n        this._copper    = playerCopper % 10;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { MoneyConverter } from '../../Inventory/Classes/MoneyConverter';\r\n\r\ninterface IMoneyDisplayProps {\r\n    playerCopper: number;\r\n}\r\n\r\ninterface IMoneyDisplayState {\r\n}\r\n\r\nexport class MoneyDisplay extends React.Component<IMoneyDisplayProps, IMoneyDisplayState> {\r\n    public constructor(props: IMoneyDisplayProps) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        let moneyCount: MoneyConverter = new MoneyConverter(this.props.playerCopper);\r\n\r\n        return (\r\n            <div className=\"character-money-display\">\r\n                <div className=\"money-column\">\r\n                    <img\r\n                        className='money-icon'\r\n                        src='./images/Inventory/Coin_Platinum.png'/>\r\n                    {moneyCount.Platinum}\r\n                </div>\r\n                <div className=\"money-column\">\r\n                    <img\r\n                        className='money-icon'\r\n                        src='./images/Inventory/Coin_Gold.png' />\r\n                    {moneyCount.Gold}\r\n                </div>\r\n                <div className=\"money-column\">\r\n                    <img\r\n                        className='money-icon'\r\n                        src='./images/Inventory/Coin_Silver.png' />\r\n                    {moneyCount.Silver}\r\n                </div>\r\n                <div className=\"money-column\">\r\n                    <img\r\n                        className='money-icon'\r\n                        src='./images/Inventory/Coin_Copper.png' />\r\n                    {moneyCount.Copper}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { ChangeEvent } from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { MoneyDisplay } from './MoneyDisplay';\r\nimport { MoneyAdjustCallback } from '../Types/MoneyAdjustCallback';\r\nimport { StylizedModal } from '../../Utilities/React/StylizedModal';\r\n\r\ninterface IMoneyAdjustModalProps {\r\n    show: boolean;\r\n    hideModal: () => void;\r\n    playerCopper: number;\r\n    moneyAdjustCallback: MoneyAdjustCallback;\r\n    showAsProcessing: boolean;\r\n}\r\n\r\ninterface IMoneyAdjustModalState {\r\n    copperAdjustment: number;\r\n}\r\n\r\nexport class MoneyAdjustModal extends React.Component<IMoneyAdjustModalProps, IMoneyAdjustModalState> {\r\n    public constructor(props: IMoneyAdjustModalProps) {\r\n        super(props);\r\n        this.state = {\r\n            copperAdjustment: 0\r\n        };\r\n    }\r\n\r\n    private HandleCopperSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n        let adjustedCopper: number = this.props.playerCopper + this.state.copperAdjustment;\r\n        this.props.moneyAdjustCallback(adjustedCopper);\r\n\r\n        this.setState({\r\n            copperAdjustment: 0\r\n        });\r\n    }\r\n\r\n    private HandleCopperInput(event: ChangeEvent<HTMLInputElement>) {\r\n        let input = event.target?.value;\r\n\r\n        // https://stackoverflow.com/questions/23437476/in-typescript-how-to-check-if-a-string-is-numeric\r\n        if (input) {\r\n            let inputAsNumber: number = Number(input);\r\n            if (inputAsNumber !== NaN) {\r\n                this.setState({\r\n                    copperAdjustment: inputAsNumber\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let adjustedCopper: number = this.props.playerCopper + this.state.copperAdjustment;\r\n\r\n        return (\r\n            <StylizedModal\r\n                show={this.props.show}\r\n                onHide={this.props.hideModal}\r\n                title=\"Money Adjustment\"\r\n                isLoading={this.props.showAsProcessing}\r\n                onEnterModal={undefined}>\r\n                <div className=\"money-adjustment-container\">\r\n                    <MoneyDisplay\r\n                        playerCopper={adjustedCopper}\r\n                    />\r\n                    <form\r\n                        className=\"money-adjustment-form\"\r\n                        onSubmit={this.HandleCopperSubmit.bind(this)}>\r\n                        <label>Money Changes (in copper, positive or negative)</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            id=\"copperAdjustment\"\r\n                            name=\"copperAdjustment\"\r\n                            min={-this.props.playerCopper}\r\n                            max={this.props.playerCopper}\r\n                            onChange={this.HandleCopperInput.bind(this)} />\r\n                        <input\r\n                            type=\"submit\"\r\n                            value=\"Adjust that money\"\r\n                        />\r\n                    </form>\r\n                </div>\r\n            </StylizedModal>\r\n        );\r\n    }\r\n}\r\n","import '../LandingSpace.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport React from 'react';\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\nimport { LoginPage } from '../../LoginPage/React/LoginPage';\r\nimport { ProtectedRoute } from './ProtectedRoute';\r\nimport { CharacterImage } from '../../CharacterImage/React/CharacterImage';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport { Inventory } from '../../Inventory/React/Inventory';\r\nimport { CharacterManager } from '../../CharacterManager/React/CharacterManager';\r\nimport { CharacterInfoContainer } from '../../CharacterInfo/React/CharacterInfoContainer';\r\nimport { LoginState } from '../../LoginPage/Enums/LoginState';\r\n\r\nexport interface ILandingSpaceProps {\r\n}\r\n\r\nexport interface ILandingSpaceState {\r\n    loginState: LoginState;\r\n}\r\n\r\n// Use the hash router instead of a browser router so that refreshes and direct-links to pages work.\r\n//https://stackoverflow.com/questions/27928372/react-router-urls-dont-work-when-refreshing-or-writing-manually\r\nexport class LandingSpace extends React.Component<ILandingSpaceProps, ILandingSpaceState> {\r\n    public constructor(props: ILandingSpaceProps) {\r\n        super(props);\r\n        this.state = {\r\n            loginState: LoginState.Login\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"landing-space\">\r\n                <div className=\"page-nav\">\r\n                    <Navbar expand=\"lg\" bg=\"dark\">\r\n                        <Navbar.Brand style={{ color: \"white\" }} href=\"/\">LantsPants.com</Navbar.Brand>\r\n                        <Navbar.Toggle aria-controls=\"basic-pagebar-nav\" />\r\n                        <Navbar.Collapse>\r\n                            <Nav defaultActiveKey=\"/\">\r\n                                <Nav.Link\r\n                                    href=\"/#/character_creator\"\r\n                                    eventKey=\"character_creator\"\r\n                                    style={{ color: \"white\" }}>\r\n                                    Character Creator\r\n                            </Nav.Link>\r\n                                <Nav.Link\r\n                                    href=\"/#/inventory\"\r\n                                    eventKey=\"inventory\"\r\n                                    style={{ color: \"white\" }}>\r\n                                    Inventory\r\n                            </Nav.Link>\r\n                                <Nav.Link\r\n                                    href=\"/#/characterManager\"\r\n                                    eventKey=\"characterManager\"\r\n                                    style={{ color: \"white\" }}>\r\n                                    Characters\r\n                            </Nav.Link>\r\n                            </Nav>\r\n                            <CharacterInfoContainer\r\n                                loginState={this.state.loginState}\r\n                            />\r\n                        </Navbar.Collapse>\r\n                    </Navbar>\r\n                </div>\r\n                <div className=\"page-content\">\r\n                    <Router>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" children={<LoginPage onLogin={this.HandleLoginStateChange.bind(this)}/>} />\r\n                            <Route exact path=\"/login\" children={<LoginPage onLogin={this.HandleLoginStateChange.bind(this)}/>} />\r\n                            <Route exact path=\"/character_creator\" children={<CharacterImage />} />\r\n                            <ProtectedRoute path=\"/inventory\" children={<Inventory />} />\r\n                            <ProtectedRoute path=\"/characterManager\" children={<CharacterManager />} />\r\n                        </Switch>\r\n                    </Router>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private HandleLoginStateChange(loginState: LoginState) {\r\n        this.setState({\r\n            loginState: loginState\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { LandingSpace } from './Routing/React/LandingSpace';\r\n\r\nReactDOM.render(<LandingSpace />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}