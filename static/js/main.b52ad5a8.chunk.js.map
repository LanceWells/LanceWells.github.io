{"version":3,"sources":["serviceWorker.ts","BodyMap.tsx","BodySelector.tsx","PartSelector.tsx","enums/SourceTypes.tsx","enums/ItemType.tsx","PartAccordion.tsx","CharacterCanvas.tsx","CharacterCreator.tsx","ShopItem.tsx","BazaarCarpet.tsx","CarpetMap.tsx","ItemShop.tsx","LandingSpace.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","bodyMaps","Array","push","name","description","imageSource","layers","avgMasculineLayers","avgFeminineLayers","avgMasculineReptilianLayers","avgFeminineReptilianLayers","BodySelector","props","Button","className","variant","style","borderColor","boxShadow","width","onClick","bodyMap","src","alt","Carousel","Caption","PartSelector","layerIndex","rounded","SourceTypes","ItemType","PartAccordion","layer","images","map","this","Card","background","text","Accordion","Toggle","as","Header","eventKey","toString","cursor","key","Collapse","Body","renderPartsButtons","Tab","title","Tabs","defaultActiveKey","id","renderPartTabs","React","Component","CharacterCanvas","canvasHeight","canvasWidth","outlineColors","handleOutlineColorChange","color","setState","outlineColor","hex","state","canvas","refs","borderCanvas","display","getContext","imageSmoothingEnabled","prevProps","imagesWidth","imagesHeight","loadedImages","promiseArray","imagesToRender","image","index","imgSrc","height","Promise","resolve","partImg","Image","onload","renderImagesFn","all","then","charCtx","charCanvas","clearRect","forEach","img","drawImage","charImgSrc","toDataURL","borderImg","borderCtx","borderStyle","dArr","i","length","globalCompositeOperation","fillStyle","fillRect","drawImageBorder","ref","backgroundImage","Container","fluid","Row","onChangeComplete","colors","onClickDownload","document","getElementById","CharacterCreator","canvasImages","partLayers","carouselIndex","carouselDirection","downloadUrl","link","createElement","download","href","click","newCanvasImages","newImagesToRender","includes","Item","body","handleBodySelection","direction","canvasImagesToRender","currentBodyMap","Col","lg","interval","indicators","onSelect","handleCarouselSelect","bind","renderBodySelection","downloadImage","layerName","handlePartSelection","ShopItem","OverlayTrigger","placement","delay","show","hide","overlay","Tooltip","itemDetails","onItemClick","animationDelay","floatDelay","iconSource","itemCost","BazaarCarpet","borderImageSource","rugBorderSource","item","CarpetMaps","source","homebrew","type","wondrous","official","weapon","potion","ItemShop","showItemDialog","setModalVisiblity","armor","carpet","damageDesc","test","desc","split","fontWeight","getDescriptionStyle","hideModal","getBazaarCarpets","Modal","size","onHide","centered","Title","getSourceText","getTypeText","getFormattedItemDescription","Footer","Home","to","ReactDOM","render","exact","path","children","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b52ad5a8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import avgFeminineLayers from './json/avg_Feminine.json';\r\nimport avgMasculineLayers from './json/avg_Masculine.json';\r\nimport avgFeminineReptilianLayers from './json/avg_Feminine_Reptilian.json';\r\nimport avgMasculineReptilianLayers from './json/avg_Masculine_Reptilian.json';\r\n\r\n/**\r\n * @description\r\n * The contents of each image \"layer\" that can be overlayed on top of the character image. This contains info\r\n * about what the layer is called (e.g. 'clothing', or 'hats'), what the z-layer info is for the layer, and a\r\n * list of possible image sources that are contained in the image layer.\r\n * @param key The name of the layer.\r\n * @param layerIndex The z-index of the layer. The higher the number, the more 'in front' that the layer is.\r\n * @param images A list of possible image sources that are drawn in this layer. Only one of these can be drawn\r\n * from this list at a time (this is intentional).\r\n */\r\nexport type ImageLayer = {\r\n    key: string;\r\n    layerIndex: number;\r\n    images: ImageDescriptor[];\r\n}\r\n\r\nexport type ImageDescriptor = {\r\n    imageSource: string;\r\n    tags: string[];\r\n}\r\n\r\n/**\r\n * @description\r\n * A mapping from the body that will be displayed to the list of layers associated with that body.\r\n */\r\nexport type BodyMap = {\r\n    name: string;\r\n    description: string;\r\n    imageSource: string;\r\n    layers: ImageLayer[];\r\n}\r\n\r\n/**\r\n * @remarks The layer index for every layer starts at 1. This is because '0' is reserved for the base\r\n * body. Setting this to '0' on a layer will remove the base body.\r\n */\r\nexport var bodyMaps: BodyMap[] = new Array(0);\r\nbodyMaps.push({\r\n    name: 'Average-Sized, Masculine',\r\n    description: \"Masculine body type! Of average size; good for humans, elves, orcs, and tieflings.\",\r\n    imageSource: \"./images/Examples/Avg_Male.png\",\r\n    layers: avgMasculineLayers\r\n}, {\r\n    name: 'Average-Sized, Feminine',\r\n    description: \"Feminine body type! Of average size; good for humans, elves, orcs, and tieflings.\",\r\n    imageSource: \"./images/Examples/Avg_Female.png\",\r\n    layers: avgFeminineLayers\r\n}, {\r\n    name: 'Dragonborn, Masculine',\r\n    description: \"Dragonborn! Cold-blooded and rainbow-colored! These are masculine-bodied dragonborn.\",\r\n    imageSource: \"./images/Examples/Reptilian_Male.png\",\r\n    layers: avgMasculineReptilianLayers\r\n}, {\r\n    name: 'Dragonborn, Feminine',\r\n    description: \"Dragonborn! Cold-blooded and rainbow-colored! These are feminine-bodied dragonborn.\",\r\n    imageSource: \"./images/Examples/Reptilian_Female.png\",\r\n    layers: avgFeminineReptilianLayers\r\n}\r\n);\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { BodyMap } from './BodyMap';\r\nimport { Carousel } from 'react-bootstrap';\r\n\r\ninterface IBodySelector {\r\n    onClick: Function;\r\n    bodyMap: BodyMap;\r\n}\r\n\r\nexport function BodySelector(props: IBodySelector) {\r\n    return (\r\n        <Button\r\n            className='bodySelector'\r\n            variant='dark'\r\n            style={{\r\n                borderColor: 'rgba(255, 255, 255, 0.05)',\r\n                boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n                width: '100%'\r\n            }}\r\n            onClick={() => props.onClick(props.bodyMap)}>\r\n            <img src={props.bodyMap.imageSource} alt='body selection'/>\r\n            <Carousel.Caption>\r\n                <h3 className='body-option-title'>{props.bodyMap.name}</h3>\r\n                <p className='body-option-caption'>{props.bodyMap.description}</p>\r\n            </Carousel.Caption>\r\n        </Button>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\ninterface IPartSelector {\r\n    onClick: Function;\r\n    layerIndex: number;\r\n    imageSource: string;\r\n}\r\n\r\nexport default function PartSelector(props: IPartSelector) {\r\n    return (\r\n        <Button\r\n            className='part-selector-button'\r\n            variant='dark'\r\n            style={{\r\n                borderColor: 'rgba(255, 255, 255, 0.05)',\r\n                boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'\r\n            }}\r\n            onClick={() => props.onClick(props.layerIndex, props.imageSource)}>\r\n            <Image\r\n                className='partSelector'\r\n                src={props.imageSource}\r\n                rounded />\r\n        </Button>\r\n    )\r\n}","export enum SourceTypes {\r\n    official = 'Official',\r\n    homebrew = 'Homebrew'\r\n}","export enum ItemType {\r\n    weapon = 'Weapon',\r\n    armor = 'Armor',\r\n    potion = 'Potion',\r\n    wondrous = 'Wondrous Item',\r\n}\r\n","import React from 'react';\r\nimport { ImageLayer } from './BodyMap';\r\nimport PartSelector from './PartSelector';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport Tabs from 'react-bootstrap/Tabs'\r\n\r\ninterface IPartAccordionProps {\r\n    layers: ImageLayer[];\r\n    onClick: Function;\r\n}\r\n\r\nexport class PartAccordion extends React.Component<IPartAccordionProps> {\r\n    renderPartsButtons(layer: ImageLayer) {\r\n        return layer.images.map((src) => {\r\n            return (\r\n                <PartSelector\r\n                    onClick={this.props.onClick}\r\n                    layerIndex={layer.layerIndex}\r\n                    imageSource={src.imageSource}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    renderPartCards() {\r\n        return this.props.layers.map((layer) => {\r\n            return (\r\n                <Card style={{ background: 'rgba(255, 255, 255, 0.07)' }} text=\"white\">\r\n                    <Accordion.Toggle as={Card.Header} eventKey={layer.layerIndex.toString()}\r\n                        style={{ cursor: \"pointer\" }}>\r\n                        {layer.key}\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey={layer.layerIndex.toString()}>\r\n                        <Card.Body>\r\n                            {this.renderPartsButtons(layer)}\r\n                        </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n            );\r\n        });\r\n    }\r\n\r\n    renderPartTabs() {\r\n        return this.props.layers.map((layer) => {\r\n            return (\r\n                <Tab eventKey={layer.layerIndex.toString()} title={layer.key}>\r\n                    <div className='part-button-tab'>\r\n                        {this.renderPartsButtons(layer)}\r\n                    </div>\r\n                </Tab>\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Tabs defaultActiveKey=\"Body\" id=\"part-accordion-tabs\">\r\n                    {this.renderPartTabs()}\r\n                </Tabs>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// https://blog.cloudboost.io/using-html5-canvas-with-react-ff7d93f5dc76\r\nimport React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Color, ColorResult, CirclePicker } from 'react-color';\r\nimport { Container } from 'react-bootstrap';\r\nimport { Row } from 'react-bootstrap';\r\n\r\n/**\r\n * @description An interface used to describe the elements provided to this class at creation.\r\n */\r\ninterface ICanvasProps {\r\n    /**\r\n     * @description A list of images to render. This may be updated at-will by the parent, and this element\r\n     * will render those new images.\r\n     */\r\n    imagesToRender: Array<string>;\r\n\r\n    /**\r\n     * @description A callback to this class' \"DOWNLOAD\" button. Owned by the parent.\r\n     */\r\n    onClickDownload: Function;\r\n}\r\n\r\n/**\r\n * @description An interface used to describe the elements maintained by this class' internal state.\r\n */\r\ninterface ICanvasState {\r\n    /**\r\n     * @description The color of the outline border for the character's profile. This will be included when\r\n     * saving the image.\r\n     */\r\n    outlineColor: Color;\r\n}\r\n\r\n/**\r\n * @description A class used to display a character's profile on a canvas element. Also provides a border,\r\n * tools to change the color of the border, and a means to download the image itself.\r\n */\r\nexport class CharacterCanvas extends React.Component<ICanvasProps, ICanvasState> {\r\n    /**\r\n     * @description The height of the canvas' used by this object.\r\n     */\r\n    canvasHeight: number = 256;\r\n\r\n    /**\r\n     * @description The width of the canvas' used by this object.\r\n     */\r\n    canvasWidth: number = 256;\r\n\r\n    /**\r\n     * @description A list of all possible outline color that may be used by the canvas.\r\n     */\r\n    outlineColors: string[] = [\"#131313\", \"#ffffff\", \"#571c27\" ];\r\n\r\n    /**\r\n     * @description The constructor for this object.\r\n     * @param props A list of properties provided by the parent object.\r\n     */\r\n    constructor(props: Readonly<ICanvasProps>) {\r\n        super(props);\r\n        this.state = {\r\n            outlineColor: \"#ffffff\"\r\n        };\r\n    }\r\n\r\n    /**\r\n     * A handler for when this component has been fully loaded. Establishes some basic settings about how to\r\n     * handle the image.\r\n     */\r\n    componentDidMount() {\r\n        const canvas = this.refs.canvas as HTMLCanvasElement;\r\n        const borderCanvas = this.refs.borderCanvas as HTMLCanvasElement;\r\n\r\n        canvas.style.display = \"none\";\r\n        \r\n        const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n        ctx.imageSmoothingEnabled = false;\r\n\r\n        const borderCtx = borderCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n        borderCtx.imageSmoothingEnabled = false;\r\n    }\r\n\r\n    /**\r\n     * @description A handler for a change on an outline color.\r\n     */\r\n    handleOutlineColorChange = (color: ColorResult) => {\r\n        this.setState({\r\n            outlineColor: color.hex\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description A handler for when the component itself updates; either the props or the state of this\r\n     * object. Updates the character display.\r\n     * @param prevProps \r\n     */\r\n    componentDidUpdate(prevProps: ICanvasProps)\r\n    {\r\n        const imagesWidth = this.canvasWidth;\r\n        const imagesHeight = this.canvasHeight;\r\n\r\n        // https://stackoverflow.com/questions/34534549/how-do-you-deal-with-html5s-canvas-image-load-asynchrony\r\n        var loadedImages: Array<HTMLImageElement> = new Array<HTMLImageElement>();\r\n\r\n        /**\r\n         * Provides a function to be used when loading each of the images that will be drawn on the character.\r\n         * @param loadedImages A list of loaded images to maintain outside of this function. This needs to be\r\n         * accessible from where the promise list is being run.\r\n         * @param index The index of the array @see loadedImages that the result of the promise will end up\r\n         * in.\r\n         * @param imgSrc The string/html source for the image to be rendered.\r\n         * @param width The width of the image to be rendered.\r\n         * @param height The height of the image to be rendered.\r\n         */\r\n        var renderImagesFn = function(\r\n                loadedImages: Array<HTMLImageElement>,\r\n                index: number,\r\n                imgSrc: string,\r\n                width: number,\r\n                height: number) {\r\n            return new Promise<void>(resolve => {\r\n                var partImg = new Image(width, height);\r\n                \r\n                partImg.onload = function() {\r\n                    loadedImages[index] = partImg;\r\n                    resolve();\r\n                };\r\n\r\n                partImg.src = imgSrc;\r\n            })\r\n        };\r\n\r\n        // Take the list of images that we should render, and ensure that each and every one of them is A:\r\n        // rendered, and B: exists in a separate loadedImages array for us to draw next.\r\n        var promiseArray = this.props.imagesToRender.map(\r\n            (image, index) => renderImagesFn(loadedImages, index, image, this.canvasWidth, this.canvasHeight));\r\n\r\n        // Ensure that all of the promises have been met, then call the giant handleImagesLoaded() function to\r\n        // draw the images and their border.\r\n        Promise.all(promiseArray).then(handleImagesLoaded);\r\n\r\n        const borderColor= this.state.outlineColor as Color;\r\n        const charCanvas = this.refs.canvas as HTMLCanvasElement;\r\n        const borderCanvas = this.refs.borderCanvas as HTMLCanvasElement;\r\n\r\n        /**\r\n         * @description A function used to handle the final images loaded event. Draws each image in-order,\r\n         * and renders a border around the final image.\r\n         */\r\n        function handleImagesLoaded()\r\n        {\r\n            const charCtx = charCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n            charCtx.clearRect(0, 0, charCanvas.width, charCanvas.height);\r\n\r\n            // Draw the images in-order.\r\n            loadedImages.forEach(img => {\r\n                charCtx.drawImage(img, 0, 0, img.width, img.height);\r\n            });\r\n\r\n            /*\r\n             * Get a copy of the first canvas element. The original canvas element is hidden, but we use it\r\n             * to create a finalized version of the character image so that we have something to draw a border\r\n             * around. Otherwise, we're drawing a border around a bunch of tiny elements, which causes a\r\n             * bunch of tiny, overlapping borders.\r\n             */\r\n            var charImgSrc = charCanvas.toDataURL() as string;\r\n            var borderImg = new Image(imagesWidth, imagesHeight);\r\n            borderImg.src = charImgSrc;\r\n            \r\n            /**\r\n             * Handles the border image's onload event. This causes the image in the final canvas element, the\r\n             * canvas that draws the image and its border, to be rendered.\r\n             */\r\n            borderImg.onload = () => {\r\n                const borderCtx = borderCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n                borderCtx.clearRect(0, 0, borderCanvas.width, borderCanvas.height);\r\n                \r\n                drawImageBorder(borderCanvas, borderImg, borderColor.toString());\r\n\r\n                /**\r\n                 * @description Draws a border around an image with the specified elements, using the\r\n                 * specified image.\r\n                 * @param borderCanvas The canvas that will contain the final border and the final image. This\r\n                 * gets the border drawn to it.\r\n                 * @param img The image to use as a framework for the border.\r\n                 * @param borderStyle The styling to apply to the border image, when drawn.\r\n                 * @remarks https://stackoverflow.com/questions/28207232/draw-border-around-nontransparent-part-of-image-on-canvas\r\n                 * Something to note about this algorith; it can only draw borders of a thickness equal to the\r\n                 * smallest outlying pixel. So, our resolution for pixels on this canvas is '4', which means\r\n                 * that the thickness must be 4, or else we end up with weird stamping artifacts.\r\n                 */\r\n                function drawImageBorder(\r\n                    borderCanvas: HTMLCanvasElement,\r\n                    img: HTMLImageElement,\r\n                    borderStyle: string\r\n                    ) {\r\n                    const borderCtx = borderCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n                    /*\r\n                     * An array of integers used to offset and effectively \"stamp\" the image repeatedly. This\r\n                     * entire algorithm just takes the original image, stamps it around the base image 9\r\n                     * times, and then uses the source-in global composite operation to paint what's been\r\n                     * drawn according to the style used.\r\n                     * \r\n                     * Note that the numbers stored here are effectively pairs of coordinates to offset the\r\n                     * image stamping by, scaled by the desired thickness of the border.\r\n                     * https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Compositing\r\n                     */\r\n                    var dArr = [\r\n                        -1, -1,\r\n                         0, -1,\r\n                         1, -1,\r\n                        -1,  0,\r\n                         1,  0,\r\n                        -1,  1,\r\n                         0,  1,\r\n                         1,  1];\r\n\r\n                        // Thickness scale\r\n                        var s: number = 4;\r\n\r\n                        // Iterator.\r\n                        var i: number = 0;\r\n\r\n                    // draw images at offsets from the array scaled by s\r\n                    for (; i < dArr.length; i += 2)\r\n                    {\r\n                        borderCtx.drawImage(img, dArr[i] * s, dArr[i + 1] * s);\r\n                    }\r\n\r\n                    // Fill with color\r\n                    borderCtx.globalCompositeOperation = \"source-in\";\r\n                    borderCtx.fillStyle = borderStyle;\r\n                    borderCtx.fillRect(0, 0, borderCanvas.width, borderCanvas.height);\r\n                }\r\n\r\n                borderCtx.globalCompositeOperation = \"source-over\";\r\n                borderCtx.drawImage(borderImg, 0, 0, borderImg.width, borderImg.height);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Renders this object.\r\n     */\r\n    render() {\r\n        var outlineColor: string = this.state.outlineColor.toString();\r\n\r\n        return (\r\n            <div>\r\n                <canvas id=\"characterCanvas\" ref=\"canvas\" width={this.canvasWidth} height={this.canvasHeight} />\r\n                <canvas style={{ backgroundImage: \"linear-gradient(#131313, #ffffff)\" }} id=\"borderCanvas\" ref=\"borderCanvas\" width={this.canvasWidth} height={this.canvasHeight} />\r\n                <Container fluid={true} className='d-flex justify-content-center'>\r\n                    <Row>\r\n                        <CirclePicker\r\n                            onChangeComplete={this.handleOutlineColorChange}\r\n                            color={outlineColor}\r\n                            colors={this.outlineColors}\r\n                        />\r\n                    </Row>\r\n                </Container>\r\n                <Button\r\n                    variant=\"primary\"\r\n                    className=\"downloadButton\"\r\n                    onClick={() => this.props.onClickDownload(document.getElementById('borderCanvas'))}>\r\n                    <h4>&gt;&gt; DOWNLOAD &lt;&lt;</h4>\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}","import './css/CharacterCreator.css';\r\nimport { bodyMaps, BodyMap, ImageLayer } from './BodyMap';\r\n\r\nimport React from 'react';\r\n\r\nimport {BodySelector} from './BodySelector';\r\nimport {PartAccordion} from './PartAccordion';\r\nimport {CharacterCanvas} from './CharacterCanvas';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Carousel } from 'react-bootstrap';\r\n\r\n/**\r\n * @description\r\n * The interface for props passed to this object. This class in particular takes no props; it is effectively\r\n * the app itself.\r\n */\r\nexport interface ICharacterCreatorProps {\r\n};\r\n\r\n/**\r\n * @description\r\n * The interface for the internal state maintained by this object.\r\n * @param canvasImages The list of image sources, represented as strings, that will be rendered using the\r\n * Canvas class.\r\n * @param partLayers A list of image layers. This contains information about all of the possible layers that\r\n * can be drawn to the currently-selected body type. This contains information about what each layer is, how\r\n * that layer is drawn, and what the possible images are in that layer.\r\n */\r\ninterface ICharacterCreatorState {\r\n    canvasImages: Array<string>,\r\n    partLayers: ImageLayer[],\r\n    carouselIndex: any,\r\n    carouselDirection: \"prev\" | \"next\"\r\n};\r\n\r\n/**\r\n * The main entry point for this application. Provides all of the buttons and fun stuff needed to create a\r\n * character image on a canvas element.\r\n */\r\nexport class CharacterCreator extends React.Component<ICharacterCreatorProps, ICharacterCreatorState> {\r\n    constructor(props: ICharacterCreatorProps) {\r\n        super(props);\r\n        this.state = {\r\n            // Just fill the canvas images with nothing. We'll re-define it when we add to it.\r\n            canvasImages: new Array<string>(),\r\n            partLayers: Array(0),\r\n            carouselIndex: 0,\r\n            carouselDirection: \"next\"\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description\r\n     * Used to download the main character image from the canvas. This is a callback that is passed down to\r\n     * the canvas element.\r\n     * @param canvas The canvas html element from the Canvas character creator class.\r\n     */\r\n    downloadImage(canvas: HTMLCanvasElement)\r\n    {\r\n        const downloadUrl = canvas.toDataURL('image/png');\r\n        const link = document.createElement('a');\r\n\r\n        link.download = 'characterImage.png';\r\n        link.href = downloadUrl;\r\n        link.click();\r\n    }\r\n\r\n    /**\r\n     * A handler for a part selector. Replaces the image at the specified index with a new image.\r\n     * @param layerIndex The index of the layer. This is the z-layer, effectively. The higher the number, the\r\n     * more layers that it draws over.\r\n     * @param imageSource The image source. This is what gets drawn.\r\n     */\r\n    handlePartSelection(layerIndex: number, imageSource: string) {\r\n        const newCanvasImages: Array<string> = this.state.canvasImages;\r\n\r\n        // Javascript doesn't have arrays of fixed length, so this is safe? Still getting used to this.\r\n        newCanvasImages[layerIndex] = imageSource;\r\n\r\n        this.setState({\r\n            canvasImages: newCanvasImages\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Handles the prop-pass from the body-type selector.\r\n     * @param bodyType The type of body that this character creator should acknowledge.\r\n     */\r\n    handleBodySelection(bodyMap: BodyMap) {\r\n        const newImagesToRender: Array<string> = new Array<string>(0);\r\n\r\n        bodyMap.layers.forEach(layer => {\r\n            layer.images.forEach(image => {\r\n                if (image.imageSource.includes('default.png'))\r\n                {\r\n                    newImagesToRender[layer.layerIndex] = image.imageSource;\r\n                }\r\n                // image.tags.forEach(tag => {\r\n                //     if (tag === 'default') {\r\n                //         // Javascript doesn't have arrays of fixed length, so this is safe? Still getting used\r\n                //         // to this.\r\n                //         newImagesToRender[layer.layerIndex] = image.imageSource;\r\n                //     }\r\n                // });\r\n            });\r\n        });\r\n\r\n        this.setState({\r\n            canvasImages: newImagesToRender,\r\n            partLayers: bodyMap.layers\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description\r\n     * Renders a series of body selectors for the user to pick from. These body selectors will modify the list\r\n     * of available accessories (since a tiny hat looks silly on a giant person . . . or does it?). Needs to\r\n     * look at the BodyMap.tsx file to understand what will be populated.\r\n     */\r\n    renderBodySelection() {\r\n        return bodyMaps.map((bodyMap) => {\r\n            return (\r\n                <Carousel.Item>\r\n                    <BodySelector\r\n                        onClick={(body: BodyMap) => this.handleBodySelection(body)}\r\n                        bodyMap={bodyMap}\r\n                    />\r\n                </Carousel.Item>\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description\r\n     * Handles a carousel selection event. Is used to ensure that the carousel cycles left when the left\r\n     * button is pressed; and the same for the right button.\r\n     * @param eventKey The event key. This is the index that the carousel is being cycled to.\r\n     * @param direction The direction that the carousel is being cycled in.\r\n     */\r\n    handleCarouselSelect(eventKey: any, direction: \"prev\" | \"next\") {\r\n        this.setState({\r\n            carouselIndex: eventKey,\r\n            carouselDirection: direction\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Renders this object.\r\n     */\r\n    render() {\r\n        const canvasImagesToRender = this.state.canvasImages;\r\n        const currentBodyMap = this.state.partLayers;\r\n\r\n        return (\r\n            <div className=\"CharacterCreator\">\r\n                <h1>Character Creator</h1>\r\n                <Container fluid={true}>\r\n                    <Row>\r\n                        <Col lg={1} />\r\n                        <Col lg={4}>\r\n                            <div className='body-creation'>\r\n                                <div className='body-selector'>\r\n                                    <h2>Body Selection</h2>\r\n                                    <p className=\"italics\">(Each body type uses different accessories and will reset your character design)</p>\r\n                                    <Carousel\r\n                                        interval={null}\r\n                                        indicators={false}\r\n                                        onSelect={this.handleCarouselSelect.bind(this)}>\r\n                                        {this.renderBodySelection()}\r\n                                    </Carousel>\r\n                                    </div>\r\n                                    <div className='body-canvas'>\r\n                                        <CharacterCanvas\r\n                                            imagesToRender={canvasImagesToRender}\r\n                                            onClickDownload={(canvas: HTMLCanvasElement) => this.downloadImage(canvas)}\r\n                                        />\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                        <Col lg={6}>\r\n                            <div className='acc-selector'>\r\n                                <h2>Accessory Selection</h2>\r\n                                <p className=\"italics\">(You need to select a body first if this is empty)</p>\r\n                                <PartAccordion\r\n                                    layers={currentBodyMap}\r\n                                    onClick={(layerName: number, imageSource: string) => this.handlePartSelection(layerName, imageSource)}\r\n                                />\r\n                            </div>\r\n                        </Col>\r\n                        <Col lg={1} />\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CharacterCreator;\r\n","import React from 'react';\r\nimport {Button, OverlayTrigger, Tooltip} from 'react-bootstrap';\r\nimport {IItemDetails} from './interfaces/IItemDetails';\r\n\r\n/**\r\n * @description A series of properties needed to render this component.\r\n * @param itemDetails The set of item details that are used to represent this item.\r\n * @param floatDelay The amount of time to offset the delay for this item's float animation.\r\n * @param onItemClick The click event-handler when this item is clicked. Will need to pass back the item\r\n * details property.\r\n */\r\ninterface IShopItemProps {\r\n    itemDetails: IItemDetails;\r\n    floatDelay: number;\r\n    onItemClick: Function;\r\n};\r\n\r\n/**\r\n * Returns an instance of this component.\r\n * @param props The properties requried to render this component.\r\n * \r\n * Utilizes this free font:\r\n * https://fonts.google.com/specimen/Press+Start+2P\r\n */\r\nexport function ShopItem(props: IShopItemProps) {\r\n    return (\r\n        <OverlayTrigger\r\n            placement='top'\r\n            delay={{ show: 0, hide: 400 }}\r\n            overlay={\r\n                <Tooltip id='item-tooltip'>\r\n                    {props.itemDetails.title}\r\n                </Tooltip>\r\n            }\r\n            >\r\n            <div className='item-box'>\r\n                <Button variant='link' onClick={() => props.onItemClick(props.itemDetails)}>\r\n                    <div className='item-layer' style={{ animationDelay: `${props.floatDelay}s` }}>\r\n                        <img src={props.itemDetails.iconSource} alt=\"item icon\"/>\r\n                    </div>\r\n                </Button>\r\n                <div className='item-cost'>\r\n                    <div>\r\n                        {props.itemDetails.itemCost}x\r\n                    </div>\r\n                    <div>\r\n                        <img className='item-coin' src='./images/Item_Shop/itemCoinStill.png' alt=\"coin icon\"/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </OverlayTrigger>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {IItemDetails} from './interfaces/IItemDetails';\r\nimport {ShopItem} from './ShopItem';\r\n\r\n/**\r\n * @description An interface used to represent the properties required to display this class.\r\n * @param itemDetails The list of items that will be represented on this carpet.\r\n * @param onItemClick The function that will be called-back to when an item is clicked on.\r\n * @param rugBorderSource The source image location for the rug border.\r\n */\r\ninterface IBazaarCarpetProps {\r\n    itemDetails: Array<IItemDetails>;\r\n    onItemClick: Function;\r\n    rugBorderSource: string;\r\n}\r\n\r\n/**\r\n * @description Gets the shop items as ShopItem elements.\r\n * @param itemDetails The list of item details to represent the items on this carpet.\r\n * @param onItemClick The click event-handler for items.\r\n * @see ShopItem\r\n */\r\nfunction getShopItems(itemDetails: Array<IItemDetails>, onItemClick: Function)\r\n{\r\n    return itemDetails.map((item, index) => {\r\n        return (\r\n            <ShopItem\r\n                itemDetails={item}\r\n                floatDelay={-index}\r\n                onItemClick={onItemClick}\r\n            />\r\n        );\r\n    });\r\n}\r\n\r\n/**\r\n * @description Returns an instance of this component, BazaarCarpet.\r\n * @param props The list of properties needed to render this item.\r\n */\r\nexport function BazaarCarpet(props: IBazaarCarpetProps)\r\n{\r\n    return (\r\n        <div\r\n            className='shop-rug'\r\n            style={{borderImageSource: `${props.rugBorderSource}`}}>\r\n            {getShopItems(props.itemDetails, props.onItemClick)}\r\n        </div>\r\n    );\r\n}\r\n","import { IItemDetails } from \"./interfaces/IItemDetails\";\r\nimport { SourceTypes } from \"./enums/SourceTypes\";\r\nimport { ItemType } from \"./enums/ItemType\";\r\n\r\nexport type CarpetMap = {\r\n    itemDetails: Array<IItemDetails>;\r\n    rugBorderSource: string;\r\n}\r\n\r\n/**********************************************************************************************************\r\n * Rings\r\n *********************************************************************************************************/\r\nconst redRing: IItemDetails = {\r\n    title: 'Firey Ring',\r\n    body: 'A golden ring with a ruby fastened to its exterior. The ring is warm to the touch. Grants the bearer access to the Fire Bolt cantrip. If the user has no spellcasting modifier, they may use their Wisdom modifier. Wearing more than one spell-ring at once will cause the user to take 1 level of exhaustion every 10 seconds.',\r\n    iconSource: './images/Item_Shop/Items/Rings/Ring Jewel Red.png',\r\n    source: SourceTypes.homebrew,\r\n    itemCost: 100,\r\n    type: ItemType.wondrous,\r\n};\r\n\r\nconst greenRing: IItemDetails = {\r\n    title: 'Frigid Ring',\r\n    body: 'A silver ring with a sapphire fastened to its exterior. The ring is cold to the touch. Grants the bearer access to the Ray of Frost cantrip. If the user has no spellcasting modifier, they may use their Wisdom modifier. Wearing more than one spell-ring at once will cause the user to take 1 level of exhaustion every 10 seconds.',\r\n    iconSource: './images/Item_Shop/Items/Rings/Ring Silver Jewel Green.png',\r\n    source: SourceTypes.homebrew,\r\n    itemCost: 100,\r\n    type: ItemType.wondrous,\r\n};\r\n/**********************************************************************************************************\r\n * Weapons\r\n *********************************************************************************************************/\r\nconst weapon_spear: IItemDetails = {\r\n    title: 'Spear',\r\n    body: 'A long, pointed weapon. Attacks with this weapon deal 1d6 piercing damage. [Properties: Thrown (range 20/60), Versatile (1d8)]',\r\n    iconSource: './images/Item_Shop/Items/Weapons/spear.png',\r\n    source: SourceTypes.official,\r\n    itemCost: 1,\r\n    type: ItemType.weapon,\r\n};\r\n\r\nconst weapon_longsword: IItemDetails = {\r\n    title: 'Longsword',\r\n    body: 'A long blade. Attacks with this weapon deal 1d8 slashing damage. [Properties: Versatile (1d10)]',\r\n    iconSource: './images/Item_Shop/Items/Weapons/longsword.png',\r\n    source: SourceTypes.official,\r\n    itemCost: 15,\r\n    type: ItemType.weapon,\r\n};\r\n\r\nconst weapon_shortsword: IItemDetails = {\r\n    title: 'Shortsword',\r\n    body: 'A short, pointed weapon. Attacks with this weapon deal 1d6 piercing damage. [Properties: Finesse, Light]',\r\n    iconSource: './images/Item_Shop/Items/Weapons/shortsword.png',\r\n    source: SourceTypes.official,\r\n    itemCost: 10,\r\n    type: ItemType.weapon,\r\n};\r\n\r\nconst weapon_snake_staff: IItemDetails = {\r\n    title: 'Snake Staff',\r\n    body: 'A long oaken staff. The staff is wrapped by the likeness of a clay snake. Attacks with this weapon deal 1d4 bludgeoning damage and 1d4 poison damage.',\r\n    iconSource: './images/Item_Shop/Items/Weapons/Cleric Staff Snake Green.png',\r\n    source: SourceTypes.homebrew,\r\n    itemCost: 100,\r\n    type: ItemType.weapon,\r\n};\r\n\r\nconst potion_healing_low: IItemDetails = {\r\n    title: 'Small Healing Potion',\r\n    body: 'A small healing potion. Heals 2d4+2 when consumed.',\r\n    iconSource: './images/Item_Shop/Items/Potions/LowHealthPotion.png',\r\n    source: SourceTypes.official,\r\n    itemCost: 50,\r\n    type: ItemType.potion,\r\n};\r\n\r\nconst potion_mana_low: IItemDetails = {\r\n    title: 'Small Mana Potion',\r\n    body: 'A small mana potion. Restores 1 level 1 spell slot when consumed. Use of this potion will result in a withdrawal effect.',\r\n    iconSource: './images/Item_Shop/Items/Potions/LowManaPotion.png',\r\n    source: SourceTypes.homebrew,\r\n    itemCost: 100,\r\n    type: ItemType.potion,\r\n};\r\n\r\nconst potion_angelic: IItemDetails = {\r\n    title: 'Angelic Potion',\r\n    body: 'A large, winged potion. The bottle is miraculously light. Bubbles rise endlessly from the bottom of the glass. When consumed, heals 4d4+6 hitpoints and grants the user the ability to fly for the next 18 seconds (3 rounds of combat). Use of this potion will result in a withdrawal effect.',\r\n    iconSource: './images/Item_Shop/Items/Potions/AngelicPotion.png',\r\n    source: SourceTypes.homebrew,\r\n    itemCost: 250,\r\n    type: ItemType.potion,\r\n};\r\n\r\nexport const CarpetMaps: CarpetMap[] = [\r\n    {\r\n        rugBorderSource: \"url(/images/Item_Shop/Items/Rugs/greenrug.png)\",\r\n        itemDetails: [redRing, greenRing]\r\n    },\r\n    {\r\n        rugBorderSource: \"url(/images/Item_Shop/Items/Rugs/redrug.png)\",\r\n        itemDetails: [weapon_spear, weapon_longsword, weapon_shortsword, weapon_snake_staff]\r\n    },\r\n    {\r\n        rugBorderSource: \"url(/images/Item_Shop/Items/Rugs/bluerug.png)\",\r\n        itemDetails: [potion_healing_low, potion_mana_low, potion_angelic]\r\n    },\r\n];\r\n","import './css/ItemShop.css';\r\nimport React from 'react';\r\n\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport { SourceTypes } from './enums/SourceTypes';\r\nimport { IItemDetails } from './interfaces/IItemDetails';\r\nimport { ItemType } from './enums/ItemType';\r\nimport { BazaarCarpet } from './BazaarCarpet';\r\nimport { CarpetMaps } from './CarpetMap';\r\n\r\n/**\r\n * @description\r\n * Describes the properties that are passed into this class.\r\n */\r\ninterface IItemShopProps {\r\n};\r\n\r\n/**\r\n * @description Describes the state that is maintained by this object.\r\n * @param showItemDialog A boolean value to describe whether the item dialog (modal) is displayed at any\r\n * given point.\r\n * @param itemDetails A set of details that describe the currently selected item. This is used to populate\r\n * the modal that appears.\r\n */\r\ninterface IItemShopState {\r\n    showItemDialog: boolean;\r\n    itemDetails: IItemDetails;\r\n};\r\n\r\n/**\r\n * @description\r\n * Represents an item shop! This is a full-screen application that is used to 'browse' some digital items.\r\n */\r\nexport class ItemShop extends React.Component<IItemShopProps, IItemShopState> {\r\n    /**\r\n     * @description Creates a new instance of @see ItemShop .\r\n     * @param props The properties required to instantiate this class.\r\n     */\r\n    constructor (props: IItemShopProps) {\r\n        super(props);\r\n        this.state = {\r\n            showItemDialog: false,\r\n            itemDetails: {\r\n                title: '',\r\n                body: '',\r\n                iconSource: '',\r\n                itemCost: 0,\r\n                source: SourceTypes.homebrew,\r\n                type: ItemType.wondrous,\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description\r\n     * Shows or hides the item details modal.\r\n     * @param show If true, show the modal; otherwise false.\r\n     */\r\n    setModalVisiblity(show: boolean)\r\n    {\r\n        this.setState({\r\n            showItemDialog: show\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Handles an item click event.\r\n     * @param item The item details that are provided as a result of the click event (this is a set of\r\n     * properties that represent the item that was clicked).\r\n     */\r\n    onItemClick(item: IItemDetails)\r\n    {\r\n        this.setState({\r\n            itemDetails: item,\r\n        });\r\n\r\n        // this.getFormattedItemDescription(item.body);\r\n        \r\n        this.setModalVisiblity(true);\r\n    }\r\n\r\n    /**\r\n     * @description Performs an enum-<p> lookup to get something nice and pixelated to represent the source\r\n     * of the item that is being displayed.\r\n     * @param source The source to lookup and return a <p> element that represents it.\r\n     */\r\n    getSourceText(source: SourceTypes)\r\n    {\r\n        switch(source)\r\n        {\r\n            case SourceTypes.official:\r\n            {\r\n                return (<p style={{color: 'rgb(255, 200, 37)'}}>Official</p>);\r\n            }\r\n            case SourceTypes.homebrew:\r\n            {\r\n                return (<p style={{color: 'rgb(147, 56, 143)'}}>Homebrew</p>);\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Performs an enum-<p> lookup to get something nice and pixelated to represent the type\r\n     * of the item that is being displayed.\r\n     * @param type The type to lookup and return a <p> element that represents it.\r\n     */\r\n    getTypeText(type: ItemType) {\r\n        switch (type) {\r\n            case ItemType.weapon:\r\n            {\r\n                return (<p style={{ color: 'rgb(199, 207, 221)' }}>Weapon</p>);\r\n            }\r\n            case ItemType.armor:\r\n            {\r\n                return (<p style={{ color: 'rgb(148, 253, 255)' }}>Armor</p>);\r\n            }\r\n            case ItemType.potion:\r\n            {\r\n                return (<p style={{ color: 'rgb(253, 210, 237)' }}>Potion</p>);\r\n            }\r\n            case ItemType.wondrous:\r\n            {\r\n                return (<p style={{ color: 'rgb(255, 235, 87)' }}>Wondrous Item</p>);\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Gets a list of bazaar carpets for display.\r\n     * @param onItemClick The click event-handler for item clicks.\r\n     */\r\n    getBazaarCarpets(onItemClick: Function) {\r\n        return CarpetMaps.map((carpet) => {\r\n            return (\r\n                <BazaarCarpet\r\n                    rugBorderSource={carpet.rugBorderSource}\r\n                    itemDetails={carpet.itemDetails}\r\n                    onItemClick={onItemClick}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Gets the color association for a given damage type.\r\n     * @param damageDesc The snippet from the description associated with the damage type.\r\n     */\r\n    getDamageColor(damageDesc: string) : string\r\n    {\r\n        if (/acid/.test(damageDesc)) {\r\n            return 'rgb(153, 230, 95)';\r\n        }\r\n        if (/bludgeoning/.test(damageDesc)) {\r\n            return 'rgb(137, 30, 43)';\r\n        }\r\n        if (/cold/.test(damageDesc)) {\r\n            return 'rgb(12, 241, 255)';\r\n        }\r\n        if (/fire/.test(damageDesc)) {\r\n            return 'rgb(237, 118, 20)';\r\n        }\r\n        if (/force/.test(damageDesc)) {\r\n            return 'rgb(3, 25, 63)';\r\n        }\r\n        if (/lightning/.test(damageDesc)) {\r\n            return 'rgb(255, 200, 37)';\r\n        }\r\n        if (/necrotic/.test(damageDesc)) {\r\n            return 'rgb(66, 76, 110)';\r\n        }\r\n        if (/piercing/.test(damageDesc)) {\r\n            return 'rgb(234, 50, 60)';\r\n        }\r\n        if (/poison/.test(damageDesc)) {\r\n            return 'rgb(30, 111, 80)';\r\n        }\r\n        if (/psychic/.test(damageDesc)) {\r\n            return 'rgb(246, 129, 135)';\r\n        }\r\n        if (/radiant/.test(damageDesc)) {\r\n            return 'rgb(255, 235, 87)';\r\n        }\r\n        if (/slashing/.test(damageDesc)) {\r\n            return 'rgb(101, 115, 146)';\r\n        }\r\n        if (/thunder/.test(damageDesc)) {\r\n            return 'rgb(249, 230, 207)';\r\n        }\r\n\r\n        return 'rgb(255, 255, 255)';\r\n    }\r\n\r\n    /**\r\n     * @description Gets the color association for a given damage type.\r\n     * @param damageDesc The snippet from the description associated with the damage type.\r\n     */\r\n    getDescriptionStyle(desc: string): string {\r\n        if (/withdrawal effect/.test(desc)) {\r\n            return 'text-color-withdrawal';\r\n        }\r\n        if (/acid/.test(desc)) {\r\n            return 'text-color-acid';\r\n        }\r\n        if (/bludgeoning/.test(desc)) {\r\n            return 'text-color-bludgeoning';\r\n        }\r\n        if (/cold/.test(desc)) {\r\n            return 'text-color-cold';\r\n        }\r\n        if (/fire/.test(desc)) {\r\n            return 'text-color-fire';\r\n        }\r\n        if (/force/.test(desc)) {\r\n            return 'text-color-force';\r\n        }\r\n        if (/lightning/.test(desc)) {\r\n            return 'text-color-lightning';\r\n        }\r\n        if (/necrotic/.test(desc)) {\r\n            return 'text-color-necrotic';\r\n        }\r\n        if (/piercing/.test(desc)) {\r\n            return 'text-color-piercing';\r\n        }\r\n        if (/poison/.test(desc)) {\r\n            return 'text-color-poison';\r\n        }\r\n        if (/psychic/.test(desc)) {\r\n            return 'text-color-psychic';\r\n        }\r\n        if (/radiant/.test(desc)) {\r\n            return 'text-color-radiant';\r\n        }\r\n        if (/slashing/.test(desc)) {\r\n            return 'text-color-slashing';\r\n        }\r\n        if (/thunder/.test(desc)) {\r\n            return 'text-color-thunder';\r\n        }\r\n\r\n        // Not sure what it was, but don't return nothing.\r\n        return 'text-color-plain';\r\n    }\r\n\r\n    /**\r\n     * @description Gets the description for an item as a set of elements.\r\n     * @param description The description that will be represented as a series of elements.\r\n     */\r\n    getFormattedItemDescription(description: string)\r\n    {\r\n        // https://regex101.com/r/PneEIz/4\r\n        // https://github.com/facebook/react/issues/3386\r\n        var splitDesc: string[];\r\n        splitDesc = description.split(/(\\b\\d+d\\d+\\s(?:acid|bludgeoning|cold|fire|force|lightning|necrotic|piercing|poison|psychic|radiant|slashing|thunder)\\b|(?:\\bwithdrawal effect\\b))/gi);\r\n\r\n        return (splitDesc.map((desc, index) =>{\r\n            if (index % 2 === 0)\r\n            {\r\n                return <span>{desc}</span>\r\n            }\r\n            else\r\n            {\r\n                return(\r\n                    <span\r\n                        style={{ fontWeight: 'bolder' }}\r\n                        className={this.getDescriptionStyle(desc)}>\r\n                        {desc}\r\n                    </span>\r\n                );\r\n            }\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * @description Renders an instance of this class.\r\n     */\r\n    render()\r\n    {\r\n        /* Keep these as consts because if we were to use a function callback when closing the Modal,\r\n         * that would result in an exception (because we're then in a state that doesn't recognize)\r\n         * ItemShop as 'this'. */\r\n        const hideModal = () => this.setModalVisiblity(false);\r\n        const handleItemClick = (itemDetails: IItemDetails) => this.onItemClick(itemDetails);\r\n\r\n        return (\r\n            <div className=\"ItemShop\">\r\n                <h1>Item Shop</h1>\r\n                <div className='shopkeeper-area'>\r\n                    <img src='./images/Item_Shop/brazier-lit.gif' alt=\"animated left brazier\" />\r\n                    <img src='./images/Item_Shop/shopkeeper.gif' alt=\"shopkeeper\"/>\r\n                    <img src='./images/Item_Shop/brazier-lit.gif' alt=\"animated left brazier\" />\r\n                </div>\r\n                <div className='bazaar-area'>\r\n                    {this.getBazaarCarpets(handleItemClick)}\r\n                </div>\r\n                <Modal\r\n                    size=\"lg\"\r\n                    show={this.state.showItemDialog}\r\n                    onHide={hideModal}\r\n                    centered={true}>\r\n                    <Modal.Header>\r\n                        <Modal.Title className='pixel-font'>\r\n                            {this.state.itemDetails.title}\r\n                        </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className='item-preview'>\r\n                            <img src={this.state.itemDetails.iconSource} width={128} height={128} alt=\"item preview\" />\r\n                        </div>\r\n                        <hr className='white-hr' />\r\n                        <div className='item-details pixel-font'>\r\n                            <div className='item-tag'>\r\n                                {this.getSourceText(this.state.itemDetails.source)}\r\n                            </div>\r\n                            <div className='item-tag'>\r\n                                {`${this.state.itemDetails.itemCost}x`}\r\n                                <img src='./images/Item_Shop/itemCoin.gif' alt=\"animated coin icon\"/>\r\n                            </div>\r\n                            <div className='item-tag'>\r\n                                {this.getTypeText(this.state.itemDetails.type)}\r\n                            </div>\r\n                        </div>\r\n                        <hr className='white-hr' />\r\n                        {this.getFormattedItemDescription(this.state.itemDetails.body)}\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant='dark' onClick={hideModal}>Close</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import './css/LandingSpace.css';\r\n\r\nimport React from 'react';\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport {CharacterCreator} from './CharacterCreator';\r\nimport {ItemShop} from './ItemShop';\r\n\r\ninterface ILandingSpaceProps {\r\n};\r\n\r\ninterface ILandingSpaceState {\r\n};\r\n\r\n// Use the hash router instead of a browser router so that refreshes and direct-links to pages work.\r\n//https://stackoverflow.com/questions/27928372/react-router-urls-dont-work-when-refreshing-or-writing-manually\r\nexport default function LandingSpace() {\r\n    return (\r\n        <div className=\"page-nav\">\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/\" children={<Home />} />\r\n                    <Route path=\"/creatorPage\" children={<CharacterCreator />} />\r\n                    <Route path=\"/itemShop\" children={<ItemShop />} />\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className=\"nav-bar\">\r\n            <h1>Here Be Links</h1>\r\n            <h2 className=\"nav-entry\">\r\n                <Link to=\"/creatorPage\">\r\n                    &gt;&gt;&gt; DnD Character Creator &lt;&lt;&lt;\r\n                </Link>\r\n            </h2>\r\n            <h2 className=\"nav-entry\">\r\n                <Link to=\"/itemShop\">\r\n                    &gt;&gt;&gt; DnD Item Shop &lt;&lt;&lt;\r\n                </Link>\r\n            </h2>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport LandingSpace from './LandingSpace';\n\nReactDOM.render(<LandingSpace />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}