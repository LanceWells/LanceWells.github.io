{"version":3,"sources":["serviceWorker.ts","FirebaseAuth/Enums/AuthState.ts","FirebaseAuth/Classes/UserDataAuth.ts","LoginPage/Enums/LoginState.ts","LoginPage/React/LoginPage.tsx","CharacterImage/Enums/PartType.ts","CharacterImage/React/PartButton.tsx","CharacterImage/Enums/BodyType.ts","CharacterImage/React/PartTypeSelector.tsx","CharacterImage/React/PartBodySelector.tsx","CharacterImage/Enums/BodyDescription.ts","CharacterImage/React/PartSelector.tsx","CharacterImage/Classes/CharImageLayout.ts","CharacterImage/Classes/CharacterImageMap.ts","CharacterImage/React/CharacterImageCanvas.tsx","CharacterImage/Enums/CharacterSize.ts","CharacterImage/React/CharacterDrawingArea.tsx","CharacterImage/React/CharacterImage.tsx","Routing/React/LandingSpace.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AuthState","LoginState","UserDataAuth","_authState","salt","_username","this","Checking","BCrypt","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","auth","onAuthStateChanged","HandleAuthStateChanged","bind","uid","currentUser","undefined","Unauthorized","signOut","email","password","loginResponse","DidLogin","Errors","setPersistence","Auth","Persistence","LOCAL","catch","error","errorMessage","message","console","push","signInWithEmailAndPassword","then","passwordDupe","createResponse","DidCreate","passwordHash","length","createUserWithEmailAndPassword","fulfilledValue","log","rejectedValue","Promise","resolve","reject","timeoutWaiting","setTimeout","user","clearTimeout","Authorized","_instance","MaxPasswordLength","PartType","LoginPage","props","currentUsername","currentPassword","currentPassDupe","loginState","CheckingCredentials","GetInstance","CheckForAccess","LoggedIn","state","pageState","errorMessages","granted","setState","Login","onRejected","className","toString","getErrorMessages","GetInternalRenderBits","Username","onClick","submitLogout","CreateAnAccount","action","method","onSubmit","submitCreateAccount","type","name","onChange","handleUsernameInput","handlePasswordInput","handlePassDupeInput","style","display","value","submitBackToLogin","submitLogin","submitGoToCreateAccount","map","e","event","preventDefault","loginPromise","loggedIn","Logout","CreateAccount","onResolve","onReject","input","target","React","Component","PartButton","partSelectionCallback","partType","imageSource","src","width","BodyType","PartTypeSelector","Dropdown","Toggle","id","Menu","GetPartTypes","Object","values","pt","Item","SelectionCallback","BodyDescription","PartBodySelector","GetBodyTypes","bt","PartSelector","bodyTypeSelectionCallback","partTypeSelectionCallback","GetPartButtons","partOptions","po","CharImageLayout","partMap","ImageSelection","Map","image","set","images","CharacterImageMap","PartOrder","forEach","part","EnlistImageIfExists","has","get","charSize","bodyType","CharImageMap","filter","c","CompareParamsToStructItem","flatMap","csi","Images","structItem","doesMatch","validBodyDescriptors","BodyTypeMap","Size","some","vbt","AverageSizedFeminineDefaults","Eyes","Body","AverageSizedMasculineDefaults","ReptilianFeminineDefaults","ReptilianMasculineDefaults","AverageSizedFeminine","HumanoidFemale","HumanoidAndrogynous","Female","Androgynous","AverageSizedMasculine","HumanoidMale","Male","ReptilianFeminine","ReptilianFemale","ReptilianAndrogynous","ReptilianMasculine","ReptilianMale","BackAccessory","Bottoms","Shoes","LowerArmor","Tops","UpperArmor","MidAccessory","ArmArmor","HandWear","Hair","FacialWear","HeadWear","Pets","Weapons","CharacterShadowSource","DefaultBodyParts","CharacterImageCanvas","height","canvasHeight","canvasWidth","ref","refs","characterEffectsCanvas","toDataURL","charStagingCanvas","characterStagingCanvas","stagingCanvasContext","getContext","charCanvas","characterCanvas","charCanvasContext","effectsCanvasContext","imageSmoothingEnabled","DrawCharacterAndBorder","LoadCharacterImages","DrawCharacterBorder","DrawCharacterWithEffects","imagesToDraw","Array","imagesToRender","loadedImagesPromises","img","index","imageElement","Image","onload","all","clearRect","itd","drawImage","charPartOffset","charScaleFactor","canvasContext","charImgSrc","char","charImg","i","borderCoordinates","thicknessScale","xCoord","yCoord","globalCompositeOperation","fillStyle","borderColor","fillRect","borderCanvas","effectsCanvas","shadowImgSrc","shadow","shadowImg","charBorderImgSrc","border","charBorderImg","shadowOffset","CharacterSize","CharacterDrawingArea","downloadUrl","onChangeComplete","handleColorChange","color","colors","outlineColorOptions","downloadCallback","fetchDownloadUrl","hex","charImageCanvas","GetDownloadUrl","CharacterImage","Average","charImageLayout","imgSource","charImgLayout","SetPartImage","downloadSource","link","document","createElement","download","href","click","imagePaths","GetCharacterImagePaths","charImages","GetImages","handleCanvasDownload","handlePartSelection","handleBodyTypeChange","handlePartTypeChange","LandingSpace","Nav","defaultActiveKey","Link","eventKey","exact","path","children","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8bcd07e5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum AuthState\r\n{\r\n    Authorized = \"Authorized\",\r\n    Unauthorized = \"Unauthorized\",\r\n    Checking = \"Checking\"\r\n}\r\n","import * as BCrypt from 'bcryptjs';\r\nimport firebase from 'firebase';\r\nimport { CreateUserResponse } from '../Types/CreateUserResponse';\r\nimport { LoginResponse } from '../Types/LoginResponse';\r\nimport { AuthState } from '../Enums/AuthState';\r\n\r\n/**\r\n * @description A class used for authorizing user credentials and fetching user data.\r\n */\r\nexport class UserDataAuth {\r\n    /**\r\n     * @description Describes the singleton instance for this class.\r\n     */\r\n    private static _instance: UserDataAuth;\r\n\r\n    /**\r\n     * @description Describes the current authorization state for user authorization.\r\n     */\r\n    private _authState: AuthState;\r\n\r\n    /**\r\n     * @description A salt used for BCrypt encryption whenever evaluating user passwords.\r\n     */\r\n    private salt: string;\r\n\r\n    /**\r\n     * @description The user's username that is being stored after authorizing user credentials.\r\n     */\r\n    private _username: string = \"\";\r\n\r\n    /**\r\n     * @description The maximum length of allowed passwords.\r\n     */\r\n    public static readonly MaxPasswordLength = 60;\r\n\r\n    /**\r\n     * @description Gets the username for the current logged-in user. This is not the name of the character,\r\n     * but instead the e-mail address associated with this user's account.\r\n     */\r\n    public get Username(): string {\r\n        return this._username;\r\n    }\r\n\r\n    /**\r\n     * @description Gets the UID for the current user. This is the user's identification number. This is used\r\n     * to index a large amount of user storage.\r\n     */\r\n    public GetUid(): string | undefined {\r\n        let uid = firebase.auth().currentUser?.uid;\r\n        if (!uid) {\r\n            uid = undefined;\r\n        }\r\n        return uid;\r\n    }\r\n\r\n    /**\r\n     * @description Logs out from any current user instances.\r\n     */\r\n    public Logout(): void {\r\n        this._authState = AuthState.Unauthorized;\r\n        firebase.auth().signOut();\r\n    }\r\n\r\n    /**\r\n     * @description Logs into a user instance using an email-password combination.\r\n     * @param email The email of the user to login.\r\n     * @param password The password of the user to login.\r\n     */\r\n    public async Login(email: string, password: string): Promise<LoginResponse> {\r\n        let loginResponse: LoginResponse = {\r\n            DidLogin: false,\r\n            Errors: []\r\n        };\r\n\r\n        await firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\r\n            .catch(function (error) {\r\n                let errorMessage = error.message;\r\n                console.error(errorMessage);\r\n                loginResponse.Errors.push(errorMessage);\r\n            });\r\n\r\n        await firebase.auth().signInWithEmailAndPassword(email, password)\r\n            .then(() =>\r\n                loginResponse.DidLogin = true\r\n            )\r\n            .catch((error) => {\r\n                let errorMessage = error.message;\r\n                console.error(errorMessage);\r\n                loginResponse.Errors.push(errorMessage);\r\n            });\r\n\r\n        return loginResponse;\r\n    }\r\n\r\n    /**\r\n     * @description Creates a new user asynchronously.\r\n     * @param email The email of the new user to create.\r\n     * @param password The password for the new user.\r\n     * @param passwordDupe A duplicate of the password that the user has provided.\r\n     */\r\n    public async CreateAccount(email: string, password: string, passwordDupe: string): Promise<CreateUserResponse> {\r\n        let createResponse: CreateUserResponse = {\r\n            DidCreate: false,\r\n            Errors: []\r\n        };\r\n\r\n        // This may be a little overkill, but don't compare plaintext passwords, use something more robust\r\n        // like BCrypt to compare.\r\n        let passwordHash: string = BCrypt.hashSync(password, this.salt);\r\n        let passwordsMatch: boolean = BCrypt.compareSync(passwordDupe, passwordHash);\r\n\r\n        // Validate that the passwords match.\r\n        if (!passwordsMatch) {\r\n            createResponse.Errors.push(\"Your passwords did not match.\");\r\n        }\r\n\r\n        if (password.length < 6) {\r\n            createResponse.Errors.push(\"Passwords must be at least 6 characters long.\");\r\n        }\r\n\r\n        if (createResponse.Errors.length <= 0) {\r\n            await firebase.auth().createUserWithEmailAndPassword(email, password).then(\r\n                fulfilledValue => {\r\n                    createResponse.DidCreate = true;\r\n                    console.log(fulfilledValue);\r\n                }\r\n                , rejectedValue => {\r\n                    console.error(rejectedValue);\r\n                    createResponse.Errors.push(rejectedValue.message);\r\n                });\r\n        }\r\n\r\n        if (!createResponse.DidCreate) {\r\n            createResponse.Errors.push(\"There was a problem when creating this account. Please try again.\");\r\n        }\r\n\r\n        return createResponse;\r\n    }\r\n\r\n    /**\r\n     * @description Checks for access being granted to the user.\r\n     */\r\n    public async CheckForAccess(): Promise<boolean> {\r\n        if (this._authState == AuthState.Checking) {\r\n            await new Promise<void>((resolve, reject) => {\r\n                // Reject the promise if we wait > X seconds before getting a response.\r\n                let timeoutWaiting = setTimeout(() => reject(), 10000);\r\n\r\n                firebase.auth().onAuthStateChanged((user) => {\r\n                    // If we got an answer, don't reject.\r\n                    window.clearTimeout(timeoutWaiting);\r\n                    resolve();\r\n                });\r\n            });\r\n        }\r\n\r\n        return this._authState === AuthState.Authorized;\r\n    }\r\n\r\n    /**\r\n     * @description Gets the singleton instance of this object.\r\n     */\r\n    public static GetInstance(): UserDataAuth {\r\n        if (!this._instance) {\r\n            this._instance = new UserDataAuth();\r\n        }\r\n\r\n        return this._instance;\r\n    }\r\n\r\n    /**\r\n     * @description Creates a new instance of this object.\r\n     */\r\n    private constructor() {\r\n        this._authState = AuthState.Checking;\r\n        this.salt = BCrypt.genSaltSync();\r\n\r\n        // Your web app's Firebase configuration\r\n        let firebaseConfig = {\r\n            apiKey: \"AIzaSyD-s5zfMiZavJc8J0qsCVIpzSysbaRG7kU\",\r\n            authDomain: \"test-project-a4c30.firebaseapp.com\",\r\n            databaseURL: \"https://test-project-a4c30.firebaseio.com\",\r\n            projectId: \"test-project-a4c30\",\r\n            storageBucket: \"test-project-a4c30.appspot.com\",\r\n            messagingSenderId: \"553146248685\",\r\n            appId: \"1:553146248685:web:b24bdb19f4a400f3550be4\",\r\n            measurementId: \"G-Y6PMKS1PHP\"\r\n        };\r\n\r\n        // Initialize Firebase\r\n        firebase.initializeApp(firebaseConfig);\r\n        firebase.analytics()\r\n\r\n        // Add a listener for auth state changing.\r\n        firebase.auth().onAuthStateChanged(this.HandleAuthStateChanged.bind(this));\r\n    }\r\n\r\n\r\n    /**\r\n     * @description Handles the user's authorization state changing.\r\n     * @param user The user that was logged in, or null if the user was logged out.\r\n     */\r\n    private HandleAuthStateChanged(user: firebase.User | null): void {\r\n        if (user) {\r\n            this._authState = AuthState.Authorized;\r\n            console.log(\"User \" + user.uid + \" has logged in.\")\r\n\r\n            let email = firebase.auth().currentUser?.email;\r\n            if (email && email !== undefined) {\r\n                this._username = email;\r\n            }\r\n        }\r\n        else {\r\n            // This means that either the auth has initialized, or that someone has logged out.\r\n            this._authState = AuthState.Unauthorized;\r\n            console.log(\"User has logged out.\")\r\n        }\r\n    }\r\n}\r\n","export enum LoginState {\r\n    CheckingCredentials = \"Checking Credentials\",\r\n    Login = \"Login\",\r\n    LoggingIn = \"Logging In\",\r\n    LoggedIn = \"Logged In\",\r\n    LoggingOut = \"Logged Out\",\r\n    CreateAnAccount = \"Create An Account\"\r\n}\r\n","import React, { FormEvent, ChangeEvent } from 'react';\r\nimport '../LoginPage.css'\r\nimport { UserDataAuth } from '../../FirebaseAuth/Classes/UserDataAuth';\r\nimport { CreateUserResponse } from '../../FirebaseAuth/Types/CreateUserResponse';\r\nimport { LoginResponse } from '../../FirebaseAuth/Types/LoginResponse';\r\nimport { LoginState } from '../Enums/LoginState';\r\n\r\n/**\r\n * @description A series of properties to use to render this component.\r\n */\r\ninterface ILoginPageProps {\r\n};\r\n\r\n/**\r\n * @description An object used to maintain the internal state of this object.\r\n * @param pageState A stateful viariable used to keep track of what to display/provide as options.\r\n * @param errorMessages A set of error messages to display to the user.\r\n */\r\ninterface ILoginPageState {\r\n    pageState: LoginState;\r\n    errorMessages: string[];\r\n}\r\n\r\n/**\r\n * @description The login and account-creation form for this site.\r\n */\r\nexport class LoginPage extends React.Component<ILoginPageProps, ILoginPageState> {\r\n    private currentUsername: string;\r\n    private currentPassword: string;\r\n    private currentPassDupe: string;\r\n\r\n    /**\r\n     * Creates a new instance of this object.\r\n     * @param props The series of properties passed in as input for this component.\r\n     */\r\n    public constructor(props: ILoginPageProps) {\r\n        super(props);\r\n\r\n        this.currentUsername = \"\";\r\n        this.currentPassword = \"\";\r\n        this.currentPassDupe = \"\";\r\n\r\n        let loginState: LoginState = LoginState.CheckingCredentials;\r\n        if (UserDataAuth.GetInstance().CheckForAccess()) {\r\n            loginState = LoginState.LoggedIn;\r\n        }\r\n\r\n        this.state = {\r\n            pageState: loginState,\r\n            errorMessages: []\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Fired immediately after this component has mounted. This is used to update the component\r\n     * to reflect whether the user has logged in using stored credentials.\r\n     */\r\n    public componentDidMount() {\r\n        UserDataAuth.GetInstance().CheckForAccess().then(granted => {\r\n            if (granted) {\r\n                this.setState({\r\n                    pageState: LoginState.LoggedIn\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    pageState: LoginState.Login\r\n                })\r\n            }\r\n        }, onRejected => {\r\n            console.error(\"Rejected login:\" + onRejected);\r\n            this.setState({\r\n                pageState: LoginState.Login\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * @description Renders thi object.\r\n     */\r\n    public render() {\r\n        return (\r\n            <div className=\"login-container\">\r\n                <div className=\"login-dialog\">\r\n                    <h2 className=\"login-header\">\r\n                        {this.state.pageState.toString()}\r\n                    </h2>\r\n                    <div className=\"login-error-messages\">\r\n                        {this.getErrorMessages()}\r\n                    </div>\r\n                    {this.GetInternalRenderBits()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @description Renders the internal bits that change depending on the state of this component.\r\n     */\r\n    private GetInternalRenderBits(): JSX.Element {\r\n        switch (this.state.pageState) {\r\n            case LoginState.LoggedIn: {\r\n                return (\r\n                    <div>\r\n                        <h3>You are logged in as {UserDataAuth.GetInstance().Username}</h3>\r\n                        <br /><br />\r\n                        <div className=\"login-button-container\">\r\n                            <button className=\"login-button\" onClick={this.submitLogout.bind(this)}>\r\n                                Log Out\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            case LoginState.CreateAnAccount: {\r\n                return (\r\n                    <div>\r\n                        <form className=\"login-form\" action=\"/\" method=\"POST\" onSubmit={this.submitCreateAccount.bind(this)}>\r\n                            <br /> <br />\r\n                            <span>Email:</span>\r\n                            <br />\r\n                            <input type=\"text\" name=\"email\" onChange={this.handleUsernameInput.bind(this)} />\r\n                            <br /> <br />\r\n                            <span>Password:</span>\r\n                            <br />\r\n                            <input type=\"password\" name=\"password\" onChange={this.handlePasswordInput.bind(this)} />\r\n                            <br /> <br />\r\n                            <span>Password (Again!):</span>\r\n                            <br />\r\n                            <input type=\"password\" name=\"passwordDupe\" onChange={this.handlePassDupeInput.bind(this)} />\r\n                            <br /> <br />\r\n                            <input\r\n                                className=\"login-button\"\r\n                                type=\"submit\"\r\n                                style={{ display: \"initial\" }}\r\n                                value=\"Create Account\" />\r\n                        </form>\r\n                        <div className=\"login-button-container\">\r\n                            <button\r\n                                className=\"login-button\"\r\n                                onClick={this.submitBackToLogin.bind(this)}>\r\n                                Back To Login\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            case LoginState.CheckingCredentials: {\r\n                return (\r\n                    <div>\r\n                        <h2>Checking login credentials . . . </h2>\r\n                    </div>\r\n                )\r\n            }\r\n            case LoginState.Login:\r\n            default: {\r\n                return (\r\n                    <div>\r\n                        <form className=\"login-form\" action=\"/\" method=\"POST\" onSubmit={this.submitLogin.bind(this)}>\r\n                            <br /> <br />\r\n                            <span>Email:</span>\r\n                            <br />\r\n                            <input type=\"text\" name=\"email\" onChange={this.handleUsernameInput.bind(this)} />\r\n                            <br /> <br />\r\n                            <span>Password:</span>\r\n                            <br />\r\n                            <input type=\"password\" name=\"password\" onChange={this.handlePasswordInput.bind(this)} />\r\n                            <br /> <br />\r\n                            <input\r\n                                className=\"login-button\"\r\n                                style={{ display: \"initial\" }}\r\n                                type=\"submit\"\r\n                                value=\"Log In\" />\r\n                        </form>\r\n                        <div className=\"login-button-container\">\r\n                            <button\r\n                                className=\"login-button\"\r\n                                onClick={this.submitGoToCreateAccount.bind(this)}>\r\n                                Create An Account\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Gets a series of error messages to render from the current state.\r\n     */\r\n    private getErrorMessages(): JSX.Element[] {\r\n        return (\r\n            this.state.errorMessages.map(e => {\r\n                return (\r\n                    <p>{e}</p>\r\n                )\r\n            })\r\n        )\r\n    }\r\n\r\n    /**\r\n     * @description Handles the click event for the 'submit' button when the user is logging in.\r\n     * @param event The event to handle when the user presses, \"Login\".\r\n     */\r\n    private submitLogin(event: FormEvent<HTMLFormElement>) {\r\n        // By default, this causes the page to refresh which we DO NOT WANT. This happens because the provided\r\n        // form looks to browsers like a standard login form.\r\n        event.preventDefault();\r\n\r\n        // Attempt to log in using UserDataAuth.\r\n        let loginPromise: Promise<LoginResponse> = UserDataAuth.GetInstance().Login(this.currentUsername, this.currentPassword);\r\n\r\n        this.setState({\r\n            pageState: LoginState.CheckingCredentials\r\n        });\r\n\r\n        loginPromise.then(\r\n            loggedIn => {\r\n                if (loggedIn.DidLogin) {\r\n                    this.setState({\r\n                        pageState: LoginState.LoggedIn\r\n                    });\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        errorMessages: [\"That username and password was not valid. Please try again.\"]\r\n                    });\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    /**\r\n     * @description Handles when the user selects the \"Logout\" button.\r\n     */\r\n    private submitLogout() {\r\n        // Logout from the user data auth.\r\n        UserDataAuth.GetInstance().Logout();\r\n\r\n        // Set page state to LoggingOut, which should redirect to the home page.\r\n        this.setState({\r\n            pageState: LoginState.Login\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Handles when the user selects the \"Create an account\" button.\r\n     * @param event The event arguments provided when a user creates an account.\r\n     */\r\n    private submitCreateAccount(event: FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n\r\n        let response: Promise<CreateUserResponse> = UserDataAuth.GetInstance().CreateAccount(\r\n            this.currentUsername,\r\n            this.currentPassword,\r\n            this.currentPassDupe);\r\n\r\n        response.then(\r\n            onResolve => {\r\n                // Always set the error list to whatever we got. This way it clears when we have no errors.\r\n                this.setState({\r\n                    errorMessages: onResolve.Errors\r\n                });\r\n\r\n                if (onResolve.DidCreate) {\r\n                    this.setState({\r\n                        pageState: LoginState.LoggedIn\r\n                    });\r\n                }\r\n            }, onReject => {\r\n                console.error(\"Failed to create a user account.\" + onReject);\r\n            }\r\n        )\r\n    }\r\n\r\n    /**\r\n     * @description Handles the click event when a user goes to the 'Create An Account' button.\r\n     */\r\n    private submitGoToCreateAccount() {\r\n        this.setState({\r\n            pageState: LoginState.CreateAnAccount\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Handles when a user selects the \"Back To Login\" button.\r\n     */\r\n    private submitBackToLogin() {\r\n        this.setState({\r\n            pageState: LoginState.Login\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Handles when the user types/provides input into the username field.\r\n     * @param event The event arguments provided when the user is changing the username field.\r\n     */\r\n    private handleUsernameInput(event: ChangeEvent<HTMLInputElement>) {\r\n        let input = event.target?.value;\r\n        if (input !== null) {\r\n            this.currentUsername = input;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Handles when the user types/provides input into the password field.\r\n     * @param event The event arguments provided when the user is changing the field.\r\n     */\r\n    private handlePasswordInput(event: ChangeEvent<HTMLInputElement>) {\r\n        let input = event.target?.value;\r\n        if (input !== null) {\r\n            this.currentPassword = input;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Handles when the user types/provides input into the password verification field.\r\n     * @param event The event arguments provided when the user is changing the field.\r\n     */\r\n    private handlePassDupeInput(event: ChangeEvent<HTMLInputElement>) {\r\n        let input = event.target?.value;\r\n        if (input !== null) {\r\n            this.currentPassDupe = input;\r\n        }\r\n    }\r\n}\r\n","export enum PartType\r\n{\r\n    BackAccessory = 'Back Accessory',\r\n    Body = 'Body',\r\n    Bottoms = 'Bottoms',\r\n    Shoes = 'Shoes',\r\n    LowerArmor = 'Lower Armor',\r\n    Tops = 'Tops',\r\n    UpperArmor = 'Upper Armor',\r\n    MidAccessory = 'Mid Accessory',\r\n    ArmArmor = 'Arm Armor',\r\n    HandWear = 'Hand Wear',\r\n    Hair = 'Hair',\r\n    FacialWear = 'Facial Wear',\r\n    HeadWear = 'Head Wear',\r\n    Pets = 'Pets',\r\n    Weapons = 'Weapons',\r\n    Eyes = 'Eyes'\r\n}","import React from 'react';\r\nimport { PartSelectionCallback } from '../Types/PartSelectionCallback';\r\nimport { PartType } from '../Enums/PartType';\r\n\r\n/**\r\n * @description The properties for this component.\r\n * @param partType The type of part that is represented by this button.\r\n * @param imageSource The source for the iamge that is represented by this button.\r\n * @param partSelectionCallback The callback when this button is clicked.\r\n */\r\nexport interface IPartButtonProps {\r\n    partType: PartType;\r\n    imageSource: string;\r\n    partSelectionCallback: PartSelectionCallback;\r\n};\r\n\r\n/**\r\n * A constant that represents the size of the button/image that is represented here.\r\n */\r\nconst imgSize: string = \"128px\";\r\n\r\n/**\r\n * A component used to represent an individual option for a character part.\r\n * @param props \r\n */\r\nexport function PartButton(props: IPartButtonProps) {\r\n    return (\r\n        <button\r\n            className=\"part-button\"\r\n            onClick={() => props.partSelectionCallback(props.partType, props.imageSource)}>\r\n            <img src={props.imageSource}\r\n                width={imgSize}/>\r\n        </button>\r\n    )\r\n}\r\n","export enum BodyType {\r\n    AverageSizedMasculine = \"Average-Sized Masculine\",\r\n    AverageSizedFeminine = \"Average-Sized Feminine\",\r\n    ReptilianMasculine = \"Reptilian Masculine\",\r\n    ReptilianFeminine = \"Reptilian Feminine\"\r\n}","import React from 'react';\r\nimport { PartType } from '../Enums/PartType';\r\nimport { PartTypeSelectionCallback } from '../Types/PartTypeSelectionCallback';\r\nimport { Dropdown } from 'react-bootstrap';\r\n\r\n/**\r\n * @description The properties provided to this component.\r\n * @param SelectionCallback The function to be called when a part type is selected from the dropdown.\r\n */\r\nexport interface IPartTypeSelectorProps {\r\n    SelectionCallback: PartTypeSelectionCallback;\r\n};\r\n\r\n/**\r\n * @description The state maintained by this component.\r\n */\r\nexport interface IPartTypeSelectorState {\r\n};\r\n\r\n/**\r\n * @description The part-type selector. This lets the character creator switch between part types.\r\n */\r\nexport class PartTypeSelector extends React.Component<IPartTypeSelectorProps, IPartTypeSelectorState> {\r\n    /**\r\n     * @description Creates a new isntance of this component.\r\n     * @param props The provided properties for this class.\r\n     */\r\n    constructor(props: IPartTypeSelectorProps) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n    /**\r\n     * @description Renders this component.\r\n     */\r\n    public render() {\r\n        return (\r\n            <Dropdown\r\n                className=\"part-type-selector\">\r\n                <Dropdown.Toggle id=\"part-dropdown\">\r\n                    Part Type Selection\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                    {this.GetPartTypes()}\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    private GetPartTypes(): JSX.Element[] {\r\n        return Object.values(PartType).map(pt => {\r\n            let itemClickCallback = () => {this.props.SelectionCallback(pt)};\r\n\r\n            return (\r\n                <Dropdown.Item\r\n                    onClick={itemClickCallback.bind(this)}>\r\n                    {pt.toString()}\r\n                </Dropdown.Item>\r\n            )\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Dropdown } from 'react-bootstrap';\r\nimport { BodyType } from '../Enums/BodyType';\r\nimport { BodyTypeSelectionCallback } from '../Types/BodyTypeSelectionCallback';\r\n\r\n/**\r\n * @description The properties provided to this component.\r\n * @param SelectionCallback The function to be called when a body type is selected from the dropdown.\r\n */\r\nexport interface IPartBodySelectorProps {\r\n    SelectionCallback: BodyTypeSelectionCallback;\r\n}\r\n\r\n/**\r\n * @description The state maintained by this component.\r\n */\r\nexport interface IPartBodySelectorState {\r\n}\r\n\r\n/**\r\n * @description The body-type selector. This lets the character creator switch between body types.\r\n */\r\nexport class PartBodySelector extends React.Component<IPartBodySelectorProps, IPartBodySelectorState> {\r\n    /**\r\n     * @description Creates a new isntance of this component.\r\n     * @param props The provided properties for this class.\r\n     */\r\n    constructor(props: IPartBodySelectorProps) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Renders this component.\r\n     */\r\n    public render() {\r\n        return (\r\n            <Dropdown>\r\n                <Dropdown.Toggle id=\"body-dropdown\">\r\n                    Body Type Selection\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                    {this.GetBodyTypes()}\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    private GetBodyTypes(): JSX.Element[] {\r\n        return Object.values(BodyType).map(bt => {\r\n            let itemClickCallback = () => {this.props.SelectionCallback(bt)};\r\n\r\n            return (\r\n                <Dropdown.Item\r\n                    onClick={itemClickCallback.bind(this)}>\r\n                    {bt.toString()}\r\n                </Dropdown.Item>\r\n            )\r\n        })\r\n    }\r\n}\r\n","export enum BodyDescription\r\n{\r\n    Androgynous = 'Androgynous',\r\n    Female = 'Female',\r\n    Male = 'Male',\r\n\r\n    HumanoidAndrogynous = 'Humanoid_Androgynous',\r\n    HumanoidFemale = 'Humanoid_Female',\r\n    HumanoidMale = 'Humanoid_Male',\r\n\r\n    ReptilianAndrogynous = 'Reptilian_Androgynous',\r\n    ReptilianFemale = 'Reptilian_Female',\r\n    ReptilianMale = 'Reptilian_Male',\r\n}","import React from 'react';\r\n\r\nimport { PartButton } from './PartButton';\r\nimport { PartTypeSelector } from './PartTypeSelector';\r\nimport { PartBodySelector } from './PartBodySelector';\r\n\r\nimport { PartType } from '../Enums/PartType';\r\nimport { PartTypeSelectionCallback } from '../Types/PartTypeSelectionCallback';\r\nimport { BodyTypeSelectionCallback } from '../Types/BodyTypeSelectionCallback';\r\nimport { PartSelectionCallback } from '../Types/PartSelectionCallback';\r\n\r\n/**\r\n * @description The properties provided to this component.\r\n * @param partType The part type whose buttons are displayed in in this component at present.\r\n * @param partOptions The list of image sources that are displayed as options.\r\n * @param partTypeSelectionCallback A callback when a part type has been selected.\r\n * @param bodyTypeSelectionCallback A callback when a body type has been selected.\r\n * @param partSelectionCallback A callback when the type of part represented as an option changes.\r\n */\r\nexport interface IPartSelectorProps {\r\n    partType: PartType;\r\n    partOptions: string[];\r\n    partTypeSelectionCallback: PartTypeSelectionCallback;\r\n    bodyTypeSelectionCallback: BodyTypeSelectionCallback;\r\n    partSelectionCallback: PartSelectionCallback;\r\n};\r\n\r\n/**\r\n * @description The state maintained by this component.\r\n */\r\nexport interface IPartSelectorState {\r\n};\r\n\r\n/**\r\n * @description The part selector for the character creator. This provides compnonents to switch body types,\r\n * part types, and parts.\r\n */\r\nexport class PartSelector extends React.Component<IPartSelectorProps, IPartSelectorState> {\r\n    /**\r\n     * @description Creates a new isntance of this component.\r\n     * @param props The provided properties for this class.\r\n     */\r\n    constructor(props: IPartSelectorProps) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n    /**\r\n     * @description Renders this component.\r\n     */\r\n    public render() {\r\n        return (\r\n            <div className=\"part-selector\">\r\n                <div className=\"part-character-selectors\">\r\n                    <PartBodySelector\r\n                        SelectionCallback={this.props.bodyTypeSelectionCallback}\r\n                    />\r\n                    <PartTypeSelector\r\n                        SelectionCallback={this.props.partTypeSelectionCallback}\r\n                    />\r\n                </div>\r\n                <div className=\"part-selector-buttons\">\r\n                    {this.GetPartButtons()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private GetPartButtons(): JSX.Element[] {\r\n        return this.props.partOptions.map(po => \r\n            <PartButton\r\n                partType={this.props.partType}\r\n                imageSource={po}\r\n                partSelectionCallback={this.props.partSelectionCallback}\r\n            />\r\n        );\r\n    }\r\n}\r\n","import { PartType } from '../Enums/PartType';\r\nimport { CharacterImageMap } from './CharacterImageMap';\r\n\r\n/**\r\n * A structure used to gather information about a character visually, then a means to fetch that character\r\n * data as an organized list of images.\r\n */\r\nexport class CharImageLayout {\r\n    private ImageSelection: Map<PartType, string> = new Map();\r\n\r\n    /**\r\n     * @description Gets a new instance of this object.\r\n     * @param partMap A map of part types to their respective strings. This may be an empty list.\r\n     */\r\n    public constructor(partMap: Map<PartType, string>) {\r\n        this.ImageSelection = partMap;\r\n    }\r\n\r\n    /**\r\n     * @description Sets the part type to the provided image.\r\n     * @param partType The part type to set.\r\n     * @param image The image source to set.\r\n     */\r\n    public SetPartImage(partType: PartType, image: string): void {\r\n        this.ImageSelection.set(partType, image);\r\n    }\r\n\r\n    /**\r\n     * @description Resets this image's parts to an empty list.\r\n     */\r\n    public ResetImage(): void {\r\n        this.ImageSelection = new Map();\r\n    }\r\n\r\n    /**\r\n     * @description Get a list of image sources, in-order.\r\n     */\r\n    public GetImages(): string[] {\r\n        let images: string[] = [];\r\n        \r\n        CharacterImageMap.PartOrder.forEach(part => {\r\n            this.EnlistImageIfExists(images, part);\r\n        });\r\n\r\n        return images;\r\n    }\r\n\r\n    /**\r\n     * @description Adds the specified image by-part-type to the array if it exists in the @see ImageSelection\r\n     * map.\r\n     * @param images An output list of images, passed by-reference. This should be empty when first called.\r\n     * @param partType The type of part to check-for and add to the list if it does.\r\n     */\r\n    private EnlistImageIfExists(images: string[], partType: PartType) {\r\n        if (this.ImageSelection.has(partType)) {\r\n            let image: string\r\n            image = this.ImageSelection.get(partType) as string;\r\n            images.push(image);\r\n        }\r\n    }\r\n}\r\n","import CharImageMap from './CharImageStruct.json';\r\nimport { CharacterSize } from '../Enums/CharacterSize';\r\nimport { BodyType } from '../Enums/BodyType';\r\nimport { PartType } from '../Enums/PartType';\r\nimport { CharImageStructItem } from '../Types/CharImageStructItem';\r\nimport { BodyDescription } from '../Enums/BodyDescription';\r\nimport { CharImageLayout } from './CharImageLayout';\r\n\r\n/**\r\n * @description A singleton-like class used to reference constants in the character parts, body types, etc.\r\n */\r\nexport class CharacterImageMap\r\n{\r\n    /**\r\n     * @description The default images to display when a user selects the \"Average-Sized Feminine\" body type.\r\n     */\r\n    private static AverageSizedFeminineDefaults: Map<PartType, string> = new Map<PartType, string>([\r\n        [\r\n            PartType.Eyes,\r\n            \"./images/Character_Image_Defaults/Average-Sized Feminine/Eyes.png\"\r\n        ],\r\n        [\r\n            PartType.Body,\r\n            \"./images/Character_Image_Defaults/Average-Sized Feminine/Body.png\"\r\n        ]\r\n    ]);\r\n\r\n    /**\r\n     * @description The default images to display when a user selects the \"Average-Sized Masculine\" body type.\r\n     */\r\n    private static AverageSizedMasculineDefaults: Map<PartType, string> = new Map<PartType, string>([\r\n        [\r\n            PartType.Eyes,\r\n            \"./images/Character_Image_Defaults/Average-Sized Masculine/Eyes.png\"\r\n        ],\r\n        [\r\n            PartType.Body,\r\n            \"./images/Character_Image_Defaults/Average-Sized Masculine/Body.png\"\r\n        ]\r\n    ]);\r\n    \r\n    /**\r\n     * @description The default images to display when a user selects the \"Reptilian Feminine\" body type.\r\n     */\r\n    private static ReptilianFeminineDefaults: Map<PartType, string> = new Map<PartType, string>([\r\n        [\r\n            PartType.Eyes,\r\n            \"./images/Character_Image_Defaults/Reptilian Feminine/Eyes.png\"\r\n        ],\r\n        [\r\n            PartType.Body,\r\n            \"./images/Character_Image_Defaults/Reptilian Feminine/Body.png\"\r\n        ]\r\n    ]);\r\n\r\n    /**\r\n     * @description The default images to display when a user selects the \"Reptilian Masculine\" body type.\r\n     */\r\n    private static ReptilianMasculineDefaults: Map<PartType, string> = new Map<PartType, string>([\r\n        [\r\n            PartType.Eyes,\r\n            \"./images/Character_Image_Defaults/Reptilian Masculine/Eyes.png\"\r\n        ],\r\n        [\r\n            PartType.Body,\r\n            \"./images/Character_Image_Defaults/Reptilian Masculine/Body.png\"\r\n        ]\r\n    ]);\r\n\r\n    /**\r\n     * @description A map of body types to their respective valid part-type categories. For example, the\r\n     * \"average-sized feminine\" body type can use parts from the, \"humanoid female\", \"humanoid androgynous\",\r\n     * \"female\", and \"androgynous\" categories.\r\n     */\r\n    private static BodyTypeMap: Map<BodyType, BodyDescription[]> = new Map<BodyType, BodyDescription[]>(\r\n        [\r\n            [\r\n                BodyType.AverageSizedFeminine,\r\n                [\r\n                    BodyDescription.HumanoidFemale,\r\n                    BodyDescription.HumanoidAndrogynous,\r\n                    BodyDescription.Female,\r\n                    BodyDescription.Androgynous,\r\n                ]\r\n            ],\r\n            [\r\n                BodyType.AverageSizedMasculine,\r\n                [\r\n                    BodyDescription.HumanoidMale,\r\n                    BodyDescription.HumanoidAndrogynous,\r\n                    BodyDescription.Male,\r\n                    BodyDescription.Androgynous,\r\n                ]\r\n            ],\r\n            [\r\n                BodyType.ReptilianFeminine,\r\n                [\r\n                    BodyDescription.ReptilianFemale,\r\n                    BodyDescription.ReptilianAndrogynous,\r\n                    BodyDescription.Female,\r\n                    BodyDescription.Androgynous,\r\n                ]\r\n            ],\r\n            [\r\n                BodyType.ReptilianMasculine,\r\n                [\r\n                    BodyDescription.ReptilianMale,\r\n                    BodyDescription.ReptilianAndrogynous,\r\n                    BodyDescription.Male,\r\n                    BodyDescription.Androgynous,\r\n                ]\r\n            ],\r\n        ]\r\n    );\r\n\r\n    /**\r\n     * @description A list of all parts that are available as options for the user to select. This also \r\n     * determines the order in which parts will be rendered, from back-to-front, read top-to-bottom.\r\n     */\r\n    public static PartOrder: PartType[] = [\r\n        PartType.BackAccessory,\r\n        PartType.Body,\r\n        PartType.Bottoms,\r\n        PartType.Shoes,\r\n        PartType.LowerArmor,\r\n        PartType.Tops,\r\n        PartType.UpperArmor,\r\n        PartType.MidAccessory,\r\n        PartType.ArmArmor,\r\n        PartType.HandWear,\r\n        PartType.Hair,\r\n        PartType.FacialWear,\r\n        PartType.HeadWear,\r\n        PartType.Pets,\r\n        PartType.Weapons,\r\n        PartType.Eyes\r\n    ];\r\n\r\n    /**\r\n     * @description The image source for the shadow for the character.\r\n     */\r\n    public static CharacterShadowSource: string = \"./images/Character_Image_Details/CharacterShadow.png\"\r\n\r\n    /**\r\n     * @description Gets the list of valid character images for a given series of body type categories.\r\n     * @param charSize The size of the character to get images for.\r\n     * @param bodyType The type of body to get the images for.\r\n     * @param partType The part type to get images for.\r\n     */\r\n    public static GetCharacterImagePaths(charSize: CharacterSize, bodyType: BodyType, partType: PartType): string[]\r\n    {\r\n        let charStructItems: CharImageStructItem[] =  CharImageMap.filter(c =>\r\n            CharacterImageMap.CompareParamsToStructItem(c, charSize, bodyType, partType));\r\n\r\n        let charImages: string[] = charStructItems.flatMap(csi => csi.Images);\r\n\r\n        return charImages;\r\n    }\r\n\r\n    /**\r\n     * @description A map of body types to their respective default images. Note that this is merely a wrapper\r\n     * to an internal list, this is just to reduce visual noise.\r\n     */\r\n    public static DefaultBodyParts: Map<BodyType, CharImageLayout> = new Map<BodyType, CharImageLayout>(\r\n        [\r\n            [\r\n                BodyType.AverageSizedFeminine,\r\n                new CharImageLayout(CharacterImageMap.AverageSizedFeminineDefaults)\r\n            ],\r\n            [\r\n                BodyType.AverageSizedMasculine,\r\n                new CharImageLayout(CharacterImageMap.AverageSizedMasculineDefaults)\r\n            ],\r\n            [\r\n                BodyType.ReptilianFeminine,\r\n                new CharImageLayout(CharacterImageMap.ReptilianFeminineDefaults)\r\n            ],\r\n            [\r\n                BodyType.ReptilianMasculine,\r\n                new CharImageLayout(CharacterImageMap.ReptilianMasculineDefaults)\r\n            ],\r\n        ]\r\n    );\r\n\r\n    /**\r\n     * @description Compares the body-type selection options to the character map struct, picking out items\r\n     * that have a valid match.\r\n     * @param structItem The struct item part to evaluate.\r\n     * @param charSize The size of the character to get images for.\r\n     * @param bodyType The type of body to get the images for.\r\n     * @param partType The part type to get images for.\r\n     */\r\n    private static CompareParamsToStructItem(structItem: CharImageStructItem, charSize: CharacterSize, bodyType: BodyType, partType: PartType): boolean {\r\n        let doesMatch: boolean = true;\r\n        let validBodyDescriptors: BodyDescription[] = [];\r\n\r\n        if (this.BodyTypeMap.has(bodyType)) {\r\n            validBodyDescriptors = this.BodyTypeMap.get(bodyType) as BodyDescription[];\r\n        }\r\n        else {\r\n            console.error(`Invalid body type: ${bodyType} attempted to be retrieved in character image map.`);\r\n        }\r\n        \r\n        doesMatch = doesMatch && structItem.PartType === partType.toString();\r\n        doesMatch = doesMatch && structItem.Size === charSize.toString();\r\n        doesMatch = doesMatch && validBodyDescriptors.some(vbt => vbt.toString() === structItem.BodyType)\r\n\r\n        return doesMatch;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { CharacterImageMap } from '../Classes/CharacterImageMap';\r\n\r\n/**\r\n * @description The properties for this class.\r\n * @param imagesToRender A list of images that will be rendered in-order, in the drawing area. Note that the\r\n * order of this array determines how images will be drawn.\r\n * @param borderColor A css-tyle-string to be used to color the border for this character.\r\n */\r\nexport interface ICharacterImageCanvasProps {\r\n    imagesToRender: string[];\r\n    borderColor: string;\r\n};\r\n\r\n/**\r\n * @description The state maintained by this component.\r\n */\r\nexport interface ICharacterImageCanvasState {\r\n};\r\n\r\n/**\r\n * @description Used to display a character image and its associated border, specified by the properties.\r\n */\r\nexport class CharacterImageCanvas extends React.Component<ICharacterImageCanvasProps, ICharacterImageCanvasState> {\r\n    private static canvasHeight: number = 512;\r\n    private static canvasWidth:  number = 256;\r\n\r\n    private static charScaleFactor: number = 4;\r\n    private static charPartOffset: number = 32;\r\n    private static shadowOffset: number = 90;\r\n\r\n    /**\r\n     * Note that the numbers stored here are effectively pairs of coordinates to offset the\r\n     * image stamping by, scaled by the desired thickness of the border.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Compositing\r\n     */\r\n    private static borderCoordinates: number[] =\r\n    [\r\n        -1, -1,\r\n         0, -1,\r\n         1, -1,\r\n        -1,  0,\r\n         1,  0,\r\n        -1,  1,\r\n         0,  1,\r\n         1,  1\r\n    ];\r\n\r\n    /**\r\n     * @description Creates a new isntance of this object.\r\n     * @param props The properties for this object.\r\n     */\r\n    public constructor(props: ICharacterImageCanvasProps) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Renders this object.\r\n     */\r\n    public render() {\r\n        return (\r\n            <div className='character-canvas-container'>\r\n                <canvas\r\n                    height={CharacterImageCanvas.canvasHeight}\r\n                    width={CharacterImageCanvas.canvasWidth}\r\n                    id='character-staging-canvas'\r\n                    ref='characterStagingCanvas'\r\n                />\r\n                <canvas\r\n                    height={CharacterImageCanvas.canvasHeight}\r\n                    width={CharacterImageCanvas.canvasWidth}\r\n                    id='character-canvas'\r\n                    ref='characterCanvas'\r\n                />\r\n                <canvas\r\n                    height={CharacterImageCanvas.canvasHeight}\r\n                    width={CharacterImageCanvas.canvasWidth}\r\n                    id='character-effects-canvas'\r\n                    ref='characterEffectsCanvas'\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @description Gets the download url for this image. This can be used to get the image via a data url.\r\n     */\r\n    public GetDownloadUrl(): string {\r\n        let effectsCanvas: HTMLCanvasElement = this.refs.characterEffectsCanvas as HTMLCanvasElement;\r\n        let downloadUrl: string = effectsCanvas.toDataURL('image/png');\r\n\r\n        return downloadUrl;\r\n    }\r\n\r\n    /**\r\n     * @description Handles events when the component has mounted.\r\n     */\r\n    public componentDidMount() {\r\n        let charStagingCanvas: HTMLCanvasElement = this.refs.characterStagingCanvas as HTMLCanvasElement;\r\n        let stagingCanvasContext: CanvasRenderingContext2D = charStagingCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        let charCanvas: HTMLCanvasElement = this.refs.characterCanvas as HTMLCanvasElement;\r\n        let charCanvasContext: CanvasRenderingContext2D = charCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        let effectsCanvas: HTMLCanvasElement = this.refs.characterEffectsCanvas as HTMLCanvasElement;\r\n        let effectsCanvasContext: CanvasRenderingContext2D = effectsCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        // This is going around the css, but ideally we don't ever want this disply context to change. The\r\n        // sole point of this canvas element is to get a stapled-together version of our final character\r\n        // drawing.\r\n        charStagingCanvas.style.display = 'none';\r\n        charCanvas.style.display = 'none';\r\n\r\n        // This is all done with upsacled pixels, so absolutely no anti-aliasing.\r\n        stagingCanvasContext.imageSmoothingEnabled = false;\r\n        charCanvasContext.imageSmoothingEnabled = false;\r\n        effectsCanvasContext.imageSmoothingEnabled = false;\r\n\r\n        // Draw the character and the border after the component has mounted. This is so that we have at least\r\n        // some default character when we load the page.\r\n        this.DrawCharacterAndBorder();\r\n    }\r\n\r\n    /**\r\n     * @description Handles events when the component has updated.\r\n     */\r\n    public componentDidUpdate() {\r\n        this.DrawCharacterAndBorder();\r\n    }\r\n\r\n    /**\r\n     * @description Draws the character image along with a border for the character. Will clean the canvas on\r\n     * when called.\r\n     */\r\n    private async DrawCharacterAndBorder(): Promise<void> {\r\n        await this.LoadCharacterImages();\r\n        await this.DrawCharacterBorder();\r\n        await this.DrawCharacterWithEffects();\r\n    }\r\n\r\n    /**\r\n     * @description Loads all of the images used to draw a character.\r\n     */\r\n    private async LoadCharacterImages(): Promise<void> {\r\n        // Create an array of html image elements. This will be populated as images are loaded.\r\n        let imagesToDraw: HTMLImageElement[] = new Array(this.props.imagesToRender.length);\r\n\r\n        let loadedImagesPromises: Promise<void>[] = this.props.imagesToRender.map((img, index) => {\r\n            return new Promise<void>(resolve => {\r\n                let imageElement: HTMLImageElement = new Image();\r\n                imageElement.onload = () => resolve();\r\n                imageElement.src = img;\r\n                imagesToDraw[index] = imageElement;\r\n            });\r\n        });\r\n\r\n        await Promise.all(loadedImagesPromises);\r\n\r\n        let charStagingCanvas: HTMLCanvasElement = this.refs.characterStagingCanvas as HTMLCanvasElement;\r\n        let stagingCanvasContext: CanvasRenderingContext2D = charStagingCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        // First, wipe the canvas. This needs to be cleared every time we re-render and re-draw.\r\n        stagingCanvasContext.clearRect(0, 0, charStagingCanvas.width, charStagingCanvas.height);\r\n\r\n        // Now draw all of the individual character components layer-by-layer, from front to back.\r\n        imagesToDraw.forEach(itd => {\r\n            stagingCanvasContext.drawImage(\r\n                itd,\r\n                0,\r\n                CharacterImageCanvas.charPartOffset * CharacterImageCanvas.charScaleFactor,\r\n                itd.width * CharacterImageCanvas.charScaleFactor,\r\n                itd.height * CharacterImageCanvas.charScaleFactor);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @description Draws the character image, along with a 1px border using the specified color.\r\n     * @remarks https://stackoverflow.com/questions/28207232/draw-border-around-nontransparent-part-of-image-on-canvas\r\n     * Something to note about this algorith; it can only draw borders of a thickness equal to the smallest\r\n     * outlying pixel. So, our resolution for pixels on this canvas is '4', which means that the thickness\r\n     * must be 4, or else we end up with weird stamping artifacts.\r\n     */\r\n    private async DrawCharacterBorder() {\r\n        let charStagingCanvas: HTMLCanvasElement = this.refs.characterStagingCanvas as HTMLCanvasElement;\r\n        let charCanvas: HTMLCanvasElement = this.refs.characterCanvas as HTMLCanvasElement;\r\n        let canvasContext: CanvasRenderingContext2D = charCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        // Get the character staging image. This is our character image that is drawn layer-by-layer. We\r\n        // 'stamp' this image 8 times in a circle to populate each pixel that we plan to use as a border.\r\n        let charImg: HTMLImageElement = await new Promise<HTMLImageElement>(resolve => {\r\n            let charImgSrc: string = charStagingCanvas.toDataURL('image/png');\r\n            let char: HTMLImageElement = new Image();\r\n            char.onload = () => resolve(char)\r\n            char.src = charImgSrc;\r\n        });\r\n\r\n        // First, wipe the canvas. This needs to be cleared every time we re-render and re-draw.\r\n        canvasContext.clearRect(0, 0, charCanvas.width, charCanvas.height);\r\n\r\n        for (let i: number = 0; i < CharacterImageCanvas.borderCoordinates.length; i += 2) {\r\n            let thicknessScale: number = CharacterImageCanvas.charScaleFactor;\r\n            let xCoord: number = CharacterImageCanvas.borderCoordinates[i];\r\n            let yCoord: number = CharacterImageCanvas.borderCoordinates[i + 1];\r\n\r\n            canvasContext.drawImage(charImg, xCoord * thicknessScale, yCoord * thicknessScale);\r\n        }\r\n\r\n        canvasContext.globalCompositeOperation = \"source-in\";\r\n        canvasContext.fillStyle = this.props.borderColor;\r\n        canvasContext.fillRect(0, 0, charCanvas.width, charCanvas.height);\r\n        canvasContext.globalCompositeOperation = \"source-over\";\r\n    }\r\n\r\n    /**\r\n     * @description Draws the character image, along with a 1px border using the specified color.\r\n     * @remarks https://stackoverflow.com/questions/28207232/draw-border-around-nontransparent-part-of-image-on-canvas\r\n     * Something to note about this algorith; it can only draw borders of a thickness equal to the smallest\r\n     * outlying pixel. So, our resolution for pixels on this canvas is '4', which means that the thickness\r\n     * must be 4, or else we end up with weird stamping artifacts.\r\n     */\r\n    private async DrawCharacterWithEffects() {\r\n        let charStagingCanvas: HTMLCanvasElement = this.refs.characterStagingCanvas as HTMLCanvasElement;\r\n        let borderCanvas: HTMLCanvasElement = this.refs.characterCanvas as HTMLCanvasElement;\r\n        let effectsCanvas: HTMLCanvasElement = this.refs.characterEffectsCanvas as HTMLCanvasElement;\r\n        let effectsCanvasContext: CanvasRenderingContext2D = effectsCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        let shadowImg: HTMLImageElement = await new Promise<HTMLImageElement>(resolve => {\r\n            let shadowImgSrc: string = CharacterImageMap.CharacterShadowSource;\r\n            let shadow: HTMLImageElement = new Image();\r\n            shadow.onload = () => resolve(shadow);\r\n            shadow.src = shadowImgSrc;\r\n        });\r\n\r\n        let charBorderImg: HTMLImageElement = await new Promise<HTMLImageElement>(resolve => {\r\n            let charBorderImgSrc: string = borderCanvas.toDataURL('image/png');\r\n            let border: HTMLImageElement = new Image();\r\n            border.onload = () => resolve(border);\r\n            border.src = charBorderImgSrc;\r\n        });\r\n\r\n        let charImg: HTMLImageElement = await new Promise<HTMLImageElement>(resolve => {\r\n            let charImgSrc: string = charStagingCanvas.toDataURL('image/png');\r\n            let char: HTMLImageElement = new Image();\r\n            char.onload = () => resolve(char);\r\n            char.src = charImgSrc;\r\n        });\r\n\r\n        // First, wipe the canvas. This needs to be cleared every time we re-render and re-draw.\r\n        effectsCanvasContext.clearRect(0, 0, effectsCanvas.width, effectsCanvas.height);\r\n\r\n        // Draw the shadow underneath a character's feet first. This puts it as far in the background as\r\n        // possible.\r\n        effectsCanvasContext.drawImage(\r\n            shadowImg,\r\n            0,\r\n            CharacterImageCanvas.shadowOffset * CharacterImageCanvas.charScaleFactor,\r\n            shadowImg.width * CharacterImageCanvas.charScaleFactor,\r\n            shadowImg.height * CharacterImageCanvas.charScaleFactor\r\n            );\r\n\r\n        effectsCanvasContext.drawImage(charBorderImg, 0, 0);\r\n        effectsCanvasContext.drawImage(charImg, 0, 0);\r\n    }\r\n}\r\n","export enum CharacterSize\r\n{\r\n    Average = 'Size_Average'\r\n}","import React from 'react';\r\nimport { CharImageDownloadCallback } from '../Types/CharImageDownloadCallback';\r\nimport { CharacterImageCanvas } from './CharacterImageCanvas';\r\nimport { ColorResult, CirclePicker } from 'react-color';\r\n\r\n/**\r\n * @description The properties for this class.\r\n * @param imagesToRender A list of images that will be rendered in-order, in the drawing area. Note that the\r\n * order of this array determines how images will be drawn.\r\n * @param downloadCallback A callback when the download button is clicked in this component.\r\n */\r\nexport interface ICharacterDrawingAreaProps {\r\n    imagesToRender: string[];\r\n    downloadCallback: CharImageDownloadCallback;\r\n}\r\n\r\n/**\r\n * @description The state for this class.\r\n * @param borderColor A css-style-string used to color the border for the character. This will come from the\r\n * circle color picker.\r\n * @param downloadUrl A data url that will be used when providing the callback for the download button.\r\n */\r\nexport interface ICharacterDrawingAreaState {\r\n    borderColor: string;\r\n    downloadUrl: string;\r\n}\r\n\r\n/**\r\n * A high-level container for the character drawing area. Contains the border color controls, the download\r\n * button and the character canvas.\r\n */\r\nexport class CharacterDrawingArea extends React.Component<ICharacterDrawingAreaProps, ICharacterDrawingAreaState> {\r\n    private static outlineColorOptions =\r\n    [\r\n        '#131313',\r\n        '#ffffff',\r\n        '#c42430',\r\n        '#ffeb57',\r\n        '#5ac54f',\r\n        '#0cf1ff'\r\n    ];\r\n\r\n    /**\r\n     * @description Creates a new instance of this class.\r\n     * @param props The provided properties for this class.\r\n     */\r\n    public constructor(props: ICharacterDrawingAreaProps) {\r\n        super(props);\r\n        this.state = {\r\n            borderColor: \"rgb(10, 10, 10)\",\r\n            downloadUrl: \"\"\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Renders this component.\r\n     */\r\n    public render() {\r\n        return (\r\n            <div className=\"character-drawing-area\">\r\n                <CharacterImageCanvas\r\n                    ref=\"charImageCanvas\"\r\n                    imagesToRender={this.props.imagesToRender}\r\n                    borderColor={this.state.borderColor}\r\n                />\r\n                <span>\r\n                    Border Color\r\n                </span>\r\n                <CirclePicker\r\n                    onChangeComplete={this.handleColorChange.bind(this)}\r\n                    color={this.state.borderColor}\r\n                    colors={CharacterDrawingArea.outlineColorOptions}\r\n                />\r\n                <button className=\"character-image-download\"\r\n                    onClick={() => this.props.downloadCallback(this.fetchDownloadUrl())}>\r\n                    &gt;&gt;Download&lt;&lt;\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    private handleColorChange(color: ColorResult): void {\r\n        this.setState({\r\n            borderColor: color.hex\r\n        });\r\n    }\r\n\r\n    private fetchDownloadUrl(): string {\r\n        let charImgCanvas: CharacterImageCanvas = this.refs.charImageCanvas as CharacterImageCanvas;\r\n        let downloadUrl = charImgCanvas.GetDownloadUrl();\r\n\r\n        return downloadUrl;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport '../CharacterImage.css';\r\n\r\nimport { PartSelector } from './PartSelector';\r\nimport { CharacterDrawingArea } from './CharacterDrawingArea';\r\n\r\nimport { CharacterImageMap } from '../Classes/CharacterImageMap';\r\nimport { CharImageLayout } from '../Classes/CharImageLayout';\r\n\r\nimport { CharacterSize } from '../Enums/CharacterSize';\r\nimport { PartType } from '../Enums/PartType';\r\nimport { BodyType } from '../Enums/BodyType';\r\n\r\nimport { BodyTypeSelectionCallback } from '../Types/BodyTypeSelectionCallback';\r\nimport { PartTypeSelectionCallback } from '../Types/PartTypeSelectionCallback';\r\nimport { PartSelectionCallback } from '../Types/PartSelectionCallback';\r\nimport { CharImageDownloadCallback } from '../Types/CharImageDownloadCallback';\r\n\r\n/**\r\n * @description\r\n * The interface for props passed to this object. This class in particular takes no props; it is effectively\r\n * the app itself.\r\n */\r\nexport interface ICharacterImageProps {\r\n};\r\n\r\n/**\r\n * @description\r\n * The interface for the internal state maintained by this object.\r\n * @param canvasImages The list of image sources, represented as strings, that will be rendered using the\r\n * Canvas class.\r\n * @param partLayers A list of image layers. This contains information about all of the possible layers that\r\n * can be drawn to the currently-selected body type. This contains information about what each layer is, how\r\n * that layer is drawn, and what the possible images are in that layer.\r\n */\r\nexport interface ICharacterImageState {\r\n    charSize: CharacterSize;\r\n    bodyType: BodyType;\r\n    partType: PartType;\r\n    charImageLayout: CharImageLayout;\r\n};\r\n\r\n/**\r\n * @description The main entry point for the character drawing application. Provides all of the buttons and\r\n * fun stuff needed to create a character image on a canvas element.\r\n */\r\nexport class CharacterImage extends React.Component<ICharacterImageProps, ICharacterImageState> {\r\n    private handlePartTypeChange(partType: PartType) {\r\n        this.setState({\r\n            partType: partType\r\n        });\r\n    }\r\n\r\n    private handleBodyTypeChange(bodyType: BodyType) {\r\n        let charImageLayout: CharImageLayout = new CharImageLayout(new Map<PartType, string>())\r\n\r\n        if (CharacterImageMap.DefaultBodyParts.has(bodyType)) {\r\n            charImageLayout = CharacterImageMap.DefaultBodyParts.get(bodyType) as CharImageLayout;\r\n        }\r\n\r\n        this.setState({\r\n            bodyType: bodyType,\r\n            charImageLayout: charImageLayout\r\n        });\r\n    }\r\n\r\n    private handlePartSelection(partType: PartType, imgSource: string): void {\r\n        let charImgLayout = this.state.charImageLayout;\r\n        charImgLayout.SetPartImage(partType, imgSource);\r\n\r\n        this.setState({\r\n            charImageLayout: charImgLayout\r\n        });\r\n    }\r\n\r\n    private handleCanvasDownload(downloadSource: string): void {\r\n        if (downloadSource === undefined || downloadSource === \"\") {\r\n            console.error(\"Character image was attempted to be downloaded with an empty, unset string.\");\r\n        }\r\n        else {\r\n            let link = document.createElement('a');\r\n\r\n            link.download = 'characterImage.png';\r\n            link.href = downloadSource;\r\n            link.click();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Creates a new instance of this component.\r\n     * @param props Higher-order properties passed in to this component.\r\n     */\r\n    public constructor(props: ICharacterImageProps) {\r\n        super(props);\r\n        this.state = {\r\n            charSize: CharacterSize.Average,\r\n            bodyType: BodyType.AverageSizedFeminine,\r\n            partType: PartType.Body,\r\n            charImageLayout: CharacterImageMap.DefaultBodyParts.get(BodyType.AverageSizedFeminine) as CharImageLayout\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description\r\n     * Renders a series of body selectors for the user to pick from. These body selectors will modify the list\r\n     * of available accessories (since a tiny hat looks silly on a giant person . . . or does it?). Needs to\r\n     * look at the BodyMap.tsx file to understand what will be populated.\r\n     */\r\n    public renderBodySelection() {\r\n        return (<div></div>);\r\n    }\r\n\r\n    /**\r\n     * @description Renders this component.\r\n     */\r\n    public render() {\r\n        let imagePaths = CharacterImageMap.GetCharacterImagePaths(this.state.charSize, this.state.bodyType, this.state.partType);\r\n        \r\n        let partTypeTabSelection: PartTypeSelectionCallback = (partType: PartType) => {\r\n            this.handlePartTypeChange(partType);\r\n        };\r\n\r\n        let bodyTypeTabSelection: BodyTypeSelectionCallback = (bodyType: BodyType) => {\r\n            this.handleBodyTypeChange(bodyType);\r\n        };\r\n\r\n        let partSelection: PartSelectionCallback = (partType: PartType, imgSource: string) => {\r\n            this.handlePartSelection(partType, imgSource);\r\n        };\r\n\r\n        let canvasDownload: CharImageDownloadCallback = (downloadSource: string) => {\r\n            this.handleCanvasDownload(downloadSource);\r\n        };\r\n\r\n        let charImages: string[] = this.state.charImageLayout.GetImages();\r\n\r\n        return (\r\n            <div className=\"character-image\">\r\n                <CharacterDrawingArea\r\n                    imagesToRender={charImages}\r\n                    downloadCallback={canvasDownload.bind(this)}\r\n                />\r\n                <PartSelector\r\n                    partSelectionCallback={partSelection.bind(this)}\r\n                    bodyTypeSelectionCallback={bodyTypeTabSelection.bind(this)}\r\n                    partTypeSelectionCallback={partTypeTabSelection.bind(this)}\r\n                    partType={this.state.partType}\r\n                    partOptions={imagePaths}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../LandingSpace.css';\r\n\r\nimport React from 'react';\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\nimport { LoginPage } from '../../LoginPage/React/LoginPage';\r\n// import { GamePage } from '../../GamePage/React/GamePage';\r\nimport { ProtectedRoute } from '../../Login/React/ProtectedRoute';\r\nimport { CharacterImage } from '../../CharacterImage/React/CharacterImage';\r\nimport { Nav } from 'react-bootstrap';\r\n\r\n// Use the hash router instead of a browser router so that refreshes and direct-links to pages work.\r\n//https://stackoverflow.com/questions/27928372/react-router-urls-dont-work-when-refreshing-or-writing-manually\r\nexport default function LandingSpace() {\r\n    return (\r\n        <div className=\"landing-space\">\r\n            <div className=\"page-nav\">\r\n                <Nav defaultActiveKey=\"/\">\r\n                    <Nav.Link href=\"/#/character_creator\" eventKey=\"character_creator\">Character Creator</Nav.Link>\r\n                    <Nav.Link href=\"/\" eventKey=\"login\">Login</Nav.Link>\r\n                </Nav>\r\n            </div>\r\n            <div className=\"page-content\">\r\n                <Router>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" children={<LoginPage />} />\r\n                        <Route exact path=\"/character_creator\" children={<CharacterImage />} />\r\n                    </Switch>\r\n                </Router>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// <ProtectedRoute path=\"/\" children={<GamePage />} />\r\n// <Nav.Link href=\"/#/\" eventKey=\"/\">Home</Nav.Link>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport LandingSpace from './Routing/React/LandingSpace';\r\n\r\nReactDOM.render(<LandingSpace />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}